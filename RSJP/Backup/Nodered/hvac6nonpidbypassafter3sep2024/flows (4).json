[
    {
        "id": "c2b14f037c10d200",
        "type": "tab",
        "label": "System",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ad61026d2e8778d5",
        "type": "tab",
        "label": "Local Interface",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e9b71a55.b25c68",
        "type": "subflow",
        "name": "Loops",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "9f7aa00f.d31ab"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 640,
                "y": 40,
                "wires": [
                    {
                        "id": "f2a7b456.1521f8",
                        "port": 0
                    }
                ]
            },
            {
                "x": 460,
                "y": 220,
                "wires": [
                    {
                        "id": "6b0c2d4d.1d2934",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "c0d6ddff15243433",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "Execute SQL",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "4f2e5dab10dd4e88",
            "cb7fd766c9f09bfc",
            "144d6bd39c5027fc",
            "ab5a974fd5a66a28",
            "68307a9395d75296"
        ],
        "x": 794,
        "y": 19,
        "w": 232,
        "h": 142
    },
    {
        "id": "4d622e9d5544cf5c",
        "type": "group",
        "z": "ad61026d2e8778d5",
        "name": "Developer Debug",
        "style": {
            "label": true,
            "fill": "#e3f3d3"
        },
        "nodes": [
            "400cd6c6736b6e29",
            "a9dd9597e70d1d24",
            "bf79ac2f45724e37",
            "ae2996cc837eab99"
        ],
        "x": 54,
        "y": 59,
        "w": 792,
        "h": 82
    },
    {
        "id": "de2a6ca788571482",
        "type": "group",
        "z": "ad61026d2e8778d5",
        "name": "Get Data From MySQL",
        "style": {
            "label": true,
            "fill": "#bfdbef"
        },
        "nodes": [
            "8bec210b53d4bf59",
            "da1f779a77f9a71b",
            "d63299751fc32c1a",
            "1db277d9ef508e05",
            "eaa97ef57435a1fe",
            "82edee113a518b2f",
            "b7337c8b8c56c5d2",
            "104ca5f38a530eb4",
            "44434549ba9bb86c",
            "1806051b5ac208e8",
            "d770849d8ecee83a",
            "22602300d8edbbca"
        ],
        "x": 54,
        "y": 179,
        "w": 792,
        "h": 202
    },
    {
        "id": "b1e0c2b4907fc5ee",
        "type": "group",
        "z": "ad61026d2e8778d5",
        "name": "Set Thermostats",
        "style": {
            "label": true,
            "fill": "#dbcbe7"
        },
        "nodes": [
            "2a5803f61d78400e",
            "223c06f2aff582be",
            "2c2751f9f26102ef",
            "ff5bd8d1909a257e",
            "1be5dfefc6f4a3ce",
            "ac10d85ec75032a0",
            "9087d0e31b1f85f8",
            "b09ecf786bb76adb",
            "8b70a11537179e14",
            "e68c21b9b8cbb24b",
            "a3b7062ff6303c73",
            "886dcd6fc655a20b",
            "2d5df18744acde6e",
            "ae3012dba0c769c7",
            "4fc155190f12a9a5",
            "90c5e96776810a01",
            "cd35ed8ad6754f98",
            "134b2b40b5b3faa3",
            "c990867d865bc131"
        ],
        "x": 44,
        "y": 419,
        "w": 1122,
        "h": 242
    },
    {
        "id": "c1abeab8de7ec308",
        "type": "group",
        "z": "ad61026d2e8778d5",
        "name": "Insert Database",
        "style": {
            "label": true,
            "fill": "#ffbfbf"
        },
        "nodes": [
            "dbf4b9bda43d2e43",
            "e4b813ca78c8373a",
            "ad8380fe6d44b2a5",
            "5f706062795897aa"
        ],
        "x": 54,
        "y": 679,
        "w": 1132,
        "h": 82
    },
    {
        "id": "c57bc90a12d7ab5f",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "Run Loop",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "641b6a6c960d32fb",
            "4ee8f65958ac44b3",
            "2b3bb57567ea52c9",
            "4ff5e6219affac79",
            "4846cf8ccfaa5294",
            "c004c44e4c4901db",
            "5222a1da0995d60e",
            "3a6dab11f5be3472",
            "2a8267dacfe382fc",
            "44817b8b19ec98a2",
            "e36c8c2dbdeb7096",
            "d7faeee2d46758c1",
            "eb3b49d6532d6f1e",
            "fdd25df70c9b832d",
            "ec25e59bf9e2251e",
            "f0bcdcc51c982764",
            "409383be9fc86091",
            "e89ef9fda4e36f2f",
            "02c11ce421cf2535",
            "7d1e5b1061712fda",
            "5b191cbaad339f8b",
            "81b66e0d7fec8e08"
        ],
        "x": 44,
        "y": 639,
        "w": 712,
        "h": 302
    },
    {
        "id": "85b0e53311997526",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "MonitoringTempRH",
        "style": {
            "label": true,
            "color": "#000000",
            "label-position": "n"
        },
        "nodes": [
            "da3a87c71b441873",
            "f6082a19c32ff758",
            "42bf36832cc825d1",
            "c0232418d789ac45",
            "3464b1ef425376bc",
            "01544662e58317ab",
            "0cd777724834821f"
        ],
        "x": 764,
        "y": 539,
        "w": 712,
        "h": 122
    },
    {
        "id": "fd32b8c570f4f067",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "Turn On Heater",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "8260daa0f250cb66",
            "f87688c1c038714f",
            "7d22410dcf8b466d",
            "67420b215fc83091",
            "7791d165ca135a8b",
            "fdc908e1fd137ca7",
            "50bb8949864c85e7",
            "b2765fa2f6a0d3a7",
            "46f0a4bb6a418b2f",
            "9328b4f4e1fd8df9",
            "a1651f70dc901a54",
            "4b5976d6e099908f",
            "51cd92b353766fab",
            "bf649ddcd46ee371"
        ],
        "x": 764,
        "y": 679,
        "w": 1192,
        "h": 142
    },
    {
        "id": "bf3d2e8d116c4d15",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "Running Heater",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "9d6c2a766f43f125",
            "cd4aa74033a2e216",
            "948427bbfb369866",
            "9e51a9d60f1ac8aa",
            "ca5cfc22375d4caf",
            "9cab611b52d07826",
            "fab829ef17b59219",
            "30db0c1253a6c5eb",
            "a7e71b592989720c"
        ],
        "x": 34,
        "y": 959,
        "w": 722,
        "h": 162
    },
    {
        "id": "299adb79ab36320e",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "Turn Off Heater",
        "style": {
            "label": true,
            "color": "#000000",
            "label-position": "n"
        },
        "nodes": [
            "4d3d602d80f0a2a8",
            "9cfb88357a37e4a8",
            "1623846a303c7921",
            "c44b976047efb439",
            "e96c3226eb182318",
            "8da162340b56f4e3",
            "d0dfcd36279bdebe",
            "6b34a359d46da224",
            "a056a8f1bc64bcc6",
            "f77dfaa403319422",
            "eb9bfa8b64a2196c",
            "630a78d178f25e61",
            "1911b5c69f579f30"
        ],
        "x": 764,
        "y": 839,
        "w": 1212,
        "h": 142
    },
    {
        "id": "01714d7729f58f6e",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "Shutdown",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "e1c7056de27e4ba5",
            "b652fe6995001a5c",
            "d9e7033c28b8aaa7",
            "4fbe45428d975524",
            "2962d390a8de5589",
            "5772467a6f68a322",
            "ad4e6943e0f0963f",
            "945b815ba3c6ce8a",
            "365830280cf59084",
            "3e2c52e491bdcdd3",
            "33fd4f9bd0736cc5",
            "b84d1516a88c30d5",
            "6dedaeb58a03a211",
            "fb7bd7db946e49d6",
            "d0ca70fce96f8500",
            "ba205c43e9025796",
            "c9a9e16cb51b93ac",
            "262d34c3de74b737",
            "43df2f5c58d07596",
            "06c385e3419de3c6",
            "71ac49d3f9483be6",
            "fbade8f329b858be",
            "8c82936c0bcb7176",
            "622acd42ebb8c506",
            "ba68cac397c9b5b4",
            "a9eb561cd06f22e0",
            "e8660bb1b256ecf2",
            "e70c1e04911b2861",
            "688c097b4f044086",
            "7542656f0c6a8d55",
            "6b94221bebededbe",
            "90b3db32a9cbfd24",
            "b2b2992f323260d9",
            "eafea3d941ab7961",
            "6cf62f8eaa8cba7a",
            "aef33e911e2227fa"
        ],
        "x": 764,
        "y": 999,
        "w": 1472,
        "h": 242
    },
    {
        "id": "ee6a260d3bb6c805",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "Pre Run Loop",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "defa0ce955f83263",
            "dc1bf3307f019874",
            "bcc98bd55755b935",
            "5c7ef92968f55b55",
            "a3d0e827e263cfea",
            "b2997ef19ad42c91",
            "4aab55f44e96f69c",
            "966aa7d5316d926c",
            "a426efd701f3cadb",
            "173dc4999ccd1f17",
            "8f5c888bfba81804",
            "31561c2c26164f70",
            "2f29cdb85afc6603",
            "e2254c661eaa0102",
            "cb58da7cc8fa60c6",
            "e24550757086963d",
            "648fe1230edac655",
            "47c3cf9a26329769",
            "ce2f48f4924e0b41",
            "23b94d640d0a340e",
            "8c90362e94f47c23",
            "2b57b380fb11766c",
            "2ae52f29c7a90688",
            "2cfc91857ebdd52a",
            "97dc1baa3803610f",
            "2a3e5759c334d676"
        ],
        "x": 764,
        "y": 319,
        "w": 1492,
        "h": 202
    },
    {
        "id": "962feb2f867d692e",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "Receive On/Off from Interface",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "75cf64c6ae651fc6",
            "6f1dce19c50c0b4c",
            "55287fdab8d5fab9",
            "3e239606359acffe",
            "94a9237c19093423",
            "77ba0e484dfe469b",
            "3b3e84fc042bf1d0",
            "ace987c65b980c03",
            "651cb6a61134066e",
            "3faaea21449bee68",
            "cfb0e616009d92c1"
        ],
        "x": 1244,
        "y": 179,
        "w": 762,
        "h": 122
    },
    {
        "id": "aa7677c30dfd8e9f",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "Simulation Incoming Feedback",
        "style": {
            "label": true,
            "color": "#000000",
            "label-position": "n"
        },
        "nodes": [
            "b96e60662444aac2",
            "1d8d1dc4f2bfdde9",
            "faa4eaa457ad7f23",
            "0ebbc1963df61b1f",
            "ed15043d463771d2",
            "8f4bb144b99fa0ef",
            "1b706561e54369c3",
            "5c3ebd8da9d0e70d",
            "9f6a8295fa71ab13",
            "30aed9b0d7c4c8ec",
            "5e1398ce641fa0ee",
            "f23c26b3c4d47807",
            "929cb2075483e23b",
            "832aafd47d715a56",
            "776a3ad756551bc5",
            "df175df519882fcf",
            "0c1727048220b2fa",
            "14d6cf27f0104ae6",
            "2ef6ed92bfeea2c2",
            "23bb397dedc6b0ff",
            "58f0f1a12d526caa"
        ],
        "x": 354,
        "y": 1139,
        "w": 402,
        "h": 442
    },
    {
        "id": "fb200851d136f94e",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "Check Relay Function",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "0783e9b585efe7a5",
            "0a60de78aad0fda0",
            "13ea9c3e20ded888",
            "11e747a9724732c0",
            "80086e68a94a3989",
            "24cee925609f243c",
            "d90f14851f66698e",
            "8697850ca6261f08",
            "3dbec1e062436247",
            "fcd1216bd233ec0a"
        ],
        "x": 764,
        "y": 1299,
        "w": 382,
        "h": 202
    },
    {
        "id": "1ff222ca68a9422e",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "Sensors",
        "style": {
            "label": true,
            "color": "#000000",
            "label-position": "n"
        },
        "nodes": [
            "d74c6b4ec6ae653c",
            "948b1da681d91e63",
            "9095c3f9044eb005",
            "8e5b5b9760242ccc",
            "07065b67ad884ae6",
            "4101f291432901a2",
            "69901e2fc897670c",
            "4e6e52339441d2f6",
            "37bb0d5ef977d3a8",
            "a76c8c48c30ffb88",
            "f80279474d6631fe"
        ],
        "x": 1164,
        "y": 1299,
        "w": 462,
        "h": 482
    },
    {
        "id": "5e65a9282e670b9b",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "Status Relay Base On Output Info",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "088521a1144ef9ca",
            "c8bc0274886eaa29",
            "30cd88139d807361",
            "6f1870f7c21d313b",
            "0971199f365c0710"
        ],
        "x": 1644,
        "y": 1299,
        "w": 262,
        "h": 202
    },
    {
        "id": "2ffe000a9c466eb7",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "Status Relay base On Input Info",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "cfe514c0c2dd300e",
            "49c374e45f100f88",
            "756b2ee4b00af603",
            "47081bf888b7252e",
            "397bb5ccaab7921c"
        ],
        "x": 1924,
        "y": 1299,
        "w": 262,
        "h": 202
    },
    {
        "id": "8f84a6f59102f7e8",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "StatusRelay Base On Feedback Node",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "5c831f117bbb1353",
            "910f33582bcdbff7",
            "f2ab1e0d1548bdf5",
            "f0f03734f49cdcaf",
            "9642d69edabe9708",
            "1bdb697b2e383039"
        ],
        "x": 34,
        "y": 1139,
        "w": 312,
        "h": 322
    },
    {
        "id": "ceef139c469bbbca",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "Idle Request Sensor",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "f4449cd73b42ab58",
            "a161b28ab05a6b7d",
            "82bac92fce9e1b0f",
            "66cd3178ca5a0592",
            "af4c05426bfd1851",
            "88f7f40565c2d35b",
            "fbabcd377d77569c",
            "6877fbb0e66e5265",
            "360ce19388af3861",
            "a909ffb2e3aa4b3d",
            "2576a4c9f28eaada",
            "943cd311ce7c3fa3",
            "08bd93ecf635af2a",
            "6c946d23bf46f50e",
            "0132f7b72010efb2",
            "a9ff0388cd989605",
            "0bbe473d07d329e0",
            "7040f4fa3a150183"
        ],
        "x": 1484,
        "y": 499,
        "w": 1462,
        "h": 162
    },
    {
        "id": "d3317632f375cabc",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "Send to Apex",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "b9a0303b2c63f7e0",
            "a0fc25388422cd37",
            "b8d34a0c85630cc7"
        ],
        "x": 2004,
        "y": 19,
        "w": 422,
        "h": 82
    },
    {
        "id": "02be8c2c45ce0e2b",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "IncomingData",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "153667260b33d754",
            "8f4f65045a651f22",
            "f4794df89bb38904",
            "6f6679b31b507f7c",
            "5788776388e30112",
            "d462a5b9c993dc67",
            "76c454f3fd6b8d57",
            "72fc987867ddcb3d",
            "9e645a9845dcc3de",
            "2658d5e05e2fe27f",
            "64eaab3825d9f9da",
            "f5ec02b409080553",
            "5ece071c5ac40b47",
            "6b88696ca77d8b60",
            "ff8c7f9f3f81d553"
        ],
        "x": 34,
        "y": 179,
        "w": 1202,
        "h": 122
    },
    {
        "id": "632356572be006e1",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "Compressor Auto",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "7d17605593d792b2",
            "145ebf8d26a40fd7",
            "09864de2936ff6be",
            "7a68dd97c70d3bb7",
            "d5d6d2d6527ac207",
            "faac425f626699b1",
            "f093239c94073e14",
            "26068bcd8c1835b6",
            "d081a6b4c509d5f0",
            "9b3524ed65d91d13",
            "508ec849b8835b14",
            "96d87c78a2bd231a",
            "574ae4f7cb78b053",
            "04eda42e48466fb8",
            "8503d31a9112d94e",
            "571232bbc5c9c46c",
            "ca0e89d63a8d5222",
            "f7749ccf8f92143b",
            "da131b51fde53a2b",
            "a2143a0679eb502f",
            "eb9e151422deacf8",
            "6d7be55db5cba85b",
            "0ba7e49e5db86ab9",
            "ef08a8f3778e09ea",
            "62d67ecaf24e9d26",
            "98daf36108d6c020",
            "e91b2748f81b1fd7",
            "2f5f2d49bf67aaef",
            "678a032ca1e4c6f9",
            "863465f1e384f804",
            "841d26b33c2809b8",
            "a14eb4f4fb7577bc",
            "f62e7382d6db941b",
            "54edf257e74031cd",
            "528974811e716fd0",
            "ac0fbd136d3ce001",
            "0022b0fde01c09f7",
            "d5cf99d2118d3d1c",
            "0317097ca382ce3a",
            "9c3ac3f594c1e948",
            "313b47b7b5d44994",
            "71b6c58b8c160cf5",
            "ee33129f6fee9b56",
            "fa420463629be9c7"
        ],
        "x": 2004,
        "y": 119,
        "w": 2172,
        "h": 222
    },
    {
        "id": "5a44f529fddeb430",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "Gateway",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "159fa2531661ed19",
            "a95fcd0923a92944",
            "8e6578be80dac79f",
            "901e03b239d822ca",
            "65c323a838ebe320",
            "abcfc905d718f1b1",
            "724f59461e8bc4e5",
            "e8320b796499d7b9",
            "7f160606e45f5afc",
            "8e25801ef5256376",
            "e9107aa38a439257",
            "4b674d5f1fb8e65a"
        ],
        "x": 34,
        "y": 19,
        "w": 752,
        "h": 142
    },
    {
        "id": "3e1bbc5521a97bc3",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "SystemClock",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "a06b929bf276e8e7",
            "2e980fb95a48d7cb",
            "720a2eb23e14d481",
            "c3126b07ce0f6e04",
            "f61289bca3a9cc09",
            "24d1f829dd5c615c",
            "580830bd221147e6",
            "fde80bf7db0ba825",
            "5d5d69fe9e9d1314",
            "053b220371ea69a4",
            "b0642dd35f178a20",
            "e6b00a8042609fdd",
            "76a42005ec1d44e0"
        ],
        "x": 34,
        "y": 319,
        "w": 712,
        "h": 302
    },
    {
        "id": "d14909219f57c9f8",
        "type": "group",
        "z": "c2b14f037c10d200",
        "name": "initiate Boot",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "810ffda73e430804",
            "6717fbc88e310c5d",
            "220f1b54017b8810",
            "d2f2ed48a84d2f22",
            "b63d1c78a5ec701c",
            "cefa443834eb32d0",
            "bb9d5fd568ca8173",
            "1fe7a08548ef5f37"
        ],
        "x": 1034,
        "y": 19,
        "w": 952,
        "h": 142
    },
    {
        "id": "ce2f48f4924e0b41",
        "type": "junction",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "x": 2160,
        "y": 360,
        "wires": [
            [
                "648fe1230edac655"
            ]
        ]
    },
    {
        "id": "23b94d640d0a340e",
        "type": "junction",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "x": 2160,
        "y": 400,
        "wires": [
            [
                "648fe1230edac655"
            ]
        ]
    },
    {
        "id": "8c90362e94f47c23",
        "type": "junction",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "x": 2160,
        "y": 440,
        "wires": [
            [
                "648fe1230edac655"
            ]
        ]
    },
    {
        "id": "2b57b380fb11766c",
        "type": "junction",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "x": 2160,
        "y": 480,
        "wires": [
            [
                "648fe1230edac655"
            ]
        ]
    },
    {
        "id": "688c097b4f044086",
        "type": "junction",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "x": 2140,
        "y": 1040,
        "wires": [
            [
                "e70c1e04911b2861"
            ]
        ]
    },
    {
        "id": "7542656f0c6a8d55",
        "type": "junction",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "x": 2140,
        "y": 1080,
        "wires": [
            [
                "e70c1e04911b2861"
            ]
        ]
    },
    {
        "id": "6b94221bebededbe",
        "type": "junction",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "x": 2140,
        "y": 1120,
        "wires": [
            [
                "e70c1e04911b2861"
            ]
        ]
    },
    {
        "id": "90b3db32a9cbfd24",
        "type": "junction",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "x": 2140,
        "y": 1160,
        "wires": [
            [
                "e70c1e04911b2861"
            ]
        ]
    },
    {
        "id": "5e1398ce641fa0ee",
        "type": "junction",
        "z": "c2b14f037c10d200",
        "g": "aa7677c30dfd8e9f",
        "x": 600,
        "y": 1180,
        "wires": [
            [
                "faa4eaa457ad7f23"
            ]
        ]
    },
    {
        "id": "f23c26b3c4d47807",
        "type": "junction",
        "z": "c2b14f037c10d200",
        "g": "aa7677c30dfd8e9f",
        "x": 600,
        "y": 1220,
        "wires": [
            [
                "faa4eaa457ad7f23"
            ]
        ]
    },
    {
        "id": "929cb2075483e23b",
        "type": "junction",
        "z": "c2b14f037c10d200",
        "g": "aa7677c30dfd8e9f",
        "x": 600,
        "y": 1260,
        "wires": [
            [
                "faa4eaa457ad7f23"
            ]
        ]
    },
    {
        "id": "832aafd47d715a56",
        "type": "junction",
        "z": "c2b14f037c10d200",
        "g": "aa7677c30dfd8e9f",
        "x": 600,
        "y": 1300,
        "wires": [
            [
                "faa4eaa457ad7f23"
            ]
        ]
    },
    {
        "id": "776a3ad756551bc5",
        "type": "junction",
        "z": "c2b14f037c10d200",
        "g": "aa7677c30dfd8e9f",
        "x": 600,
        "y": 1340,
        "wires": [
            [
                "faa4eaa457ad7f23"
            ]
        ]
    },
    {
        "id": "df175df519882fcf",
        "type": "junction",
        "z": "c2b14f037c10d200",
        "g": "aa7677c30dfd8e9f",
        "x": 600,
        "y": 1380,
        "wires": [
            [
                "faa4eaa457ad7f23"
            ]
        ]
    },
    {
        "id": "0c1727048220b2fa",
        "type": "junction",
        "z": "c2b14f037c10d200",
        "g": "aa7677c30dfd8e9f",
        "x": 600,
        "y": 1420,
        "wires": [
            [
                "faa4eaa457ad7f23"
            ]
        ]
    },
    {
        "id": "14d6cf27f0104ae6",
        "type": "junction",
        "z": "c2b14f037c10d200",
        "g": "aa7677c30dfd8e9f",
        "x": 600,
        "y": 1460,
        "wires": [
            [
                "faa4eaa457ad7f23"
            ]
        ]
    },
    {
        "id": "2ef6ed92bfeea2c2",
        "type": "junction",
        "z": "c2b14f037c10d200",
        "g": "aa7677c30dfd8e9f",
        "x": 600,
        "y": 1500,
        "wires": [
            [
                "faa4eaa457ad7f23"
            ]
        ]
    },
    {
        "id": "23bb397dedc6b0ff",
        "type": "junction",
        "z": "c2b14f037c10d200",
        "g": "aa7677c30dfd8e9f",
        "x": 600,
        "y": 1540,
        "wires": [
            [
                "faa4eaa457ad7f23"
            ]
        ]
    },
    {
        "id": "3b8e5eb93b7526d7",
        "type": "MySQLdatabase",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "rsjpharapankita",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "415d098faf23ad7c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "9f7aa00f.d31ab",
        "type": "function",
        "z": "e9b71a55.b25c68",
        "name": "InitiateLoop",
        "func": "var data = msg.payload;\nvar limit = data.length;\nflow.set(\"data\",data);\nflow.set(\"limit\",limit);\nmsg.topic = \"0\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 170,
        "y": 40,
        "wires": [
            [
                "f2a7b456.1521f8"
            ]
        ]
    },
    {
        "id": "f2a7b456.1521f8",
        "type": "function",
        "z": "e9b71a55.b25c68",
        "name": "Loop",
        "func": "var data = flow.get(\"data\");\nvar count = parseInt(msg.topic);\nmsg.payload = data[count];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 40,
        "wires": [
            [
                "31bc9e4a.f0c962"
            ]
        ]
    },
    {
        "id": "26ad85dd.1a426a",
        "type": "link in",
        "z": "e9b71a55.b25c68",
        "name": "",
        "links": [
            "6e495066.b7de"
        ],
        "x": 215,
        "y": 80,
        "wires": [
            [
                "f2a7b456.1521f8"
            ]
        ]
    },
    {
        "id": "31bc9e4a.f0c962",
        "type": "link out",
        "z": "e9b71a55.b25c68",
        "name": "",
        "links": [
            "4642e834.27d108"
        ],
        "x": 395,
        "y": 80,
        "wires": []
    },
    {
        "id": "6e495066.b7de",
        "type": "link out",
        "z": "e9b71a55.b25c68",
        "name": "",
        "links": [
            "26ad85dd.1a426a"
        ],
        "x": 615,
        "y": 180,
        "wires": []
    },
    {
        "id": "4642e834.27d108",
        "type": "link in",
        "z": "e9b71a55.b25c68",
        "name": "",
        "links": [
            "31bc9e4a.f0c962"
        ],
        "x": 95,
        "y": 180,
        "wires": [
            [
                "db2b7400.81c1e8"
            ]
        ]
    },
    {
        "id": "db2b7400.81c1e8",
        "type": "function",
        "z": "e9b71a55.b25c68",
        "name": "Increment",
        "func": "var limit = flow.get(\"limit\");\nvar count = parseInt(msg.topic);\ncount++;\nif(count>=limit){\n    msg.payload = null;\n}\nmsg.topic = String(count);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 200,
        "y": 180,
        "wires": [
            [
                "6b0c2d4d.1d2934"
            ]
        ]
    },
    {
        "id": "6b0c2d4d.1d2934",
        "type": "switch",
        "z": "e9b71a55.b25c68",
        "name": "Continue?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 180,
        "wires": [
            [
                "f20c27b7.bee1c8"
            ],
            []
        ]
    },
    {
        "id": "f20c27b7.bee1c8",
        "type": "delay",
        "z": "e9b71a55.b25c68",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 500,
        "y": 180,
        "wires": [
            [
                "6e495066.b7de"
            ]
        ]
    },
    {
        "id": "159fa2531661ed19",
        "type": "mqtt in",
        "z": "c2b14f037c10d200",
        "g": "5a44f529fddeb430",
        "name": "",
        "topic": "esp138/data",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "415d098faf23ad7c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 60,
        "wires": [
            [
                "8e25801ef5256376",
                "e9107aa38a439257"
            ]
        ]
    },
    {
        "id": "a95fcd0923a92944",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "5a44f529fddeb430",
        "name": "IncomingData",
        "mode": "link",
        "links": [
            "8f4f65045a651f22",
            "abcfc905d718f1b1"
        ],
        "x": 365,
        "y": 60,
        "wires": []
    },
    {
        "id": "8f4f65045a651f22",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "02be8c2c45ce0e2b",
        "name": "link in 1",
        "links": [
            "a95fcd0923a92944",
            "faa4eaa457ad7f23",
            "6776bbaf798955cd",
            "c6ccaf078e16fab4"
        ],
        "x": 75,
        "y": 240,
        "wires": [
            [
                "153667260b33d754"
            ]
        ]
    },
    {
        "id": "4f2e5dab10dd4e88",
        "type": "mysql",
        "z": "c2b14f037c10d200",
        "g": "c0d6ddff15243433",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 920,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "5788776388e30112",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "02be8c2c45ce0e2b",
        "name": "(networkID)",
        "property": "networkid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "04",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "04",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 240,
        "wires": [
            [
                "d462a5b9c993dc67"
            ],
            [
                "f5ec02b409080553",
                "6b88696ca77d8b60"
            ]
        ]
    },
    {
        "id": "d462a5b9c993dc67",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "02be8c2c45ce0e2b",
        "name": "Parse",
        "func": "msg.deviceinfo = msg.payload[0];\nvar data = msg.realdata;\nvar numBytes = data.length / 2;\nvar byteArray = new Uint8Array(numBytes);\nfor (var i=0; i<numBytes; i++) {\n    byteArray[i] = parseInt(data.substr(i*2, 2), 16);\n}\nvar len = byteArray[3];\nvar byteData = new Uint8Array(len);\nfor (i=0; i<len; i++) {\n    byteData[i] = byteArray[i+4];\n}\nmsg.payload = byteData;\nmsg.data = data.substr(0,6);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 220,
        "wires": [
            [
                "76c454f3fd6b8d57"
            ]
        ]
    },
    {
        "id": "76c454f3fd6b8d57",
        "type": "cayennelpp-decoder",
        "z": "c2b14f037c10d200",
        "g": "02be8c2c45ce0e2b",
        "name": "decoder",
        "x": 860,
        "y": 220,
        "wires": [
            [
                "9e645a9845dcc3de"
            ]
        ]
    },
    {
        "id": "9e645a9845dcc3de",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "02be8c2c45ce0e2b",
        "name": " Build",
        "func": "var data = msg.payload;\ndata.networkid = msg.data.substring(0,2);\ndata.devid = msg.data.substring(2,4);\ndata.typeid = msg.data.substring(4,6);\ndata.epoch = (Date.now());\nmsg.payload = data;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 220,
        "wires": [
            [
                "2658d5e05e2fe27f",
                "5ece071c5ac40b47"
            ]
        ]
    },
    {
        "id": "6f6679b31b507f7c",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "02be8c2c45ce0e2b",
        "name": " Listed?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 240,
        "wires": [
            [
                "5788776388e30112"
            ]
        ]
    },
    {
        "id": "153667260b33d754",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "02be8c2c45ce0e2b",
        "name": "Check ID",
        "func": "msg.realdata = msg.payload;\nvar networkid = msg.payload.substring(0,2);\nvar devid = msg.payload.substring(2,4);\nvar typeid = msg.payload.substring(4,6);\nmsg.topic = \"SELECT * from `devicelist` WHERE \";\nmsg.topic += \"`networkid` = '\"+networkid+\"' AND \";\nmsg.topic += \"`devid` = '\" + devid +\"' AND \";\nmsg.topic += \"`typeid` = '\" + typeid +\"';\";\nmsg.networkid = msg.realdata.substring(0,2);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 240,
        "wires": [
            [
                "f4794df89bb38904"
            ]
        ]
    },
    {
        "id": "2658d5e05e2fe27f",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "02be8c2c45ce0e2b",
        "name": "Query",
        "func": "var d = msg.deviceinfo;\nmsg.topic = \"UPDATE `monitoringdata` SET \";\nif(d.keterangan.split(\",\")[0] == \"Temp/RH\"){\n    if(d.keterangan.split(\",\")[1] == \"CathLab\"){\n        msg.topic += \"`Temp_Cathlab` = \"+String(Math.round(msg.payload.temperature_1))+\",\";\n        msg.topic += \"`RH_Cathlab` = \"+String(Math.round(msg.payload.relative_humidity_1))+\";\";\n        flow.set(\"Temp_Cathlab\",[msg.payload.temperature_1,Date.now()]);\n        flow.set(\"RH_Cathlab\", [msg.payload.relative_humidity_1,Date.now()]);\n    } else if (d.keterangan.split(\",\")[1] == \"Machine\"){\n        msg.topic += \"`Temp_Machine` = \" + String(Math.round(msg.payload.temperature_1)) + \",\";\n        msg.topic += \"`RH_Machine` = \" + String(Math.round(msg.payload.relative_humidity_1)) + \";\";\n        flow.set(\"Temp_Machine\", [msg.payload.temperature_1,Date.now()]);\n        flow.set(\"RH_Machine\", [msg.payload.relative_humidity_1,Date.now()]);\n    }\n} else if (d.keterangan.split(\",\")[0] == \"Pressure\"){\n    if (d.keterangan.split(\",\")[1] == \"MediumFilter\") {\n        msg.topic += \"`Pre_Filter` = \" + String(msg.payload.barometric_pressure_1) + \";\";\n        flow.set(\"Pre_Filter\", [msg.payload.barometric_pressure_1,Date.now()]);\n    } else if (d.keterangan.split(\",\")[1] == \"HepaFilter\") {\n        msg.topic += \"`HEPA_Filter` = \" + String(msg.payload.barometric_pressure_1) + \";\";\n        flow.set(\"HEPA_Filter\", [msg.payload.barometric_pressure_1,Date.now()]);\n    }\n}\n\nmsg.topic += \"INSERT INTO `recorddevice`(`epoch`, `networkid`, `devid`, `typeid`, `temp`, `val`) VALUES (\";\nmsg.topic += String(msg.payload.epoch)+\",\";\nmsg.topic += \"'\" + String(msg.payload.networkid) + \"',\";\nmsg.topic += \"'\" + String(msg.payload.devid) + \"',\";\nmsg.topic += \"'\" + String(msg.payload.typeid) + \"',\";\nmsg.topic += String(msg.payload.temperature_1) + \",\";\nif(msg.payload.networkid == \"02\"){\n    msg.topic += String(msg.payload.barometric_pressure_1);\n}else if(msg.payload.networkid == \"03\"){\n    msg.topic += String(msg.payload.relative_humidity_1);\n}\nmsg.topic += \");\";\n\nmsg.topic += \"DELETE FROM `recorddevice` WHERE `epoch` < \" + String(Date.now()-(604800*1000))+\";\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 220,
        "wires": [
            [
                "64eaab3825d9f9da"
            ]
        ]
    },
    {
        "id": "64eaab3825d9f9da",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "02be8c2c45ce0e2b",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "cb7fd766c9f09bfc",
            "9b0d96a526b14c55",
            "ab5a974fd5a66a28",
            "b9a0303b2c63f7e0"
        ],
        "x": 1195,
        "y": 220,
        "wires": []
    },
    {
        "id": "cb7fd766c9f09bfc",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "c0d6ddff15243433",
        "name": "link in 2",
        "links": [
            "64eaab3825d9f9da",
            "72fc987867ddcb3d",
            "4c17409ddbc782a5",
            "3fae4a69287e8867",
            "983c5238c51828dc",
            "b63d1c78a5ec701c"
        ],
        "x": 835,
        "y": 60,
        "wires": [
            [
                "4f2e5dab10dd4e88"
            ]
        ]
    },
    {
        "id": "8e6578be80dac79f",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "5a44f529fddeb430",
        "name": "OutData",
        "links": [
            "3464b1ef425376bc",
            "630a78d178f25e61",
            "31d2b08316816f13",
            "618781567775cb33",
            "648fe1230edac655",
            "af5fad60c2799c88",
            "8260daa0f250cb66",
            "9328b4f4e1fd8df9",
            "d1bcd9574d203e14",
            "de5cfc72b0d10bf3",
            "6b34a359d46da224",
            "a7e71b592989720c",
            "780771ba20b86bbe",
            "f9f4bd8039c3fbc8",
            "b5539273c8b7b27c",
            "d6ec50e49909a835",
            "6c8877aeb5ae2bf4",
            "fcd1216bd233ec0a",
            "e70c1e04911b2861",
            "a909ffb2e3aa4b3d",
            "8c26e969a4e566c5",
            "508ec849b8835b14",
            "62d67ecaf24e9d26",
            "678a032ca1e4c6f9"
        ],
        "x": 405,
        "y": 60,
        "wires": [
            [
                "e8320b796499d7b9",
                "4b674d5f1fb8e65a"
            ]
        ]
    },
    {
        "id": "f4794df89bb38904",
        "type": "mysql",
        "z": "c2b14f037c10d200",
        "g": "02be8c2c45ce0e2b",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 310,
        "y": 240,
        "wires": [
            [
                "6f6679b31b507f7c"
            ]
        ]
    },
    {
        "id": "6717fbc88e310c5d",
        "type": "mysql",
        "z": "c2b14f037c10d200",
        "g": "d14909219f57c9f8",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1540,
        "y": 80,
        "wires": [
            [
                "220f1b54017b8810",
                "1fe7a08548ef5f37"
            ]
        ]
    },
    {
        "id": "220f1b54017b8810",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "d14909219f57c9f8",
        "name": "Init Global Variable",
        "func": "var json = {};\nflow.set(\"InitTime\",Date.now());\nflow.set(\"RelayInput\",msg.payload[1]);\nflow.set(\"RelayOutput\",msg.payload[2]);\nflow.set(\"RelayInputIndoor\",msg.payload[3]);\nflow.set(\"RelayOutputIndoor\",msg.payload[4]);\nflow.set(\"SensorQty\",msg.payload[5]);\nflow.set(\"SetValueTemp\",msg.payload[6][0].TempCathlab);\nflow.set(\"SetValueRH\",msg.payload[7][0].RHCathlab);\nflow.set(\"JedaOutdoor\",Date.now());\nflow.set(\"autocmd\",\"None\");\nflow.set(\"StartLoops\",false);\nflow.set(\"AutoRequest\",true);\nfor (let index = 0; index < Object.keys(msg.payload[0][0]).length ; index++) {\n    flow.set(Object.keys(msg.payload[0][0])[index],msg.payload[0][0][Object.keys(msg.payload[0][0])[index]]) \n    json[String(Object.keys(msg.payload[0][0])[index])] = flow.get(Object.keys(msg.payload[0][0])[index]);  \n}\njson[\"Timestamp\"] = toEpochTimeInSeconds(json.Timestamp);\nmsg.payload = [json,msg.payload[1],msg.payload[2]];\nreturn msg;\n\nfunction toEpochTimeInSeconds(dateString) {\n    return Math.floor(new Date(dateString).getTime());\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 60,
        "wires": [
            [
                "810ffda73e430804"
            ]
        ]
    },
    {
        "id": "810ffda73e430804",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "d14909219f57c9f8",
        "name": "debug 43",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1880,
        "y": 60,
        "wires": []
    },
    {
        "id": "f5ec02b409080553",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "02be8c2c45ce0e2b",
        "name": " Relay",
        "func": "msg.deviceinfo = msg.payload[0];\nmsg.topic = \"\";\nif(msg.deviceinfo.keterangan == \"RelayIndoor\"){\n    var RelayInputIndoor = flow.get(\"RelayInputIndoor\");    \n    //Ext--------------------------------------------------------------------------------------------\n    msg.deviceinfo[\"InputIndoorValExt\"] = reverseString(hexToBinary(msg.realdata.substring(8,10)));\n    if(msg.deviceinfo.InputIndoorValExt == \"11000000\"){\n        RelayInputIndoor[0][\"Stat\"] = 1;\n        for (let index = 1; index < RelayInputIndoor.length; index++) {\n            RelayInputIndoor[index][\"Stat\"] = 0;\n        }\n        msg.infoIndoor = false;\n        msg.topic += \"UPDATE `InputIndoor` SET `Stat` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 0;\";\n    }else{\n        msg.infoIndoor = true;\n        RelayInputIndoor[0][\"Stat\"] = 0;\n        var spt = msg.deviceinfo.InputIndoorValExt.split(\"\");\n        for (let index = 1; index < spt.length+1; index++) {\n            if(spt[index-1] == \"1\"){\n                if(index==1){\n                    msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 0;\";\n                }else if(index == 2){\n                    msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 0;\";\n                }\n                msg.topic += \"UPDATE `InputIndoor` SET `Stat` = 1 WHERE `Number` = \"+String(index)+\";\";          \n            }else if(spt[index-1] == \"0\"){\n                \n                if(index==1){\n                    msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 1;\";\n                }else if(index == 2){\n                    msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 1;\";\n                }\n                msg.topic += \"UPDATE `InputIndoor` SET `Stat` = 0 WHERE `Number` = \"+String(index)+\";\";             \n            }\n        }\n    }\n    //ORI---------------------------------------------------------------------------------------------\n    msg.deviceinfo[\"InputIndoorVal\"] = reverseString(hexToBinary(msg.realdata.substring(10,12)));\n    if(msg.deviceinfo.InputIndoorVal == \"00000000\"){\n        RelayInputIndoor[0][\"Stat\"] = 1;\n        for (let index = 1; index < RelayInputIndoor.length; index++) {\n            RelayInputIndoor[index][\"Stat\"] = 0;\n        }\n        if(msg.infoIndoor == false){\n            msg.topic += \"UPDATE `InputIndoor` SET `Stat` = 0;\";\n            msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 0;\";\n            msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 0;\";\n        }\n    }else{\n        RelayInputIndoor[0][\"Stat\"] = 0;\n        var spt = msg.deviceinfo.InputIndoorVal.split(\"\");\n        \n        for (let index = 1; index < spt.length+1; index++) {\n            if(spt[index-1] == \"1\"){\n                if(msg.infoIndoor == false){\n                    if(index==1){\n                        msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 1;\";\n                    }else if(index == 2){\n                        msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 1;\";\n                    }\n                    msg.topic += \"UPDATE `InputIndoor` SET `Stat` = 1 WHERE `Number` = \"+String(index)+\";\";          \n                }\n                RelayInputIndoor[index][\"Stat\"] = 1;\n            }else if(spt[index-1] == \"0\"){\n                if(msg.infoIndoor == false){\n                    if(index==1){\n                        msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 0;\";\n                    }else if(index == 2){\n                        msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 0;\";\n                    }\n                    msg.topic += \"UPDATE `InputIndoor` SET `Stat` = 0 WHERE `Number` = \"+String(index)+\";\";             \n                }\n                RelayInputIndoor[index][\"Stat\"] = 0;         \n            }\n        }\n    }\n    flow.set(\"RelayInputIndoor\", RelayInputIndoor);\n    \n\n    var RelayOutputIndoor = flow.get(\"RelayOutputIndoor\");\n    msg.deviceinfo[\"OutputIndoorVal\"] = reverseString(hexToBinary2((msg.realdata.substring(10, 12))));\n    if (msg.deviceinfo.OutputIndoorVal == \"00000000\") {\n        RelayOutputIndoor[0][\"Stat\"] = 1;\n        for (let index = 1; index < RelayOutputIndoor.length; index++) {\n            RelayOutputIndoor[index][\"Stat\"] = 0;\n        }\n        if (msg.infoIndoor == false) {\n            msg.topic += \"UPDATE `OutputIndoor` SET `Stat` = 0;\";\n            msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 0;\";\n            msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 0;\";\n        }\n    } else {\n        RelayOutputIndoor[0][\"Stat\"] = 0;\n        var spt = msg.deviceinfo.OutputIndoorVal.split(\"\");\n        for (let index = 1; index < spt.length + 1; index++) {\n            if (spt[index - 1] == \"0\") {\n                if (msg.infoIndoor == false) {\n                    if(index==1){\n                        msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 0;\";\n                    }else if(index == 2){\n                        msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 0;\";\n                    }\n                }\n                msg.topic += \"UPDATE `OutputIndoor` SET `Stat` = 0 WHERE `Number` = \" + String(index) + \";\";\n                RelayOutputIndoor[index][\"Stat\"] = 0;\n            } else if (spt[index - 1] == \"1\") {\n                if (msg.infoIndoor == false) {\n                    if(index==1){\n                        msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 1;\";\n                    }else if(index == 2){\n                        msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 1;\";\n                    }\n                }\n                msg.topic += \"UPDATE `OutputIndoor` SET `Stat` = 1 WHERE `Number` = \" + String(index) + \";\";\n                RelayOutputIndoor[index][\"Stat\"] = 1;\n            }\n        }\n    }\n    flow.set(\"RelayOutputIndoor\", RelayOutputIndoor);\n    msg.topic += \"UPDATE `Operation` SET `OutputIndoor` = \" + String(parseInt(msg.realdata.substring(10, 12), 16)) + \";\";\n        \n}else{\n    var RelayInput = flow.get(\"RelayInput\");\n    msg.deviceinfo[\"InputVal\"] = reverseString(hexToBinary(msg.realdata.substring(8, 10)));\n    if (msg.deviceinfo.InputVal == \"11111111\") {\n        RelayInput[0][\"Stat\"] = 1;\n        for (let index = 1; index < RelayInput.length; index++) {\n            RelayInput[index][\"Stat\"] = 0;\n        }\n        msg.topic += \"UPDATE `Input` SET `Stat` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `Heater_1` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `Heater_2` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `Booster_Fan` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `Exhaust_Fan` = 0;\";\n        msg.topic += \"UPDATE `information` SET `AutoManual` = '1' WHERE `information`.`ID` = 1;\";\n    } else {\n        RelayInput[0][\"Stat\"] = 0;\n        var spt = msg.deviceinfo.InputVal.split(\"\");\n        \n        for (let index = 1; index < spt.length + 1; index++) {\n            if (spt[index - 1] == \"0\") {\n                if (index == 4) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Heater_1` = 1;\";\n                } else if (index == 5) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Heater_2` = 1;\";\n                } else if (index == 6) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Booster_Fan` = 1;\";\n                } else if (index == 7) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Exhaust_Fan` = 1;\";\n                }\n                msg.topic += \"UPDATE `Input` SET `Stat` = 1 WHERE `Number` = \" + String(index) + \";\";\n                if(index == 1){\n                    msg.topic += \"UPDATE `information` SET `AutoManual` = '0' WHERE `information`.`ID` = 1;\";\n                }\n                RelayInput[index][\"Stat\"] = 1;\n            } else if (spt[index - 1] == \"1\") {\n                \n                if (index == 4) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Heater_1` = 0;\";\n                } else if (index == 5) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Heater_2` = 0;\";\n                } else if (index == 6) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Booster_Fan` = 0;\";\n                } else if (index == 7) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Exhaust_Fan` = 0;\";\n                }\n                msg.topic += \"UPDATE `Input` SET `Stat` = 0 WHERE `Number` = \" + String(index) + \";\";\n                if(index == 1){\n                    msg.topic += \"UPDATE `information` SET `AutoManual` = '1' WHERE `information`.`ID` = 1;\";\n                }\n                RelayInput[index][\"Stat\"] = 0;\n            }\n        }\n    }\n    flow.set(\"RelayInput\", RelayInput);\n    var RelayOutput = flow.get(\"RelayOutput\");\n    msg.deviceinfo[\"OutputVal\"] = reverseString(hexToBinary2((msg.realdata.substring(10, 12))));\n    if (msg.deviceinfo.OutputVal == \"00000000\") {\n        RelayOutput[0][\"Stat\"] = 1;\n        for (let index = 1; index < RelayOutput.length; index++) {\n            RelayOutput[index][\"Stat\"] = 0;\n        }\n        msg.topic += \"UPDATE `Output` SET `Stat` = 0;\";\n        // msg.topic += \"UPDATE `monitoringdata` SET `Heater_1` = 0;\";\n        // msg.topic += \"UPDATE `monitoringdata` SET `Heater_2` = 0;\";\n        // msg.topic += \"UPDATE `monitoringdata` SET `Booster_Fan` = 0;\";\n        // msg.topic += \"UPDATE `monitoringdata` SET `Exhaust_Fan` = 0;\";\n    } else {\n        RelayOutput[0][\"Stat\"] = 0;\n        var spt = msg.deviceinfo.OutputVal.split(\"\");\n        for (let index = 1; index < spt.length + 1; index++) {\n            if (spt[index - 1] == \"0\") {\n                // if (index == 1) {\n                //     msg.topic += \"UPDATE `monitoringdata` SET `Heater_1` = 0;\";\n                // } else if (index == 2) {\n                //     msg.topic += \"UPDATE `monitoringdata` SET `Heater_2` = 0;\";\n                // } else if (index == 3) {\n                //     msg.topic += \"UPDATE `monitoringdata` SET `Booster_Fan` = 0;\";\n                // } else if (index == 4) {\n                //     msg.topic += \"UPDATE `monitoringdata` SET `Exhaust_Fan` = 0;\";\n                // }\n                msg.topic += \"UPDATE `Output` SET `Stat` = 0 WHERE `Number` = \" + String(index) + \";\";\n                RelayOutput[index][\"Stat\"] = 0;\n            } else if (spt[index - 1] == \"1\") {\n                // if (index == 1) {\n                //     msg.topic += \"UPDATE `monitoringdata` SET `Heater_1` = 1;\";\n                // } else if (index == 2) {\n                //     msg.topic += \"UPDATE `monitoringdata` SET `Heater_2` = 1;\";\n                // } else if (index == 3) {\n                //     msg.topic += \"UPDATE `monitoringdata` SET `Booster_Fan` = 1;\";\n                // } else if (index == 4) {\n                //     msg.topic += \"UPDATE `monitoringdata` SET `Exhaust_Fan` = 1;\";\n                // }\n                msg.topic += \"UPDATE `Output` SET `Stat` = 1 WHERE `Number` = \" + String(index) + \";\";\n                RelayOutput[index][\"Stat\"] = 1;\n            }\n        }\n    }\n    flow.set(\"RelayOutput\", RelayOutput);\n    msg.topic += \"UPDATE `Operation` SET `Output` = \" + String(parseInt(msg.realdata.substring(10, 12), 16)) + \";\";\n}\n\nmsg.topic += \"INSERT INTO `recorddevice`(`epoch`, `networkid`, `devid`, `typeid`, `temp`, `val`) VALUES (\";\nmsg.topic += String(Date.now())+\",\";\nmsg.topic += \"'\" + String(msg.payload[0].networkid) + \"',\";\nmsg.topic += \"'\" + String(msg.payload[0].devid) + \"',\";\nmsg.topic += \"'\" + String(msg.payload[0].networkid) + \"',\";\nconsole.log(\"Before : \"+String(msg.realdata.substring(8,10)));\nconsole.log(\"After : \"+String(parseInt(msg.realdata.substring(8,10), 16)));\nmsg.topic += String(parseInt(msg.realdata.substring(8,10), 16)) + \",\";\nmsg.topic += String(parseInt(msg.realdata.substring(10,12), 16));\nmsg.topic += \");\";\n\nmsg.topic += \"DELETE FROM `recorddevice` WHERE `epoch` < \" + String(Date.now()-(604800*1000))+\";\";\n\n// }\nreturn msg;\n\nfunction hexToBinary(hexString) {\n    // Parse the hexadecimal string to an integer\n    const intValue = parseInt(hexString, 16);\n\n    // Convert the integer to a binary string\n    let binaryString = intValue.toString(2);\n\n    // Pad the binary string with leading zeros if necessary\n    // Assuming each hex digit should be represented by 4 binary digits\n    const hexLength = hexString.length;\n    const expectedBinaryLength = hexLength * 4;\n    while (binaryString.length < expectedBinaryLength) {\n        binaryString = '0'.concat(binaryString);\n    }\n\n    return binaryString;\n}\n\nfunction decimalToReversedBinary(decimal) {\n    // Convert the decimal number to a binary string\n    let binaryString = decimal.toString(2);\n\n    // Pad the binary string with leading zeros to ensure it has a length of 4 bits\n    while (binaryString.length < 4) {\n        binaryString = '0'.concat(binaryString);\n    }\n\n    // Reverse the binary string\n    // const reversedBinaryString = binaryString.split('').reverse().join('');\n\n    // return reversedBinaryString;\n    return binaryString;\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\n\n\nfunction hexToBinary2(hexString) {\n    // Menghapus karakter spasi jika ada\n    hexString = hexString.replace(/\\s+/g, '');\n    \n    // Memastikan string heksadesimal valid dan tidak lebih dari 2 karakter\n    if (!/^[\\da-fA-F]{1,2}$/.test(hexString)) {\n        throw new Error(\"Invalid hexadecimal string. Input should be 1 or 2 hex characters.\");\n    }\n\n    // Mengonversi string heksadesimal menjadi biner dengan panjang 8 bit\n    let binaryString = parseInt(hexString, 16).toString(2).padStart(8, '0');\n\n    return binaryString;\n}\n\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 260,
        "wires": [
            [
                "72fc987867ddcb3d",
                "ff8c7f9f3f81d553"
            ]
        ]
    },
    {
        "id": "72fc987867ddcb3d",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "02be8c2c45ce0e2b",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "cb7fd766c9f09bfc",
            "9b0d96a526b14c55",
            "ab5a974fd5a66a28",
            "ca69a53d24cb2e29"
        ],
        "x": 815,
        "y": 260,
        "wires": []
    },
    {
        "id": "a06b929bf276e8e7",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "g": "3e1bbc5521a97bc3",
        "name": " ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 400,
        "wires": [
            [
                "2e980fb95a48d7cb"
            ]
        ]
    },
    {
        "id": "2e980fb95a48d7cb",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "3e1bbc5521a97bc3",
        "name": " Check",
        "func": "var RelayInput = flow.get(\"RelayInput\");\nvar RelayInputIndoor = flow.get(\"RelayInputIndoor\");\nvar RelayOutput = flow.get(\"RelayOutput\");\nvar RelayOutputIndoor = flow.get(\"RelayOutputIndoor\");\nvar RunningTime = secondsToHumanReadable(Math.round((Date.now()-flow.get(\"InitTime\"))/1000));\nfor (let index = 0; index < RelayInputIndoor.length; index++) {\n    if(RelayInputIndoor[index].keterangan == \"StatusIndoor\" && RelayInputIndoor[index].Stat == 1){\n        msg[\"StatusIndoor\"] = true;\n    }else if(RelayInputIndoor[index].keterangan == \"StatusIndoor\" && RelayInputIndoor[index].Stat == 0){\n        msg[\"StatusIndoor\"] = false;\n    }\n    if(RelayInputIndoor[index].keterangan == \"StatusOutdoor\" && RelayInputIndoor[index].Stat == 1){\n        msg[\"StatusOutdoor\"] = true;\n    }else if(RelayInputIndoor[index].keterangan == \"StatusOutdoor\" && RelayInputIndoor[index].Stat == 0){\n        msg[\"StatusOutdoor\"] = false;\n    }\n}\nfor (let index = 0; index < RelayInput.length; index++) {\n    if (RelayInput[index].keterangan == \"BoosterFan\" && RelayInput[index].Stat == 1){\n        msg[\"BoosterFan\"] = true;\n    } else if (RelayInput[index].keterangan == \"BoosterFan\" && RelayInput[index].Stat == 0){\n        msg[\"BoosterFan\"] = false;\n    }\n    if (RelayInput[index].keterangan == \"EF\" && RelayInput[index].Stat == 1){\n        msg[\"EF\"] = true;\n    } else if (RelayInput[index].keterangan == \"EF\" && RelayInput[index].Stat == 0){\n        msg[\"EF\"] = false;\n    }\n}\nmsg.SystemStatus = flow.get(\"SystemStatus\");\nif((msg.StatusIndoor && msg.BoosterFan && msg.EF) || (flow.get(\"SystemStatus\") == \"OFF\" && flow.get(\"cmdauto\") == \"Shutdown\") || (flow.get(\"SystemStatus\") == \"ON\" && flow.get(\"autocmd\") != \"None\")){\n        msg[\"StartLoops\"] = true;\n        msg.payload = \"O-RUN-O(\"+String(RunningTime)+\")\";\n        \n        return msg;\n    }else{  \n        msg[\"StartLoops\"] = false;\n        flow.set(\"cmdauto\",\"None\");\n    }\nmsg.payload = \"-IDLE- (\"+String(RunningTime)+\")\";\n\nreturn msg;\n\nfunction secondsToHumanReadable(seconds) {\n    const units = [\n        { label: 'year', value: 60 * 60 * 24 * 365 },  // Approximate, not accounting for leap years\n        { label: 'month', value: 60 * 60 * 24 * 30 },  // Approximate\n        { label: 'day', value: 60 * 60 * 24 },\n        { label: 'hour', value: 60 * 60 },\n        { label: 'minute', value: 60 },\n        { label: 'second', value: 1 }\n    ];\n\n    const result = [];\n\n    for (const unit of units) {\n        const unitValue = Math.floor(seconds / unit.value);\n        if (unitValue > 0) {\n            result.push(`${unitValue} ${unit.label}${unitValue > 1 ? 's' : ''}`);\n            seconds -= unitValue * unit.value;\n        }\n    }\n\n    return result.length > 0 ? result.join(' ') : '0 seconds';\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 400,
        "wires": [
            [
                "c3126b07ce0f6e04",
                "f61289bca3a9cc09",
                "b0642dd35f178a20",
                "720a2eb23e14d481",
                "e6b00a8042609fdd"
            ]
        ]
    },
    {
        "id": "f61289bca3a9cc09",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "3e1bbc5521a97bc3",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 370,
        "y": 580,
        "wires": []
    },
    {
        "id": "c3126b07ce0f6e04",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "3e1bbc5521a97bc3",
        "name": " ",
        "property": "StartLoops",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 400,
        "wires": [
            [
                "76a42005ec1d44e0",
                "fde80bf7db0ba825"
            ],
            [
                "24d1f829dd5c615c"
            ]
        ]
    },
    {
        "id": "24d1f829dd5c615c",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "3e1bbc5521a97bc3",
        "name": " ",
        "func": "msg.reset = true;\nflow.set(\"StartLoops\",false);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 400,
        "wires": [
            [
                "5d5d69fe9e9d1314"
            ]
        ]
    },
    {
        "id": "5d5d69fe9e9d1314",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "3e1bbc5521a97bc3",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "580830bd221147e6"
        ],
        "x": 585,
        "y": 400,
        "wires": []
    },
    {
        "id": "580830bd221147e6",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "3e1bbc5521a97bc3",
        "name": "link in 4",
        "links": [
            "5d5d69fe9e9d1314"
        ],
        "x": 405,
        "y": 360,
        "wires": [
            [
                "76a42005ec1d44e0"
            ]
        ]
    },
    {
        "id": "641b6a6c960d32fb",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": " ",
        "func": "msg.cmd = flow.get(\"cmdauto\");\nvar BatasAtasRH = 58;\nvar BatasBawahRH = 52;\nvar RelayInput = flow.get(\"RelayInput\");\nvar RelayOutput = flow.get(\"RelayOutput\");\nvar RelayInputIndoor = flow.get(\"RelayInputIndoor\");\nvar RelayOutputIndoor = flow.get(\"RelayOutputIndoor\");\nfor (let index = 0; index < RelayInputIndoor.length; index++) {\n    if(RelayInputIndoor[index].keterangan == \"StatusIndoor\" && RelayInputIndoor[index].Stat == 1){\n        msg[\"StatusIndoor\"] = true;\n    }else if(RelayInputIndoor[index].keterangan == \"StatusIndoor\" && RelayInputIndoor[index].Stat == 0){\n        msg[\"StatusIndoor\"] = false;\n    }\n    if(RelayInputIndoor[index].keterangan == \"StatusOutdoor\" && RelayInputIndoor[index].Stat == 1){\n        msg[\"StatusOutdoor\"] = true;\n    }else if(RelayInputIndoor[index].keterangan == \"StatusOutdoor\" && RelayInputIndoor[index].Stat == 0){\n        msg[\"StatusOutdoor\"] = false;\n    }\n}\n//----------------------------------------------------\n// Definisikan parameter PID\nvar Kp = 0.5; // Gain proporsional\nvar Ki = 0.2; // Gain integral\nvar Kd = 0.1; // Gain derivatif\nvar SetPoint = flow.get(\"SetValueRH\");\n\nvar errorPrev = 0;\nvar integral = 0;\n//----------------------------------------------------\n// console.log(msg.cmd);\nif(msg.cmd == \"Init\" || msg.cmd == \"None\"){\n    msg.cmd = \"MonitorTemp\";\n    flow.set(\"cmdauto\",msg.cmd);\n}else if(msg.cmd == \"MonitorTemp\"){\n    if(flow.get(\"CMPCOMP\")==false){\n        flow.set(\"AutoRequest\",true);\n    }\n    \n    if ((Date.now() - flow.get(\"Temp_Cathlab\")[1]) / 1000 < 60 && (Date.now() - flow.get(\"RH_Cathlab\")[1])/1000< 60){\n        var RH_Cathlab = flow.get(\"RH_Cathlab\")[0];\n        console.log(\"RH_Cathlab : \"+String(RH_Cathlab)+\", Setpoint : \"+String(SetPoint));        \n        if (RH_Cathlab >= (SetPoint+2)) {\n            console.log(\"MASUK\");\n            // var dur = kontrolPID(SetPoint,RH_Cathlab)*(-1)*60*1000;\n            \n            msg.cmd = \"OnEH\"+\" =[EH1]\";\n            flow.set(\"AutoRequest\",false);\n            \n        }\n    }\n}else if(msg.cmd == \"OnEH\"+\" =[EH1]\"){\n    if(!msg.StatusOutdoor){\n        flow.set(\"AutoRequest\",true);\n    }else{\n        flow.set(\"AutoRequest\",false);\n    }\n    for (let index = 0; index < RelayOutput.length; index++) {\n        if(RelayOutput[index].keterangan == \"EH1\" && RelayOutput[index].Stat == 1){\n            var dur = 60*60*4*1000*2;\n            if(dur<0){\n                return msg;\n            }\n            flow.set(\"DurationEH\",[Math.round(dur),Date.now()]);\n            console.log(String(dur));\n            msg.cmd = \"Waiting\";\n            msg.delay = flow.get(\"DurationEH\")[0];\n        }\n    }\n} else if (msg.cmd == \"Waiting Force Done\"){\n    msg.cmd = \"OffEH\";\n    flow.set(\"AutoRequest\",false);\n    offEH();\n} else if(msg.cmd.substring(0,7) == \"Waiting\"){\n    var timeRemaining = Math.round(((flow.get(\"DurationEH\")[0]+flow.get(\"DurationEH\")[1])-Date.now())/1000);\n    msg.cmd = \"Waiting = \"+String(epochtostr(timeRemaining));\n    var RH_Cathlab = flow.get(\"RH_Cathlab\")[0];\n    console.log(\"RH_Cathlab : \"+String(RH_Cathlab)+\", SetPoint : \"+String(SetPoint));\n    if (RH_Cathlab < (SetPoint-5)){\n        msg.cmd = \"Waiting Force Done\";\n        msg.reset = true;\n        flow.set(\"AutoRequest\",false);\n    }\n    console.log(\"Timeremaining : \"+String(timeRemaining));\n    console.log(\"DurationEH : \"+String((Math.round((flow.get(\"DurationEH\")[0])/1000)/2)));\n    if(timeRemaining <= (Math.round((flow.get(\"DurationEH\")[0])/1000)/2)){\n        for (let index = 0; index < RelayOutput.length; index++) {\n            if(RelayOutput[index].keterangan == \"EH2\" && RelayOutput[index].Stat == 0){\n                msg.cmd += \" =[EH2]\";\n                if(!msg.StatusOutdoor){\n                    flow.set(\"AutoRequest\",true);\n                }else{\n                    flow.set(\"AutoRequest\",false);\n                }\n                msg.EH2 = false;\n            }else if(RelayOutput[index].keterangan == \"EH2\" && RelayOutput[index].Stat == 1){\n                msg.EH2 = true;\n                if(flow.get(\"CMDCOMP\") == false){\n                    flow.set(\"AutoRequest\",true);\n                }\n            }else{\n                msg.EH2 = undefined;\n            }\n        }\n    }else{\n        if(flow.get(\"CMDCOMP\")==false){\n            flow.set(\"AutoRequest\",true);\n        }\n    }\n} else if(msg.cmd == \"Timeout\"){\n    msg.cmd = \"OffEH\";\n    flow.set(\"AutoRequest\",false);\n    offEH();\n    \n} else if(msg.cmd == \"OffEH\"){\n    msg.cmd = \"OffEH\";\n    flow.set(\"AutoRequest\",false);\n    offEH();\n    \n}else if(msg.cmd == \"Waiting Force Done\"){\n    msg.cmd = \"OffEH\";\n    flow.set(\"AutoRequest\",false);\n    offEH();\n}else if(msg.cmd == \"Shutdown\"){\n    flow.set(\"AutoRequest\",false);\n}\nvar RH_Cathlab = flow.get(\"RH_Cathlab\")[0];\nif (RH_Cathlab > (SetPoint+5)){\n    flow.set(\"bypassEH\",true);\n}else{\n    flow.set(\"bypassEH\",false);\n}\nmsg.bypass = flow.get(\"bypassEH\");\nflow.set(\"cmdauto\", msg.cmd);\nreturn msg;\n\nfunction offEH(){\n    msg.statusEH1 = false;\n    msg.statusEH2 = false;\n    for (let index = 0; index < RelayOutput.length; index++) {\n        if(RelayOutput[index].keterangan == \"EH1\" && RelayOutput[index].Stat == 0){\n            msg.statusEH1 = true;\n        }else if(RelayOutput[index].keterangan == \"EH2\" && RelayOutput[index].Stat == 0){\n            msg.statusEH2 = true;\n        }\n    }\n    if(msg.statusEH1&&msg.statusEH2){\n        msg.cmd = \"MonitorTemp\";\n    }\n}\nfunction kontrolPID(nilaiTarget, nilaiSekarang) {\n    // Hitung error saat ini\n    const error = nilaiTarget - nilaiSekarang;\n\n    // Hitung komponen PID\n    const proporsional = Kp * error;\n    integral += error;\n    const integralComp = Ki * integral;\n    const derivative = Kd * (error - errorPrev);\n\n    // Hitung output PID\n    const output = proporsional + integralComp + derivative;\n\n    // Simpan error saat ini untuk penggunaan di iterasi selanjutnya\n    errorPrev = error;\n\n    return output;\n}\nfunction epochtostr(seconds) {\n    const units = [\n        { label: 'year', value: 60 * 60 * 24 * 365 },  // Approximate, not accounting for leap years\n        { label: 'month', value: 60 * 60 * 24 * 30 },  // Approximate\n        { label: 'day', value: 60 * 60 * 24 },\n        { label: 'hour', value: 60 * 60 },\n        { label: 'minute', value: 60 },\n        { label: 'second', value: 1 }\n    ];\n\n    const result = [];\n\n    for (const unit of units) {\n        const unitValue = Math.floor(seconds / unit.value);\n        if (unitValue > 0) {\n            result.push(`${unitValue} ${unit.label}${unitValue > 1 ? 's' : ''}`);\n            seconds -= unitValue * unit.value;\n        }\n    }\n\n    return result.length > 0 ? result.join(' ') : '0 seconds';\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 760,
        "wires": [
            [
                "2b3bb57567ea52c9",
                "5222a1da0995d60e"
            ]
        ]
    },
    {
        "id": "4ee8f65958ac44b3",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": "link in 6",
        "links": [
            "4846cf8ccfaa5294"
        ],
        "x": 105,
        "y": 760,
        "wires": [
            [
                "641b6a6c960d32fb"
            ]
        ]
    },
    {
        "id": "2b3bb57567ea52c9",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "ec25e59bf9e2251e",
            "ac0fbd136d3ce001",
            "0db22b2c09d13099",
            "5b191cbaad339f8b"
        ],
        "x": 315,
        "y": 820,
        "wires": []
    },
    {
        "id": "4ff5e6219affac79",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": "link in 7",
        "links": [
            "e89ef9fda4e36f2f"
        ],
        "x": 85,
        "y": 680,
        "wires": [
            [
                "02c11ce421cf2535"
            ]
        ]
    },
    {
        "id": "4846cf8ccfaa5294",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "4ee8f65958ac44b3"
        ],
        "x": 545,
        "y": 680,
        "wires": []
    },
    {
        "id": "c004c44e4c4901db",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 350,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "f6082a19c32ff758",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "85b0e53311997526",
        "name": "Request Temp",
        "func": "msg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'Temp/RH,CathLab';\";\nflow.set(\"AutoRequest\",true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "5222a1da0995d60e",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": " ",
        "property": "cmd",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "MonitorTemp",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "=[EH",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "Waiting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OffEH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Shutdown",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 350,
        "y": 760,
        "wires": [
            [
                "44817b8b19ec98a2"
            ],
            [
                "e36c8c2dbdeb7096"
            ],
            [
                "d7faeee2d46758c1"
            ],
            [
                "eb3b49d6532d6f1e"
            ],
            [
                "fdd25df70c9b832d"
            ]
        ]
    },
    {
        "id": "da3a87c71b441873",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "85b0e53311997526",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "20",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 890,
        "y": 580,
        "wires": [
            [
                "f6082a19c32ff758"
            ]
        ]
    },
    {
        "id": "42bf36832cc825d1",
        "type": "mysql",
        "z": "c2b14f037c10d200",
        "g": "85b0e53311997526",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1190,
        "y": 580,
        "wires": [
            [
                "c0232418d789ac45"
            ]
        ]
    },
    {
        "id": "c0232418d789ac45",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "85b0e53311997526",
        "name": "Requesting",
        "func": "var d = msg.payload[0];\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"00\";\ncmd += \"00000000\";\nmsg.payload = cmd;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 580,
        "wires": [
            [
                "3464b1ef425376bc"
            ]
        ]
    },
    {
        "id": "8260daa0f250cb66",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "fd32b8c570f4f067",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "8e6578be80dac79f"
        ],
        "x": 1535,
        "y": 720,
        "wires": []
    },
    {
        "id": "fde80bf7db0ba825",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "3e1bbc5521a97bc3",
        "name": " ",
        "func": "\nflow.set(\"StartLoops\",true);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "720a2eb23e14d481",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "3e1bbc5521a97bc3",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "948b1da681d91e63",
            "5c831f117bbb1353",
            "ca0e89d63a8d5222",
            "ace987c65b980c03",
            "47c3cf9a26329769",
            "f4449cd73b42ab58",
            "0317097ca382ce3a"
        ],
        "x": 335,
        "y": 360,
        "wires": []
    },
    {
        "id": "948b1da681d91e63",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "1ff222ca68a9422e",
        "name": "link in 8",
        "links": [
            "720a2eb23e14d481"
        ],
        "x": 1205,
        "y": 1500,
        "wires": [
            [
                "9095c3f9044eb005",
                "8e5b5b9760242ccc"
            ]
        ]
    },
    {
        "id": "9095c3f9044eb005",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "1ff222ca68a9422e",
        "name": " ",
        "func": "var d = [];\nd.push(flow.get(\"Temp_Cathlab\"));\nd.push(flow.get(\"RH_Cathlab\"));\nd.push(flow.get(\"Temp_Machine\"));\nd.push(flow.get(\"RH_Machine\"));\nd.push(flow.get(\"Pre_Filter\"));\nd.push(flow.get(\"HEPA_Filter\"));\nd.push(flow.get(\"DurationEH\"));\nd.push(flow.get(\"RelayInput\"));\nd.push(flow.get(\"RelayOutput\"));\nmsg.payload = d;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1500,
        "wires": [
            [
                "07065b67ad884ae6",
                "4101f291432901a2",
                "69901e2fc897670c",
                "4e6e52339441d2f6",
                "d74c6b4ec6ae653c",
                "37bb0d5ef977d3a8",
                "a76c8c48c30ffb88",
                "f80279474d6631fe"
            ]
        ]
    },
    {
        "id": "4101f291432901a2",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "1ff222ca68a9422e",
        "name": " TempCathLab",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[0]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1500,
        "y": 1380,
        "wires": []
    },
    {
        "id": "69901e2fc897670c",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "1ff222ca68a9422e",
        "name": "RHCathLab",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[1]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1490,
        "y": 1440,
        "wires": []
    },
    {
        "id": "4e6e52339441d2f6",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "1ff222ca68a9422e",
        "name": " TempMachine",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[2]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1500,
        "y": 1500,
        "wires": []
    },
    {
        "id": "d74c6b4ec6ae653c",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "1ff222ca68a9422e",
        "name": "RHMachine",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[3]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1490,
        "y": 1560,
        "wires": []
    },
    {
        "id": "37bb0d5ef977d3a8",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "1ff222ca68a9422e",
        "name": " Pre_Filter",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[4]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1480,
        "y": 1620,
        "wires": []
    },
    {
        "id": "a76c8c48c30ffb88",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "1ff222ca68a9422e",
        "name": " HEPA_Filter",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[5]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1490,
        "y": 1680,
        "wires": []
    },
    {
        "id": "3a6dab11f5be3472",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": " ",
        "property": "loops",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 330,
        "y": 680,
        "wires": [
            [
                "f0bcdcc51c982764"
            ]
        ]
    },
    {
        "id": "2a8267dacfe382fc",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "cmd",
        "targetType": "msg",
        "statusVal": "cmd",
        "statusType": "auto",
        "x": 350,
        "y": 900,
        "wires": []
    },
    {
        "id": "8e5b5b9760242ccc",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "1ff222ca68a9422e",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1290,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "f87688c1c038714f",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "fd32b8c570f4f067",
        "name": "Turn On EH",
        "func": "msg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'RelayOutput';\";\nmsg.topic += \"SELECT * FROM `Output` WHERE `keterangan` = 'EH1' OR `keterangan` = 'EH2';\";\nmsg.topic += \"SELECT * FROM `Operation`;\";\nmsg.source = \"ONEH\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 740,
        "wires": [
            [
                "7d22410dcf8b466d"
            ]
        ]
    },
    {
        "id": "7d22410dcf8b466d",
        "type": "mysql",
        "z": "c2b14f037c10d200",
        "g": "fd32b8c570f4f067",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1190,
        "y": 740,
        "wires": [
            [
                "67420b215fc83091"
            ]
        ]
    },
    {
        "id": "67420b215fc83091",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "fd32b8c570f4f067",
        "name": " On1",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length - 2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.payload[2][0].Output));\nconsole.log(binarycurrent);\nvar spt = binarycurrent.split(\"\");\nif (binarycurrent[msg.payload[1][0].Number - 1] == \"0\" && msg.cmd.includes(\"=[EH1]\")) {\n    \n    spt[msg.payload[1][0].Number - 1] = \"1\";\n    binarycurrent = spt.join(\"\");\n    if(flow.get(\"RelayOutput\")[msg.payload[1][0].Number].Stat == 0){\n        msg.statusEH1 = true;\n        \n    }else{\n        msg.statusEH1 = false;\n    }\n    \n    msg.payload[2][0][\"Output\"] = parseInt(String(msg.payload[2][0].Output)) + parseInt(String(msg.payload[1][0].Dec));\n    \n}\nif (binarycurrent[msg.payload[1][1].Number - 1] == \"0\" && msg.cmd.includes(\"=[EH2]\")){\n    msg.statusEH2 = true;\n}\n\nmsg.numberOutput = msg.payload[2][0].Output;\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\" + \"000\" + \"D\" ;//String(dec2hex(hex));\nmsg.payload = cmd;\nif(!msg.StatusOutdoor){\n    msg.statusEH1 = false;\n    msg.statusEH2 = false;\n}\nmsg.dari = \"On1\";\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 740,
        "wires": [
            [
                "7791d165ca135a8b",
                "fdc908e1fd137ca7"
            ]
        ]
    },
    {
        "id": "948427bbfb369866",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "bf3d2e8d116c4d15",
        "name": "Request Temp",
        "func": "msg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'Temp/RH,CathLab';\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "9cab611b52d07826",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "bf3d2e8d116c4d15",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "9d6c2a766f43f125"
        ],
        "x": 415,
        "y": 1040,
        "wires": []
    },
    {
        "id": "ca5cfc22375d4caf",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "bf3d2e8d116c4d15",
        "name": "Reset",
        "func": "msg.reset = true;\nmsg.cmd = \"Timeout\";\nflow.set(\"cmdauto\",msg.cmd);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1040,
        "wires": [
            [
                "9cab611b52d07826"
            ]
        ]
    },
    {
        "id": "9d6c2a766f43f125",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "bf3d2e8d116c4d15",
        "name": "link in 9",
        "links": [
            "9cab611b52d07826"
        ],
        "x": 75,
        "y": 1000,
        "wires": [
            [
                "30db0c1253a6c5eb"
            ]
        ]
    },
    {
        "id": "f80279474d6631fe",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "1ff222ca68a9422e",
        "name": "DurationEH",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[6]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1490,
        "y": 1740,
        "wires": []
    },
    {
        "id": "65c323a838ebe320",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "5a44f529fddeb430",
        "name": "Receive",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 180,
        "y": 120,
        "wires": []
    },
    {
        "id": "1623846a303c7921",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "299adb79ab36320e",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "15",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 910,
        "y": 900,
        "wires": [
            [
                "4d3d602d80f0a2a8"
            ]
        ]
    },
    {
        "id": "4d3d602d80f0a2a8",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "299adb79ab36320e",
        "name": "Turn Off EH",
        "func": "msg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'RelayOutput';\";\nmsg.topic += \"SELECT * FROM `Output` WHERE `keterangan` = 'EH1' OR `keterangan` = 'EH2';\";\nmsg.topic += \"SELECT * FROM `Operation`;\";\nmsg.source = \"OFFEH\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 900,
        "wires": [
            [
                "c44b976047efb439"
            ]
        ]
    },
    {
        "id": "c44b976047efb439",
        "type": "mysql",
        "z": "c2b14f037c10d200",
        "g": "299adb79ab36320e",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1210,
        "y": 900,
        "wires": [
            [
                "e96c3226eb182318"
            ]
        ]
    },
    {
        "id": "e96c3226eb182318",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "299adb79ab36320e",
        "name": " Off1",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\nvar binarycurrent = reverseString(decToBinary(msg.payload[2][0].Output));\nvar spt = binarycurrent.split(\"\");\nif(binarycurrent[msg.payload[1][0].Number-1] == \"1\"){\n    spt[msg.payload[1][0].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if(flow.get(\"RelayOutput\")[msg.payload[1][0].Number].Stat == 1){\n        msg.statusEH1 = true;\n    }else{\n        msg.statusEH1 = false;\n    }\n    msg.payload[2][0][\"Output\"] = parseInt(String(msg.payload[2][0].Output)) -  parseInt(String(msg.payload[1][0].Dec));\n}\nif(binarycurrent[msg.payload[1][1].Number-1] == \"1\"){\n    msg.statusEH2 = true;\n}\nmsg.numberOutput = msg.payload[2][0].Output;\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+String(dec2hex(hex));\nmsg.payload = cmd;\nmsg.dari = \"OFF1\";\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 900,
        "wires": [
            [
                "8da162340b56f4e3",
                "d0dfcd36279bdebe"
            ]
        ]
    },
    {
        "id": "7791d165ca135a8b",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "fd32b8c570f4f067",
        "name": " ",
        "property": "statusEH1",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1440,
        "y": 720,
        "wires": [
            [
                "8260daa0f250cb66",
                "bf649ddcd46ee371"
            ]
        ]
    },
    {
        "id": "8da162340b56f4e3",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "299adb79ab36320e",
        "name": " ",
        "property": "statusEH1",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1450,
        "y": 880,
        "wires": [
            [
                "6b34a359d46da224"
            ]
        ]
    },
    {
        "id": "d0dfcd36279bdebe",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "299adb79ab36320e",
        "name": " ",
        "property": "statusEH2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1450,
        "y": 920,
        "wires": [
            [
                "a056a8f1bc64bcc6"
            ]
        ]
    },
    {
        "id": "f77dfaa403319422",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "299adb79ab36320e",
        "name": " Off2",
        "func": "msg.payload = msg.resultsql;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\nvar binarycurrent = reverseString(decToBinary(msg.numberOutput));\nvar spt = binarycurrent.split(\"\");\nif (binarycurrent[msg.payload[1][1].Number -1] == \"1\"){\n    \n    spt[msg.payload[1][1].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if (flow.get(\"RelayOutput\")[msg.payload[1][1].Number].Stat == 1){\n        msg.statusEH2 = true;\n    }else{\n        msg.statusEH2 = false;\n    }\n   msg[\"numberOutput\"] = parseInt(String(msg.numberOutput)) -  parseInt(String(msg.payload[1][1].Dec));\n}\n\n\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+String(dec2hex(hex));\nmsg.payload = cmd;\nmsg.dari = \"off2\";\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 920,
        "wires": [
            [
                "eb9bfa8b64a2196c"
            ]
        ]
    },
    {
        "id": "a056a8f1bc64bcc6",
        "type": "delay",
        "z": "c2b14f037c10d200",
        "g": "299adb79ab36320e",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1600,
        "y": 920,
        "wires": [
            [
                "f77dfaa403319422"
            ]
        ]
    },
    {
        "id": "630a78d178f25e61",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "299adb79ab36320e",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "8e6578be80dac79f"
        ],
        "x": 1935,
        "y": 920,
        "wires": []
    },
    {
        "id": "3464b1ef425376bc",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "85b0e53311997526",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "8e6578be80dac79f"
        ],
        "x": 1435,
        "y": 580,
        "wires": []
    },
    {
        "id": "6b34a359d46da224",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "299adb79ab36320e",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "8e6578be80dac79f"
        ],
        "x": 1555,
        "y": 880,
        "wires": []
    },
    {
        "id": "144d6bd39c5027fc",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "c0d6ddff15243433",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 930,
        "y": 120,
        "wires": []
    },
    {
        "id": "eb9bfa8b64a2196c",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "299adb79ab36320e",
        "name": " ",
        "property": "statusEH2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1850,
        "y": 920,
        "wires": [
            [
                "630a78d178f25e61"
            ]
        ]
    },
    {
        "id": "fdc908e1fd137ca7",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "fd32b8c570f4f067",
        "name": " ",
        "property": "statusEH2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1440,
        "y": 760,
        "wires": [
            [
                "50bb8949864c85e7"
            ]
        ]
    },
    {
        "id": "50bb8949864c85e7",
        "type": "delay",
        "z": "c2b14f037c10d200",
        "g": "fd32b8c570f4f067",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1580,
        "y": 760,
        "wires": [
            [
                "b2765fa2f6a0d3a7"
            ]
        ]
    },
    {
        "id": "b2765fa2f6a0d3a7",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "fd32b8c570f4f067",
        "name": "On2",
        "func": "msg.payload = msg.resultsql;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.numberOutput));\nvar spt = binarycurrent.split(\"\");\nif(binarycurrent[msg.payload[1][1].Number-1] == \"0\"){\n    \n    spt[msg.payload[1][1].Number - 1] = \"1\";\n    binarycurrent = spt.join(\"\");\n    if (flow.get(\"RelayOutput\")[msg.payload[1][1].Number].Stat == 0){\n        msg.statusEH2 = true;\n    }else{\n        msg.statusEH2 = false;\n    }\n   msg[\"numberOutput\"] = parseInt(String(msg.numberOutput)) +  parseInt(String(msg.payload[1][1].Dec));\n}\n\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+ \"E\";//String(dec2hex(hex));\nmsg.payload = cmd;\nmsg.dari = \"On2\";\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 760,
        "wires": [
            [
                "46f0a4bb6a418b2f"
            ]
        ]
    },
    {
        "id": "46f0a4bb6a418b2f",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "fd32b8c570f4f067",
        "name": " ",
        "property": "statusEH2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1830,
        "y": 760,
        "wires": [
            [
                "9328b4f4e1fd8df9",
                "bf649ddcd46ee371"
            ]
        ]
    },
    {
        "id": "9328b4f4e1fd8df9",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "fd32b8c570f4f067",
        "name": "link out 16",
        "mode": "link",
        "links": [
            "8e6578be80dac79f"
        ],
        "x": 1915,
        "y": 760,
        "wires": []
    },
    {
        "id": "901e03b239d822ca",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "5a44f529fddeb430",
        "name": "CMD",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 670,
        "y": 120,
        "wires": []
    },
    {
        "id": "07065b67ad884ae6",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "1ff222ca68a9422e",
        "name": "link out 19",
        "mode": "link",
        "links": [
            "088521a1144ef9ca",
            "49c374e45f100f88"
        ],
        "x": 1435,
        "y": 1340,
        "wires": []
    },
    {
        "id": "088521a1144ef9ca",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "5e65a9282e670b9b",
        "name": "link in 10",
        "links": [
            "07065b67ad884ae6"
        ],
        "x": 1685,
        "y": 1400,
        "wires": [
            [
                "c8bc0274886eaa29",
                "30cd88139d807361",
                "6f1870f7c21d313b",
                "0971199f365c0710"
            ]
        ]
    },
    {
        "id": "c8bc0274886eaa29",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "5e65a9282e670b9b",
        "name": "EH1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[8][1].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1790,
        "y": 1340,
        "wires": []
    },
    {
        "id": "30cd88139d807361",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "5e65a9282e670b9b",
        "name": "EH2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[8][2].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1790,
        "y": 1380,
        "wires": []
    },
    {
        "id": "9e51a9d60f1ac8aa",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "bf3d2e8d116c4d15",
        "name": "Waiting",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "str",
        "duration": "1",
        "extend": false,
        "overrideDelay": true,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 180,
        "y": 1040,
        "wires": [
            [
                "ca5cfc22375d4caf"
            ]
        ]
    },
    {
        "id": "0783e9b585efe7a5",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "g": "fb200851d136f94e",
        "name": " ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 870,
        "y": 1340,
        "wires": [
            [
                "8697850ca6261f08"
            ]
        ]
    },
    {
        "id": "0a60de78aad0fda0",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "fb200851d136f94e",
        "name": "2 Bit",
        "func": "var arr = [];\narr.push(\"04030100000000\"); // 0000 0000\narr.push(\"04030100000002\"); // 0100 0000\narr.push(\"0403010000000A\"); // 0101 0000\narr.push(\"0403010000002A\"); // 0101 0100\narr.push(\"040301000000AA\"); // 0101 0101\narr.push(\"040301000000A8\"); // 0001 0101\narr.push(\"040301000000A0\"); // 0000 0101\narr.push(\"04030100000080\"); // 0000 0001\narr.push(\"04030100000000\"); // 0000 0000\nmsg.payload = arr;\nmsg[\"delay\"] = 10000;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1420,
        "wires": [
            [
                "80086e68a94a3989"
            ]
        ]
    },
    {
        "id": "13ea9c3e20ded888",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "fb200851d136f94e",
        "name": "1 Bit",
        "func": "var arr = [];\narr.push(\"04020100000000\"); // 0000 \narr.push(\"04020100000001\"); // 1000 \narr.push(\"04020100000003\"); // 1100 \narr.push(\"04020100000007\"); // 1110 \narr.push(\"0402010000000F\"); // 1111 \narr.push(\"04020100000007\"); // 0111 \narr.push(\"04020100000003\"); // 0011 \narr.push(\"04020100000001\"); // 0001 \narr.push(\"04020100000000\"); // 0000 \nmsg.payload = arr;\nmsg[\"delay\"] = 10000;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1460,
        "wires": [
            [
                "80086e68a94a3989"
            ]
        ]
    },
    {
        "id": "11e747a9724732c0",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "g": "fb200851d136f94e",
        "name": " ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 870,
        "y": 1380,
        "wires": [
            [
                "3dbec1e062436247"
            ]
        ]
    },
    {
        "id": "6f1870f7c21d313b",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "5e65a9282e670b9b",
        "name": "Booster",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[8][3].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1800,
        "y": 1420,
        "wires": []
    },
    {
        "id": "0971199f365c0710",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "5e65a9282e670b9b",
        "name": "EF",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[8][4].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1790,
        "y": 1460,
        "wires": []
    },
    {
        "id": "49c374e45f100f88",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "2ffe000a9c466eb7",
        "name": "link in 11",
        "links": [
            "07065b67ad884ae6"
        ],
        "x": 1965,
        "y": 1400,
        "wires": [
            [
                "cfe514c0c2dd300e",
                "756b2ee4b00af603",
                "47081bf888b7252e",
                "397bb5ccaab7921c"
            ]
        ]
    },
    {
        "id": "cfe514c0c2dd300e",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "2ffe000a9c466eb7",
        "name": "EH1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[7][4].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2070,
        "y": 1340,
        "wires": []
    },
    {
        "id": "756b2ee4b00af603",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "2ffe000a9c466eb7",
        "name": "EH2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[7][5].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2070,
        "y": 1380,
        "wires": []
    },
    {
        "id": "47081bf888b7252e",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "2ffe000a9c466eb7",
        "name": "Booster",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[7][6].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2080,
        "y": 1420,
        "wires": []
    },
    {
        "id": "397bb5ccaab7921c",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "2ffe000a9c466eb7",
        "name": "EF",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[7][8].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2070,
        "y": 1460,
        "wires": []
    },
    {
        "id": "80086e68a94a3989",
        "type": "subflow:e9b71a55.b25c68",
        "z": "c2b14f037c10d200",
        "g": "fb200851d136f94e",
        "name": "",
        "x": 1010,
        "y": 1440,
        "wires": [
            [
                "fcd1216bd233ec0a"
            ],
            []
        ]
    },
    {
        "id": "053b220371ea69a4",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "g": "3e1bbc5521a97bc3",
        "name": " ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 440,
        "wires": [
            [
                "2e980fb95a48d7cb"
            ]
        ]
    },
    {
        "id": "75cf64c6ae651fc6",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "962feb2f867d692e",
        "name": "link in 12",
        "links": [
            "134b2b40b5b3faa3"
        ],
        "x": 1285,
        "y": 240,
        "wires": [
            [
                "6f1dce19c50c0b4c"
            ]
        ]
    },
    {
        "id": "6f1dce19c50c0b4c",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "962feb2f867d692e",
        "name": " ",
        "property": "payload.value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1370,
        "y": 240,
        "wires": [
            [
                "3b3e84fc042bf1d0"
            ],
            [
                "55287fdab8d5fab9"
            ]
        ]
    },
    {
        "id": "55287fdab8d5fab9",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "962feb2f867d692e",
        "name": " ",
        "func": "msg[\"Val\"] = msg.payload;\nmsg.topic = \"SELECT `AutoManual` FROM `information`;\";\n// var RelayInputIndoor = flow.get(\"RelayInputIndoor\");\n// for (let index = 0; index < RelayInputIndoor.length; index++) {\n//     if(RelayInputIndoor[index].keterangan == \"StatusIndoor\"){\n//         RelayInputIndoor[index][\"Stat\"] = msg.payload.value;\n//     }\n// }\n// flow.set(\"RelayInputIndoor\",RelayInputIndoor);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 260,
        "wires": [
            [
                "94a9237c19093423"
            ]
        ]
    },
    {
        "id": "3e239606359acffe",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "962feb2f867d692e",
        "name": "debug 63",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1880,
        "y": 260,
        "wires": []
    },
    {
        "id": "d2f2ed48a84d2f22",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "g": "d14909219f57c9f8",
        "name": "  ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "UPDATE `Input` SET `Stat` = 0;UPDATE `Output` SET `Stat` = 0;UPDATE `InputIndoor` SET `Stat` = 0;UPDATE `OutputIndoor` SET `Stat` = 0;UPDATE `Operation` SET `Output` = 0, `OutputIndoor` = 0;UPDATE `information` SET `AutoManual` = 0;UPDATE `monitoringdata` SET `Outdoor_Unit` = 0;UPDATE `monitoringdata` SET `AHU_Status` = 0;UPDATE `monitoringdata` SET `Pre_Filter` = 0;UPDATE `monitoringdata` SET `HEPA_Filter` = 0;UPDATE `monitoringdata` SET `Booster_Fan` = 0;UPDATE `monitoringdata` SET `Exhaust_Fan` = 0;UPDATE `monitoringdata` SET `Heater_1` = 0;UPDATE `monitoringdata` SET `Heater_2` = 0;",
        "payload": "",
        "payloadType": "date",
        "x": 1130,
        "y": 80,
        "wires": [
            [
                "bb9d5fd568ca8173"
            ]
        ]
    },
    {
        "id": "b63d1c78a5ec701c",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "d14909219f57c9f8",
        "name": "link out 26",
        "mode": "link",
        "links": [
            "cb7fd766c9f09bfc",
            "ab5a974fd5a66a28"
        ],
        "x": 1375,
        "y": 120,
        "wires": []
    },
    {
        "id": "cefa443834eb32d0",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "d14909219f57c9f8",
        "name": " ",
        "func": "msg.topic = \"select * from monitoringdata;select * from Input Order by Number ASC;select * from Output Order by Number ASC;select * from InputIndoor Order by Number ASC;select * from OutputIndoor Order by Number ASC;\";\n// msg.topic += \"SELECT * FROM `devicelist` WHERE `keterangan` NOT LIKE 'Relay%';\";\nmsg.topic += \"SELECT * FROM `devicelist` WHERE `keterangan` != 'RelayOutput' ORDER BY `networkid` ASC;\";\nmsg.topic += \"SELECT `TempCathlab` FROM `setting`;\";\nmsg.topic += \"SELECT `RHCathlab` FROM `setting`;\";\nmsg.topic += \"DELETE FROM `recorddevice` WHERE `epoch` < \" + String(Date.now()-(604800*1000))+\";\";\nflow.set(\"SystemStatus\",\"OFF\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 80,
        "wires": [
            [
                "6717fbc88e310c5d"
            ]
        ]
    },
    {
        "id": "94a9237c19093423",
        "type": "mysql",
        "z": "c2b14f037c10d200",
        "g": "962feb2f867d692e",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1630,
        "y": 260,
        "wires": [
            [
                "77ba0e484dfe469b"
            ]
        ]
    },
    {
        "id": "77ba0e484dfe469b",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "962feb2f867d692e",
        "name": " ",
        "func": "var AutoManual = msg.payload[0].AutoManual;\nmsg.payload = msg.Val;\nvar RelayInputIndoor = flow.get(\"RelayInputIndoor\");\nvar stats = false;\nfor (let index = 0; index < RelayInputIndoor.length; index++) {\n    if(RelayInputIndoor[index].keterangan == \"StatusIndoor\" && AutoManual){\n        flow.set(\"SystemStatus\",\"ON\");\n        stats = true;\n    }\n}\nmsg.payload = [stats,AutoManual];\nflow.set(\"RelayInputIndoor\",RelayInputIndoor);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 260,
        "wires": [
            [
                "3e239606359acffe"
            ]
        ]
    },
    {
        "id": "3b3e84fc042bf1d0",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "962feb2f867d692e",
        "name": " ",
        "func": "flow.set(\"SystemStatus\",\"OFF\");\nflow.set(\"cmdauto\",\"Shutdown\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "e1c7056de27e4ba5",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": "Request",
        "func": "flow.set(\"AutoRequest\",false);\nvar RelayInput = flow.get(\"RelayInput\");\nvar RelayInputIndoor = flow.get(\"RelayInputIndoor\");\nvar RelayOutput = flow.get(\"RelayOutput\");\nvar RelayOutputIndoor = flow.get(\"RelayOutputIndoor\");\nfor (let index = 0; index < RelayInputIndoor.length; index++) {\n    if(RelayInputIndoor[index].keterangan == \"StatusIndoor\" && RelayInputIndoor[index].Stat == 1){\n        msg[\"StatusIndoor\"] = true;\n    }else if(RelayInputIndoor[index].keterangan == \"StatusIndoor\" && RelayInputIndoor[index].Stat == 0){\n        msg[\"StatusIndoor\"] = false;\n    }\n    if(RelayInputIndoor[index].keterangan == \"StatusOutdoor\" && RelayInputIndoor[index].Stat == 1){\n        msg[\"StatusOutdoor\"] = true;\n    }else if(RelayInputIndoor[index].keterangan == \"StatusOutdoor\" && RelayInputIndoor[index].Stat == 0){\n        msg[\"StatusOutdoor\"] = false;\n    }\n}\nfor (let index = 0; index < RelayInput.length; index++) {\n    if (RelayInput[index].keterangan == \"BoosterFan\" && RelayInput[index].Stat == 1){\n        msg[\"BoosterFan\"] = true;\n    } else if (RelayInput[index].keterangan == \"BoosterFan\" && RelayInput[index].Stat == 0){\n        msg[\"BoosterFan\"] = false;\n    }\n    if (RelayInput[index].keterangan == \"EF\" && RelayInput[index].Stat == 1){\n        msg[\"EF\"] = true;\n    } else if (RelayInput[index].keterangan == \"EF\" && RelayInput[index].Stat == 0){\n        msg[\"EF\"] = false;\n    }\n}\n\nmsg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'RelayOutput' OR `keterangan` = 'RelayIndoor';\";\nmsg.topic += \"SELECT * FROM `Output` WHERE `keterangan` = 'BoosterFan' OR `keterangan` = 'EF' ORDER by `Number` ASC;\";\nmsg.topic += \"SELECT * FROM `OutputIndoor` WHERE `keterangan` = 'Fan' OR `keterangan` = 'Compressor' ORDER by `Number` ASC;\";\nmsg.topic += \"SELECT * FROM `Operation`;\";\nmsg.source = \"Shutdown\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1120,
        "wires": [
            [
                "2962d390a8de5589",
                "b2b2992f323260d9"
            ]
        ]
    },
    {
        "id": "2962d390a8de5589",
        "type": "mysql",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1230,
        "y": 1120,
        "wires": [
            [
                "5772467a6f68a322",
                "ad4e6943e0f0963f",
                "945b815ba3c6ce8a",
                "365830280cf59084",
                "3e2c52e491bdcdd3"
            ]
        ]
    },
    {
        "id": "71ac49d3f9483be6",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": "Off EF",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][1];\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length - 2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.payload[3][0].Output));\nvar spt = binarycurrent.split(\"\");\nif (binarycurrent[msg.payload[1][1].Number - 1] == \"1\") {\n    \n    spt[msg.payload[1][1].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if(flow.get(\"RelayOutput\")[msg.payload[1][1].Number].Stat == 1){\n        msg.statusEF = true;\n    }else{\n        msg.statusEF = false;\n    }\n    msg.payload[3][0][\"Output\"] = 4;\n    \n}\n\nmsg.numberOutput = msg.payload[3][0].Output;\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\" + \"0004\";\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 1040,
        "wires": [
            [
                "eafea3d941ab7961"
            ]
        ]
    },
    {
        "id": "b84d1516a88c30d5",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " ON",
        "property": "BoosterFan",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 1080,
        "wires": [
            [
                "c9a9e16cb51b93ac"
            ]
        ]
    },
    {
        "id": "c9a9e16cb51b93ac",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " ON",
        "property": "StatusIndoor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1630,
        "y": 1080,
        "wires": [
            [
                "fbade8f329b858be"
            ]
        ]
    },
    {
        "id": "fbade8f329b858be",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": "Off Compressor",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length - 2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.payload[3][0].OutputIndoor));\nvar spt = binarycurrent.split(\"\");\nif (binarycurrent[msg.payload[2][1].Number - 1] == \"1\") {\n    \n    spt[msg.payload[2][1].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if(flow.get(\"RelayOutputIndoor\")[msg.payload[2][1].Number].Stat == 1){\n        msg.statusCompressor = true;\n    }else{\n        msg.statusCompressor = false;\n    }\n    msg.payload[3][0][\"OutputIndoor\"] = 1;\n    \n}\n\nmsg.numberOutput = msg.payload[3][0].OutputIndoor;\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\" + \"000\" + String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "33fd4f9bd0736cc5",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " ON",
        "property": "BoosterFan",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 1040,
        "wires": [
            [
                "ba205c43e9025796"
            ]
        ]
    },
    {
        "id": "ba205c43e9025796",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " ON",
        "property": "StatusIndoor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1630,
        "y": 1040,
        "wires": [
            [
                "71ac49d3f9483be6"
            ]
        ]
    },
    {
        "id": "5772467a6f68a322",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " ON",
        "property": "EF",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1390,
        "y": 1040,
        "wires": [
            [
                "33fd4f9bd0736cc5"
            ]
        ]
    },
    {
        "id": "ad4e6943e0f0963f",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " OFF",
        "property": "EF",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1390,
        "y": 1080,
        "wires": [
            [
                "b84d1516a88c30d5"
            ]
        ]
    },
    {
        "id": "945b815ba3c6ce8a",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " OFF",
        "property": "EF",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1390,
        "y": 1120,
        "wires": [
            [
                "6dedaeb58a03a211"
            ]
        ]
    },
    {
        "id": "6dedaeb58a03a211",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " ON",
        "property": "BoosterFan",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 1120,
        "wires": [
            [
                "262d34c3de74b737"
            ]
        ]
    },
    {
        "id": "262d34c3de74b737",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " ON",
        "property": "StatusIndoor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1630,
        "y": 1120,
        "wires": [
            [
                "8c82936c0bcb7176"
            ]
        ]
    },
    {
        "id": "8c82936c0bcb7176",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": "Off FanIndoor",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length - 2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.payload[3][0].OutputIndoor));\nvar spt = binarycurrent.split(\"\");\nif (binarycurrent[msg.payload[2][0].Number - 1] == \"1\") {\n    \n    spt[msg.payload[2][0].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if(flow.get(\"RelayOutputIndoor\")[msg.payload[2][0].Number].Stat == 1){\n        msg.statusFan = true;\n    }else{\n        msg.statusFan = false;\n    }\n    msg.payload[3][0][\"OutputIndoor\"] = 0;\n    \n}\n\nmsg.numberOutput = msg.payload[3][0].OutputIndoor;\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\" + \"0000\";// + String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 1120,
        "wires": [
            [
                "6cf62f8eaa8cba7a"
            ]
        ]
    },
    {
        "id": "365830280cf59084",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " OFF",
        "property": "EF",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1390,
        "y": 1160,
        "wires": [
            [
                "fb7bd7db946e49d6"
            ]
        ]
    },
    {
        "id": "fb7bd7db946e49d6",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " ON",
        "property": "BoosterFan",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 1160,
        "wires": [
            [
                "43df2f5c58d07596"
            ]
        ]
    },
    {
        "id": "43df2f5c58d07596",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " OFF",
        "property": "StatusIndoor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1630,
        "y": 1160,
        "wires": [
            [
                "622acd42ebb8c506"
            ]
        ]
    },
    {
        "id": "622acd42ebb8c506",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": "Off BoosterFan",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][1];\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length - 2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.payload[3][0].Output));\nvar spt = binarycurrent.split(\"\");\nif (binarycurrent[msg.payload[1][0].Number - 1] == \"1\") {\n    \n    spt[msg.payload[1][0].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if(flow.get(\"RelayOutput\")[msg.payload[1][0].Number].Stat == 1){\n        msg.statusBoosterFan = true;\n    }else{\n        msg.statusBoosterFan = false;\n    }\n    msg.payload[3][0][\"Output\"] = 0;\n}\n\nmsg.numberOutput = msg.payload[3][0].Output;\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\" + \"000\" + String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 1160,
        "wires": [
            [
                "aef33e911e2227fa"
            ]
        ]
    },
    {
        "id": "4fbe45428d975524",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1050,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "d9e7033c28b8aaa7",
        "type": "delay",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " ",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 910,
        "y": 1120,
        "wires": [
            [
                "e1c7056de27e4ba5",
                "4fbe45428d975524"
            ]
        ]
    },
    {
        "id": "3e2c52e491bdcdd3",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " OFF",
        "property": "EF",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1390,
        "y": 1200,
        "wires": [
            [
                "d0ca70fce96f8500"
            ]
        ]
    },
    {
        "id": "d0ca70fce96f8500",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " OFF",
        "property": "BoosterFan",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 1200,
        "wires": [
            [
                "06c385e3419de3c6"
            ]
        ]
    },
    {
        "id": "06c385e3419de3c6",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " OFF",
        "property": "StatusIndoor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1630,
        "y": 1200,
        "wires": [
            [
                "ba68cac397c9b5b4"
            ]
        ]
    },
    {
        "id": "ba68cac397c9b5b4",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": "IDLE",
        "func": "flow.set(\"cmdauto\", \"None\");\nflow.set(\"StartLoops\",false);\nmsg.reset = true;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 1200,
        "wires": [
            [
                "a9eb561cd06f22e0"
            ]
        ]
    },
    {
        "id": "a9eb561cd06f22e0",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": "link out 31",
        "mode": "link",
        "links": [
            "acd5dc2f19d30680",
            "b652fe6995001a5c"
        ],
        "x": 1955,
        "y": 1200,
        "wires": []
    },
    {
        "id": "b0642dd35f178a20",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "3e1bbc5521a97bc3",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "SystemStatus",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 370,
        "y": 520,
        "wires": []
    },
    {
        "id": "b96e60662444aac2",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "g": "aa7677c30dfd8e9f",
        "name": "Auto Panel",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04030000FF0000000002",
        "payloadType": "str",
        "x": 460,
        "y": 1180,
        "wires": [
            [
                "5e1398ce641fa0ee"
            ]
        ]
    },
    {
        "id": "faa4eaa457ad7f23",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "aa7677c30dfd8e9f",
        "name": "IncomingData",
        "mode": "link",
        "links": [
            "8f4f65045a651f22",
            "ca69a53d24cb2e29"
        ],
        "x": 715,
        "y": 1360,
        "wires": []
    },
    {
        "id": "0ebbc1963df61b1f",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "g": "aa7677c30dfd8e9f",
        "name": "BoosterFanAktif",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04020000DB0400000002",
        "payloadType": "str",
        "x": 480,
        "y": 1260,
        "wires": [
            [
                "929cb2075483e23b"
            ]
        ]
    },
    {
        "id": "ed15043d463771d2",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "g": "aa7677c30dfd8e9f",
        "name": "FanIndoor Nyala",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "040400000201000003",
        "payloadType": "str",
        "x": 480,
        "y": 1300,
        "wires": [
            [
                "832aafd47d715a56"
            ]
        ]
    },
    {
        "id": "8f4bb144b99fa0ef",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "g": "aa7677c30dfd8e9f",
        "name": "Compressor Nyala",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "040400000003000003",
        "payloadType": "str",
        "x": 490,
        "y": 1340,
        "wires": [
            [
                "776a3ad756551bc5"
            ]
        ]
    },
    {
        "id": "1b706561e54369c3",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "g": "aa7677c30dfd8e9f",
        "name": "Manual Panel",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04030000FE0000000002",
        "payloadType": "str",
        "x": 470,
        "y": 1220,
        "wires": [
            [
                "f23c26b3c4d47807"
            ]
        ]
    },
    {
        "id": "5c3ebd8da9d0e70d",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "g": "aa7677c30dfd8e9f",
        "name": "EF Mati",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04020000DB0400000002",
        "payloadType": "str",
        "x": 450,
        "y": 1420,
        "wires": [
            [
                "0c1727048220b2fa"
            ]
        ]
    },
    {
        "id": "1d8d1dc4f2bfdde9",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "g": "aa7677c30dfd8e9f",
        "name": "BoosterFan Mati",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04020000FF0000000002",
        "payloadType": "str",
        "x": 480,
        "y": 1540,
        "wires": [
            [
                "23bb397dedc6b0ff"
            ]
        ]
    },
    {
        "id": "9f6a8295fa71ab13",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "g": "aa7677c30dfd8e9f",
        "name": "FanIndoor Mati",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "040400000300000003",
        "payloadType": "str",
        "x": 480,
        "y": 1500,
        "wires": [
            [
                "2ef6ed92bfeea2c2"
            ]
        ]
    },
    {
        "id": "30aed9b0d7c4c8ec",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "g": "aa7677c30dfd8e9f",
        "name": "Compressor Mati",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "040400000201000003",
        "payloadType": "str",
        "x": 480,
        "y": 1460,
        "wires": [
            [
                "14d6cf27f0104ae6"
            ]
        ]
    },
    {
        "id": "01544662e58317ab",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "85b0e53311997526",
        "name": "link in 14",
        "links": [
            "44817b8b19ec98a2",
            "db77b0fb0b9de01a"
        ],
        "x": 805,
        "y": 580,
        "wires": [
            [
                "da3a87c71b441873",
                "0cd777724834821f"
            ]
        ]
    },
    {
        "id": "44817b8b19ec98a2",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": "link out 32",
        "mode": "link",
        "links": [
            "01544662e58317ab"
        ],
        "x": 715,
        "y": 680,
        "wires": []
    },
    {
        "id": "e36c8c2dbdeb7096",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": "link out 35",
        "mode": "link",
        "links": [
            "a1651f70dc901a54"
        ],
        "x": 715,
        "y": 720,
        "wires": []
    },
    {
        "id": "a1651f70dc901a54",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "fd32b8c570f4f067",
        "name": "link in 17",
        "links": [
            "e36c8c2dbdeb7096",
            "4de6df107525a91d"
        ],
        "x": 805,
        "y": 740,
        "wires": [
            [
                "4b5976d6e099908f",
                "51cd92b353766fab"
            ]
        ]
    },
    {
        "id": "d7faeee2d46758c1",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": "link out 36",
        "mode": "link",
        "links": [
            "cd4aa74033a2e216"
        ],
        "x": 715,
        "y": 760,
        "wires": []
    },
    {
        "id": "cd4aa74033a2e216",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "bf3d2e8d116c4d15",
        "name": "link in 18",
        "links": [
            "d7faeee2d46758c1",
            "070b79b318a8afd6"
        ],
        "x": 75,
        "y": 1040,
        "wires": [
            [
                "9e51a9d60f1ac8aa",
                "fab829ef17b59219",
                "30db0c1253a6c5eb"
            ]
        ]
    },
    {
        "id": "eb3b49d6532d6f1e",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": "link out 37",
        "mode": "link",
        "links": [
            "9cfb88357a37e4a8"
        ],
        "x": 715,
        "y": 800,
        "wires": []
    },
    {
        "id": "9cfb88357a37e4a8",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "299adb79ab36320e",
        "name": "link in 19",
        "links": [
            "eb3b49d6532d6f1e",
            "12dca0f4de64a244"
        ],
        "x": 805,
        "y": 900,
        "wires": [
            [
                "1623846a303c7921",
                "1911b5c69f579f30"
            ]
        ]
    },
    {
        "id": "fdd25df70c9b832d",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": "link out 38",
        "mode": "link",
        "links": [
            "b652fe6995001a5c"
        ],
        "x": 715,
        "y": 840,
        "wires": []
    },
    {
        "id": "b652fe6995001a5c",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": "link in 20",
        "links": [
            "fdd25df70c9b832d",
            "a9eb561cd06f22e0",
            "df96c2951fc505fc"
        ],
        "x": 805,
        "y": 1120,
        "wires": [
            [
                "d9e7033c28b8aaa7",
                "e8660bb1b256ecf2"
            ]
        ]
    },
    {
        "id": "bb9d5fd568ca8173",
        "type": "delay",
        "z": "c2b14f037c10d200",
        "g": "d14909219f57c9f8",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1270,
        "y": 80,
        "wires": [
            [
                "b63d1c78a5ec701c",
                "cefa443834eb32d0"
            ]
        ]
    },
    {
        "id": "abcfc905d718f1b1",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "5a44f529fddeb430",
        "name": "link in 21",
        "links": [
            "a95fcd0923a92944"
        ],
        "x": 75,
        "y": 120,
        "wires": [
            [
                "65c323a838ebe320"
            ]
        ]
    },
    {
        "id": "0cd777724834821f",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "85b0e53311997526",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 890,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "4b5976d6e099908f",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "fd32b8c570f4f067",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 890,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "fab829ef17b59219",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "bf3d2e8d116c4d15",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 170,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "1911b5c69f579f30",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "299adb79ab36320e",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 910,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "e8660bb1b256ecf2",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 910,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "defa0ce955f83263",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "name": " ",
        "func": "\nmsg.SystemStatus = flow.get(\"SystemStatus\");\nmsg.delay = msg.rate-2000;\nif(flow.get(\"SystemStatus\") != \"ON\" || flow.get(\"StartLoops\")){\n    msg.payload = null;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 420,
        "wires": [
            [
                "dc1bf3307f019874",
                "2a3e5759c334d676"
            ]
        ]
    },
    {
        "id": "dc1bf3307f019874",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "name": " ",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1010,
        "y": 420,
        "wires": [
            [
                "bcc98bd55755b935",
                "2cfc91857ebdd52a"
            ],
            [
                "2ae52f29c7a90688"
            ]
        ]
    },
    {
        "id": "bcc98bd55755b935",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1150,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "5c7ef92968f55b55",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "name": "Turn On Booster",
        "func": "msg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'RelayOutput' OR `keterangan` = 'RelayIndoor';\";\nmsg.topic += \"SELECT * FROM `Output` WHERE `keterangan` = 'BoosterFan' OR `keterangan` = 'EF';\";\nmsg.topic += \"SELECT * FROM `OutputIndoor` WHERE `keterangan` = 'Fan' OR `keterangan` = 'Compressor';\";\nmsg.topic += \"SELECT * FROM `Operation`;\";\nflow.set(\"AutoRequest\",false);\nmsg.source = \"PreLoop\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 420,
        "wires": [
            [
                "a3d0e827e263cfea"
            ]
        ]
    },
    {
        "id": "a3d0e827e263cfea",
        "type": "mysql",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1470,
        "y": 420,
        "wires": [
            [
                "b2997ef19ad42c91"
            ]
        ]
    },
    {
        "id": "b2997ef19ad42c91",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "name": " On1",
        "func": "msg.resultsql = msg.payload;\nmsg.dari = \"preloop\";\nvar binarycurrent = \"\";\nif(!msg.BoosterFan){\n    var d = msg.payload[0][1];\n    var cmd = \"\";\n    msg.statusEH1 = false;\n    msg.statusEH2 = false;\n    for (let index = 0; index < Object.keys(d).length - 2; index++) {\n        cmd += d[Object.keys(d)[index]];\n    }\n    cmd += \"01\";\n    binarycurrent = reverseString(decToBinary(msg.payload[3][0].Output));\n    var spt = binarycurrent.split(\"\");\n    if (spt[msg.payload[1][0].Number - 1] == \"0\" && !msg.BoosterFan && flow.get(\"SystemStatus\") == \"ON\") {\n        \n        spt[msg.payload[1][0].Number - 1] = \"1\";\n        binarycurrent = spt.join(\"\");\n        if(flow.get(\"RelayOutput\")[msg.payload[1][0].Number].Stat == 0){\n            msg.statusBooster = true;\n        }else{\n            msg.statusBooster = false;\n        }\n        msg.payload[3][0][\"Output\"] = parseInt(String(msg.payload[3][0].Output)) + parseInt(String(msg.payload[1][0].Dec));\n    }\n    spt = binarycurrent.split(\"\");\n    \n    if (spt[msg.payload[1][1].Number - 1] == \"0\" && !msg.EF && msg.StatusIndoor && msg.BoosterFan && msg.StatusOutdoor){\n        msg.statusEF = true;\n    }\n    msg.numberOutput = msg.payload[3][0].Output;\n    var hex = binaryToHex(reverseString(binarycurrent));\n    cmd += \"0000\" + \"000\" + String(dec2hex(hex));\n    msg.payload = cmd;\n    return msg;\n} else {\n    var d = msg.payload[0][0];\n    var cmd = \"\";\n    \n    for (let index = 0; index < Object.keys(d).length - 2; index++) {\n        cmd += d[Object.keys(d)[index]];\n    }\n    cmd += \"01\";\n    \n    binarycurrent = reverseString(decToBinary(msg.payload[3][0].OutputIndoor));\n    var spt = binarycurrent.split(\"\");\n    if (spt[msg.payload[2][0].Number - 1] == \"0\" && msg.BoosterFan) {\n        console.log(binarycurrent);\n        spt[msg.payload[2][0].Number - 1] = \"1\";\n        binarycurrent = spt.join(\"\");\n        console.log(binarycurrent);\n        if(flow.get(\"RelayOutputIndoor\")[msg.payload[1][0].Number].Stat == 0){\n            msg.statusFan = true;\n        }else{\n            msg.statusFan = false;\n        }\n        \n        msg.payload[3][0][\"OutputIndoor\"] = parseInt(String(msg.payload[3][0].OutputIndoor)) + parseInt(String(msg.payload[2][0].Dec));\n    }\n    if (binarycurrent[msg.payload[2][1].Number - 1] == \"0\" && !msg.statusFan && !msg.StatusOutdoor){\n        msg.statusCompressor = true;\n    }else{\n        msg.statusCompressor = false;\n    }\n    msg.numberOutputIndoor = msg.payload[3][0].OutputIndoor;\n    var hex = binaryToHex(reverseString(binarycurrent));\n    cmd += \"0000\" + \"000\" + String(dec2hex(hex));\n    msg.payload = cmd;\n}\nif (!msg.EF && msg.StatusIndoor && msg.BoosterFan && msg.StatusOutdoor){\n    msg.payload = msg.resultsql;\n    var d = msg.payload[0][1];\n    var cmd = \"\";\n    for (let index = 0; index < Object.keys(d).length - 2; index++) {\n        cmd += d[Object.keys(d)[index]];\n    }\n    cmd += \"01\";\n    console.log(msg.payload[3][0].Output);\n    binarycurrent = reverseString(decToBinary(parseInt(String(msg.payload[3][0].Output))));\n    console.log(binarycurrent);\n    var spt = binarycurrent.split(\"\");\n    console.log(spt);\n    console.log(msg.payload[1][0].Number - 1);\n    console.log(spt[msg.payload[1][0].Number - 1]);\n    if (spt[msg.payload[1][0].Number - 1] == \"0\" && msg.BoosterFan && msg.StatusIndoor) {\n\n        spt[msg.payload[1][0].Number - 1] = \"1\";\n        binarycurrent = spt.join(\"\");\n        if (flow.get(\"RelayOutput\")[msg.payload[1][0].Number].Stat == 0) {\n            msg.statusBooster = true;\n        } else {\n            msg.statusBooster = false;\n        }\n        msg.payload[3][0][\"Output\"] = parseInt(String(msg.payload[3][0].Output)) + parseInt(String(msg.payload[1][0].Dec));\n    }\n    spt = binarycurrent.split(\"\");\n\n    if (spt[msg.payload[1][1].Number - 1] == \"0\") {\n        msg.statusEF = true;\n    }\n    msg.numberOutput = msg.payload[3][0].Output;\n    var hex = binaryToHex(reverseString(binarycurrent));\n    cmd += \"0000\" + \"000\" + String(dec2hex(hex));\n    msg.payload = cmd;\n    return msg;\n}\n\n\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 420,
        "wires": [
            [
                "4aab55f44e96f69c",
                "966aa7d5316d926c",
                "a426efd701f3cadb",
                "173dc4999ccd1f17"
            ]
        ]
    },
    {
        "id": "4aab55f44e96f69c",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "name": " On Booster",
        "property": "statusBooster",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1750,
        "y": 400,
        "wires": [
            [
                "8f5c888bfba81804"
            ]
        ]
    },
    {
        "id": "966aa7d5316d926c",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "name": " On EF",
        "property": "statusEF",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1730,
        "y": 440,
        "wires": [
            [
                "31561c2c26164f70"
            ]
        ]
    },
    {
        "id": "a426efd701f3cadb",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "name": " On Fan",
        "property": "statusFan",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1740,
        "y": 360,
        "wires": [
            [
                "2f29cdb85afc6603"
            ]
        ]
    },
    {
        "id": "173dc4999ccd1f17",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "name": " On Compressor",
        "property": "statusCompressor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1760,
        "y": 480,
        "wires": [
            [
                "e2254c661eaa0102"
            ]
        ]
    },
    {
        "id": "8f5c888bfba81804",
        "type": "delay",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "name": " ",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1910,
        "y": 400,
        "wires": [
            [
                "23b94d640d0a340e"
            ]
        ]
    },
    {
        "id": "31561c2c26164f70",
        "type": "delay",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "name": " ",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1910,
        "y": 440,
        "wires": [
            [
                "cb58da7cc8fa60c6"
            ]
        ]
    },
    {
        "id": "2f29cdb85afc6603",
        "type": "delay",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "name": " ",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1910,
        "y": 360,
        "wires": [
            [
                "ce2f48f4924e0b41"
            ]
        ]
    },
    {
        "id": "e2254c661eaa0102",
        "type": "delay",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "name": " ",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1910,
        "y": 480,
        "wires": [
            [
                "e24550757086963d"
            ]
        ]
    },
    {
        "id": "cb58da7cc8fa60c6",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "name": "On EF",
        "func": "msg.payload = msg.resultsql;\nvar d = msg.payload[0][1];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.numberOutput));\nvar spt = binarycurrent.split(\"\");\nif(binarycurrent[msg.payload[1][1].Number-1] == \"0\"){\n    \n    spt[msg.payload[1][1].Number - 1] = \"1\";\n    binarycurrent = spt.join(\"\");\n    if (flow.get(\"RelayOutput\")[msg.payload[1][1].Number].Stat == 0){\n        msg.statusEH2 = true;\n    }else{\n        msg.statusEH2 = false;\n    }\n   msg[\"numberOutput\"] = parseInt(String(msg.numberOutput)) +  parseInt(String(msg.payload[1][1].Dec));\n}\n\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 440,
        "wires": [
            [
                "8c90362e94f47c23"
            ]
        ]
    },
    {
        "id": "e24550757086963d",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "name": "On Compressor",
        "func": "msg.payload = msg.resultsql;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.numberOutputIndoor));\nvar spt = binarycurrent.split(\"\");\nif(binarycurrent[msg.payload[1][1].Number-1] == \"0\"){\n    \n    spt[msg.payload[2][1].Number - 1] = \"1\";\n    binarycurrent = spt.join(\"\");\n    \n   msg[\"numberOutputIndoor\"] = parseInt(String(msg.numberOutputIndoor)) +  parseInt(String(msg.payload[2][1].Dec));\n}\n\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 480,
        "wires": [
            [
                "2b57b380fb11766c"
            ]
        ]
    },
    {
        "id": "648fe1230edac655",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "name": "link out 23",
        "mode": "link",
        "links": [
            "8e6578be80dac79f"
        ],
        "x": 2215,
        "y": 420,
        "wires": []
    },
    {
        "id": "47c3cf9a26329769",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "name": "link in 22",
        "links": [
            "720a2eb23e14d481"
        ],
        "x": 805,
        "y": 420,
        "wires": [
            [
                "defa0ce955f83263"
            ]
        ]
    },
    {
        "id": "e6b00a8042609fdd",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "3e1bbc5521a97bc3",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 490,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "ab5a974fd5a66a28",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "c0d6ddff15243433",
        "name": "link in 23",
        "links": [
            "64eaab3825d9f9da",
            "72fc987867ddcb3d",
            "4c17409ddbc782a5",
            "3fae4a69287e8867",
            "983c5238c51828dc",
            "b63d1c78a5ec701c"
        ],
        "x": 835,
        "y": 120,
        "wires": [
            [
                "68307a9395d75296"
            ]
        ]
    },
    {
        "id": "ec25e59bf9e2251e",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": "link in 24",
        "links": [
            "2b3bb57567ea52c9"
        ],
        "x": 265,
        "y": 880,
        "wires": [
            [
                "2a8267dacfe382fc",
                "c004c44e4c4901db"
            ]
        ]
    },
    {
        "id": "24cee925609f243c",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "fb200851d136f94e",
        "name": "link in 25",
        "links": [
            "3dbec1e062436247"
        ],
        "x": 805,
        "y": 1460,
        "wires": [
            [
                "13ea9c3e20ded888"
            ]
        ]
    },
    {
        "id": "d90f14851f66698e",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "fb200851d136f94e",
        "name": "link in 26",
        "links": [
            "8697850ca6261f08"
        ],
        "x": 805,
        "y": 1420,
        "wires": [
            [
                "0a60de78aad0fda0"
            ]
        ]
    },
    {
        "id": "8697850ca6261f08",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "fb200851d136f94e",
        "name": "link out 40",
        "mode": "link",
        "links": [
            "d90f14851f66698e"
        ],
        "x": 1005,
        "y": 1340,
        "wires": []
    },
    {
        "id": "3dbec1e062436247",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "fb200851d136f94e",
        "name": "link out 41",
        "mode": "link",
        "links": [
            "24cee925609f243c"
        ],
        "x": 1005,
        "y": 1380,
        "wires": []
    },
    {
        "id": "fcd1216bd233ec0a",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "fb200851d136f94e",
        "name": "link out 42",
        "mode": "link",
        "links": [
            "8e6578be80dac79f"
        ],
        "x": 1105,
        "y": 1440,
        "wires": []
    },
    {
        "id": "e70c1e04911b2861",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": "link out 43",
        "mode": "link",
        "links": [
            "8e6578be80dac79f"
        ],
        "x": 2195,
        "y": 1100,
        "wires": []
    },
    {
        "id": "5c831f117bbb1353",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "8f84a6f59102f7e8",
        "name": "link in 28",
        "links": [
            "720a2eb23e14d481"
        ],
        "x": 75,
        "y": 1300,
        "wires": [
            [
                "910f33582bcdbff7",
                "9642d69edabe9708",
                "f0f03734f49cdcaf",
                "f2ab1e0d1548bdf5",
                "1bdb697b2e383039"
            ]
        ]
    },
    {
        "id": "910f33582bcdbff7",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "8f84a6f59102f7e8",
        "name": "Status AC/Fan",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "StatusIndoor",
        "targetType": "msg",
        "statusVal": "StatusIndoor",
        "statusType": "auto",
        "x": 200,
        "y": 1180,
        "wires": []
    },
    {
        "id": "f2ab1e0d1548bdf5",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "8f84a6f59102f7e8",
        "name": "Status Compressor",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "StatusOutdoor",
        "targetType": "msg",
        "statusVal": "StatusIndoor",
        "statusType": "auto",
        "x": 210,
        "y": 1240,
        "wires": []
    },
    {
        "id": "f0f03734f49cdcaf",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "8f84a6f59102f7e8",
        "name": "Status BoosterFan",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "BoosterFan",
        "targetType": "msg",
        "statusVal": "StatusIndoor",
        "statusType": "auto",
        "x": 210,
        "y": 1300,
        "wires": []
    },
    {
        "id": "9642d69edabe9708",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "8f84a6f59102f7e8",
        "name": "Status EF",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "EF",
        "targetType": "msg",
        "statusVal": "StatusIndoor",
        "statusType": "auto",
        "x": 180,
        "y": 1360,
        "wires": []
    },
    {
        "id": "1bdb697b2e383039",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "8f84a6f59102f7e8",
        "name": "Status StartLoops",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "StartLoops",
        "targetType": "msg",
        "statusVal": "StatusIndoor",
        "statusType": "auto",
        "x": 210,
        "y": 1420,
        "wires": []
    },
    {
        "id": "f4449cd73b42ab58",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "ceef139c469bbbca",
        "name": "link in 29",
        "links": [
            "720a2eb23e14d481"
        ],
        "x": 1525,
        "y": 580,
        "wires": [
            [
                "0132f7b72010efb2"
            ]
        ]
    },
    {
        "id": "af4c05426bfd1851",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "ceef139c469bbbca",
        "name": "Request",
        "func": "msg.resultsql = msg.payload;\nmsg.keterangan = msg.payload.keterangan;\nvar d = msg.payload;\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length - 2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"00\";\ncmd += \"0000\" + \"0000\" ;\nmsg.payload = cmd;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2400,
        "y": 600,
        "wires": [
            [
                "6877fbb0e66e5265",
                "88f7f40565c2d35b"
            ]
        ]
    },
    {
        "id": "66cd3178ca5a0592",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "ceef139c469bbbca",
        "name": " ",
        "func": "msg[\"delay\"] = 8000;\nmsg.payload = flow.get(\"SensorQty\");\nvar d = msg.payload;\nvar arr = [];\nvar Hprio = [\"Temp/RH,CathLab\", \"RelayIndoor\",\"RelayInput\"];\nvar IHprio = [];\nvar Lprio = [\"Temp/RH,Machine\",\"Pressure,MediumFilter\",\"Pressure,HepaFilter\"];\nvar ILprio = [];\nfor (let i = 0; i < 3; i++) {\n    for (let j = 0; j < d.length; j++) {\n        if(d[j].keterangan == Hprio[0]){\n            arr.push(d[j]);\n        }\n    }\n    for (let j = 0; j < d.length; j++) {\n        if(d[j].keterangan == Hprio[1]){\n            arr.push(d[j]);\n        }\n    }\n    for (let j = 0; j < d.length; j++) {\n        if(d[j].keterangan == Hprio[2]){\n            arr.push(d[j]);\n        }\n    }\n    for (let j = 0; j < d.length; j++) {\n        if(d[j].keterangan == Lprio[i]){\n            arr.push(d[j]);\n        }\n    }\n}\nmsg.payload = arr;\nreturn msg;\n\n//CathRH\n//RelayPanel\n//RelayIndoor",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 580,
        "wires": [
            [
                "ed2a9834d1781cb8",
                "438dc33ca7bf179d",
                "82bac92fce9e1b0f",
                "7040f4fa3a150183"
            ]
        ]
    },
    {
        "id": "a161b28ab05a6b7d",
        "type": "delay",
        "z": "c2b14f037c10d200",
        "g": "ceef139c469bbbca",
        "name": " ",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "day",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": true,
        "outputs": 1,
        "x": 1990,
        "y": 580,
        "wires": [
            [
                "66cd3178ca5a0592",
                "08bd93ecf635af2a"
            ]
        ]
    },
    {
        "id": "2ae52f29c7a90688",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "name": "link out 44",
        "mode": "link",
        "links": [],
        "x": 1115,
        "y": 460,
        "wires": []
    },
    {
        "id": "1fe7a08548ef5f37",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "d14909219f57c9f8",
        "name": " ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 100,
        "wires": []
    },
    {
        "id": "82bac92fce9e1b0f",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "ceef139c469bbbca",
        "name": " ",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "2",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2250,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "6877fbb0e66e5265",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "ceef139c469bbbca",
        "name": " ",
        "func": "if(!flow.get(\"AutoRequest\")){\n    msg.payload = null;\n}\nmsg.autorequest = flow.get(\"AutoRequest\");\nmsg.source = \"Request\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 600,
        "wires": [
            [
                "360ce19388af3861",
                "fbabcd377d77569c",
                "0bbe473d07d329e0"
            ]
        ]
    },
    {
        "id": "360ce19388af3861",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "ceef139c469bbbca",
        "name": " ",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2650,
        "y": 580,
        "wires": [
            [
                "2576a4c9f28eaada",
                "a909ffb2e3aa4b3d"
            ]
        ]
    },
    {
        "id": "a909ffb2e3aa4b3d",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "ceef139c469bbbca",
        "name": "link out 45",
        "mode": "link",
        "links": [
            "8e6578be80dac79f"
        ],
        "x": 2905,
        "y": 580,
        "wires": []
    },
    {
        "id": "88f7f40565c2d35b",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "ceef139c469bbbca",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2530,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "fbabcd377d77569c",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "ceef139c469bbbca",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "keterangan",
        "targetType": "msg",
        "statusVal": "payload.keterangan",
        "statusType": "auto",
        "x": 2650,
        "y": 620,
        "wires": []
    },
    {
        "id": "724f59461e8bc4e5",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "5a44f529fddeb430",
        "name": "link out 46",
        "mode": "link",
        "links": [
            "4f08477b05929147"
        ],
        "x": 635,
        "y": 120,
        "wires": []
    },
    {
        "id": "4f08477b05929147",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "name": "link in 30",
        "links": [
            "724f59461e8bc4e5"
        ],
        "x": 65,
        "y": 1640,
        "wires": [
            [
                "0cc9ae5ae5c425ac",
                "bd44206cf384fd06"
            ]
        ]
    },
    {
        "id": "0cc9ae5ae5c425ac",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 150,
        "y": 1640,
        "wires": []
    },
    {
        "id": "bd44206cf384fd06",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "keterangan",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 270,
        "y": 1640,
        "wires": []
    },
    {
        "id": "df587fe0d5836613",
        "type": "function",
        "z": "c2b14f037c10d200",
        "name": " ",
        "func": "msg.deviceinfo = msg.payload[0];\nmsg.topic = \"\";\nif(msg.deviceinfo.keterangan == \"RelayIndoor\"){\n    var RelayInputIndoor = flow.get(\"RelayInputIndoor\");\n    msg.deviceinfo[\"InputIndoorVal\"] = (hexToBinary(msg.realdata.substring(8,10)));\n    var RelayOutputIndoor = flow.get(\"RelayOutputIndoor\");\n    msg.deviceinfo[\"OutputIndoorVal\"] = (hexToBinary2((msg.realdata.substring(10, 12))));\n}else{\n    var RelayInput = flow.get(\"RelayInput\");\n    msg.deviceinfo[\"InputVal\"] = (hexToBinary(msg.realdata.substring(8, 10)));\n    var RelayOutput = flow.get(\"RelayOutput\");\n    msg.deviceinfo[\"OutputVal\"] = (hexToBinary2((msg.realdata.substring(10, 12))));\n}\n\nreturn msg;\n\nfunction hexToBinary(hexString) {\n    // Parse the hexadecimal string to an integer\n    const intValue = parseInt(hexString, 16);\n\n    // Convert the integer to a binary string\n    let binaryString = intValue.toString(2);\n\n    // Pad the binary string with leading zeros if necessary\n    // Assuming each hex digit should be represented by 4 binary digits\n    const hexLength = hexString.length;\n    const expectedBinaryLength = hexLength * 4;\n    while (binaryString.length < expectedBinaryLength) {\n        binaryString = '0'.concat(binaryString);\n    }\n\n    return binaryString;\n}\n\nfunction decimalToReversedBinary(decimal) {\n    // Convert the decimal number to a binary string\n    let binaryString = decimal.toString(2);\n\n    // Pad the binary string with leading zeros to ensure it has a length of 4 bits\n    while (binaryString.length < 4) {\n        binaryString = '0'.concat(binaryString);\n    }\n\n    // Reverse the binary string\n    // const reversedBinaryString = binaryString.split('').reverse().join('');\n\n    // return reversedBinaryString;\n    return binaryString;\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\n\n\nfunction hexToBinary2(hexString) {\n    // Menghapus karakter spasi jika ada\n    hexString = hexString.replace(/\\s+/g, '');\n    \n    // Memastikan string heksadesimal valid dan tidak lebih dari 2 karakter\n    if (!/^[\\da-fA-F]{1,2}$/.test(hexString)) {\n        throw new Error(\"Invalid hexadecimal string. Input should be 1 or 2 hex characters.\");\n    }\n\n    // Mengonversi string heksadesimal menjadi biner dengan panjang 8 bit\n    let binaryString = parseInt(hexString, 16).toString(2).padStart(8, '0');\n\n    return binaryString;\n}\n\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1700,
        "wires": [
            [
                "d6feab25d50fb620",
                "7081450cb9299ed4"
            ]
        ]
    },
    {
        "id": "627e23781ba372b3",
        "type": "function",
        "z": "c2b14f037c10d200",
        "name": " ",
        "func": "msg.payload = msg.realdata;\nvar networkid = msg.payload.substring(0,2);\nvar devid = msg.payload.substring(2,4);\nvar typeid = msg.payload.substring(4,6);\nmsg.topic = \"SELECT * from `devicelist` WHERE \";\nmsg.topic += \"`networkid` = '\"+networkid+\"' AND \";\nmsg.topic += \"`devid` = '\" + devid +\"' AND \";\nmsg.topic += \"`typeid` = '\" + typeid +\"';\";\nmsg.networkid = msg.realdata.substring(0,2);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1700,
        "wires": [
            [
                "913464360279ee0f"
            ]
        ]
    },
    {
        "id": "913464360279ee0f",
        "type": "mysql",
        "z": "c2b14f037c10d200",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 270,
        "y": 1700,
        "wires": [
            [
                "df587fe0d5836613"
            ]
        ]
    },
    {
        "id": "ca69a53d24cb2e29",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "name": "link in 31",
        "links": [
            "72fc987867ddcb3d",
            "faa4eaa457ad7f23"
        ],
        "x": 65,
        "y": 1700,
        "wires": [
            [
                "627e23781ba372b3"
            ]
        ]
    },
    {
        "id": "7081450cb9299ed4",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "name": " ",
        "property": "deviceinfo.InputVal",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 1660,
        "wires": [
            [
                "d6b4d5c0f91115b3",
                "1793bcaf265c5807",
                "f15264e848ab877b"
            ]
        ]
    },
    {
        "id": "d6feab25d50fb620",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "name": " ",
        "property": "deviceinfo.InputIndoorVal",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 1740,
        "wires": [
            [
                "73453b401017d4cb",
                "2462fd0183e05cbc",
                "4f9d35ecc3156f19"
            ]
        ]
    },
    {
        "id": "73453b401017d4cb",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "name": "InputIndoorVal",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "deviceinfo.InputIndoorVal",
        "targetType": "msg",
        "statusVal": "deviceinfo.InputIndoorVal",
        "statusType": "auto",
        "x": 660,
        "y": 1740,
        "wires": []
    },
    {
        "id": "4f9d35ecc3156f19",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "name": "OutputIndoorVal",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "deviceinfo.OutputIndoorVal",
        "targetType": "msg",
        "statusVal": "deviceinfo.InputIndoorVal",
        "statusType": "auto",
        "x": 860,
        "y": 1740,
        "wires": []
    },
    {
        "id": "1793bcaf265c5807",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "name": "OutputVal",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "deviceinfo.OutputVal",
        "targetType": "msg",
        "statusVal": "deviceinfo.InputIndoorVal",
        "statusType": "auto",
        "x": 840,
        "y": 1660,
        "wires": []
    },
    {
        "id": "d6b4d5c0f91115b3",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "name": "InputVal",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "deviceinfo.InputVal",
        "targetType": "msg",
        "statusVal": "deviceinfo.InputIndoorVal",
        "statusType": "auto",
        "x": 640,
        "y": 1660,
        "wires": []
    },
    {
        "id": "2462fd0183e05cbc",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 630,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "f15264e848ab877b",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 630,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "b9a0303b2c63f7e0",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "d": true,
        "g": "d3317632f375cabc",
        "name": "link in 32",
        "links": [
            "64eaab3825d9f9da"
        ],
        "x": 2045,
        "y": 60,
        "wires": [
            [
                "a0fc25388422cd37"
            ]
        ]
    },
    {
        "id": "a0fc25388422cd37",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "d3317632f375cabc",
        "name": " Post To Apex",
        "func": "function getCurrentEpochTime() {\n    return Math.floor(Date.now() / 1000);\n}\n\nmsg = {\n    method: \"POST\",\n    url: \"https://gffc6be1c389bcf-db8gk8v.adb.ap-singapore-1.oraclecloudapps.com/ords/deviotahvac/iothvac/monitoringdata\",\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    payload: {\n        \"ID\": getCurrentEpochTime(),  \n        \"Timestamp\": new Date().toISOString(),  \n        \"Temp_Cathlab\": flow.get(\"Temp_Cathlab\") || 0,\n        \"RH_Cathlab\": flow.get(\"RH_Cathlab\") || 0,\n        \"Temp_Machine\": flow.get(\"Temp_Machine\") || 0,\n        \"RH_Machine\": flow.get(\"RH_Machine\") || 0,\n        \"Outdoor_Unit\": flow.get(\"Outdoor_Unit\") || 0,\n        \"AHU_Status\": flow.get(\"AHU_Status\") || 0,\n        \"Pre_Filter\": flow.get(\"Pre_Filter\") || 0,\n        \"HEPA_Filter\": flow.get(\"HEPA_Filter\") || 0,\n        \"Booster_Fan\": flow.get(\"Booster_Fan\") || 0,\n        \"Exhaust_Fan\": flow.get(\"Exhaust_Fan\") || 0,\n        \"Heater_1\": flow.get(\"Heater_1\") || 0,\n        \"Heater_2\": flow.get(\"Heater_2\") || 0\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 60,
        "wires": [
            [
                "b8d34a0c85630cc7"
            ]
        ]
    },
    {
        "id": "b8d34a0c85630cc7",
        "type": "http request",
        "z": "c2b14f037c10d200",
        "g": "d3317632f375cabc",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2330,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "d2b1355c862698cd",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "name": "Turn Off all Relay Output",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04020000000000",
        "payloadType": "str",
        "x": 210,
        "y": 2020,
        "wires": [
            [
                "8c26e969a4e566c5"
            ]
        ]
    },
    {
        "id": "8c26e969a4e566c5",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "name": "link out 47",
        "mode": "link",
        "links": [
            "8e6578be80dac79f"
        ],
        "x": 405,
        "y": 1880,
        "wires": []
    },
    {
        "id": "09864de2936ff6be",
        "type": "delay",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " ",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "15",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 2130,
        "y": 220,
        "wires": [
            [
                "7a68dd97c70d3bb7"
            ]
        ]
    },
    {
        "id": "7a68dd97c70d3bb7",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " ",
        "func": "if((flow.get(\"SetValueTemp\")-1<=flow.get(\"Temp_Cathlab\")[0] && flow.get(\"cmdauto\")!=\"Shutdown\")||flow.get(\"bypassEH\")){\n    msg.cmd = \"ON\";\n    if(msg.StatusOutdoor){\n        msg.cmd = \"Done Execute On\";\n        flow.set(\"CMDCOMP\",false);\n    }else{\n        flow.set(\"CMDCOMP\",true);\n        flow.set(\"AutoRequest\", false);\n    }\n    \n}else if(flow.get(\"SetValueTemp\")-3>=flow.get(\"Temp_Cathlab\")[0]){\n    msg.cmd = \"OFF\";\n    if(!msg.StatusOutdoor){\n        msg.cmd = \"Done Execute Off\";\n        flow.set(\"CMDCOMP\",false);\n    }else{\n        flow.set(\"CMDCOMP\",true);\n        flow.set(\"AutoRequest\",false);\n    }   \n}else{\n    msg.cmd = \"In Range\";\n    flow.set(\"CMDCOMP\",false);\n}\n\n\nif(flow.get(\"SystemStatus\")==\"OFF\"){\n    msg.cmd = \"Shutdown\";\n}\nmsg.payload = [flow.get(\"SetValueTemp\"),flow.get(\"Temp_Cathlab\")];\nmsg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'RelayIndoor';\";\nmsg.topic += \"SELECT `OutputIndoor` FROM `Operation`;\";\nmsg.topic += \"SELECT * FROM `OutputIndoor` WHERE `keterangan` = 'Compressor';\";\nmsg.payload = Math.round((Date.now()-flow.get(\"JedaOutdoor\"))/1000);\nmsg.source = \"Compressor\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 220,
        "wires": [
            [
                "d5d6d2d6527ac207",
                "faac425f626699b1"
            ]
        ]
    },
    {
        "id": "7d17605593d792b2",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": "link in 34",
        "links": [
            "a4daf85738f19162",
            "33fd7a030a6a94fb"
        ],
        "x": 2045,
        "y": 180,
        "wires": [
            [
                "145ebf8d26a40fd7"
            ]
        ]
    },
    {
        "id": "145ebf8d26a40fd7",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " ",
        "func": "flow.set(\"SetValueTemp\",msg.payload.value);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 180,
        "wires": [
            [
                "8503d31a9112d94e"
            ]
        ]
    },
    {
        "id": "26068bcd8c1835b6",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": "On Compressor",
        "func": "\nvar d = msg.payload[0][0];\n\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\n\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.payload[1][0].OutputIndoor));\n\nvar spt = binarycurrent.split(\"\");\n\nif(binarycurrent[msg.payload[2][0].Number-1] == \"0\"){\n    spt[msg.payload[2][0].Number - 1] = \"1\";\n    binarycurrent = spt.join(\"\");\n   msg.payload[1][0][\"OutputIndoor\"] = parseInt(String(msg.payload[1][0].OutputIndoor)) +  parseInt(String(msg.payload[2][0].Dec));\n}\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+String(dec2hex(hex));\nif(Math.round((Date.now()-flow.get(\"JedaOutdoor\"))/1000)>= (60*3)){\n    msg.payload = cmd;    \n}else{\n    msg.payload = null;\n}\nmsg.payload = cmd;\nflow.set(\"TurnOffEH\",false);\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2680,
        "y": 200,
        "wires": [
            [
                "a14eb4f4fb7577bc",
                "20d09a77320f6606"
            ]
        ]
    },
    {
        "id": "d5d6d2d6527ac207",
        "type": "mysql",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 2370,
        "y": 220,
        "wires": [
            [
                "f093239c94073e14",
                "d5cf99d2118d3d1c"
            ]
        ]
    },
    {
        "id": "f093239c94073e14",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " ",
        "property": "cmd",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ON",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OFF",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2510,
        "y": 220,
        "wires": [
            [
                "26068bcd8c1835b6"
            ],
            [
                "d081a6b4c509d5f0"
            ]
        ]
    },
    {
        "id": "d081a6b4c509d5f0",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": "Off Compressor",
        "func": "\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.payload[1][0].OutputIndoor));\nvar spt = binarycurrent.split(\"\");\nif(binarycurrent[msg.payload[2][0].Number-1] == \"1\"){\n    \n    spt[msg.payload[2][0].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    \n   msg.payload[1][0][\"OutputIndoor\"] = parseInt(String(msg.payload[1][0].OutputIndoor)) +  parseInt(String(msg.payload[2][0].Dec));\n}\n\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+String(dec2hex(hex));\n\nflow.set(\"TurnOffEH\",true);\nflow.set(\"JedaOutdoor\",Date.now());\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2680,
        "y": 240,
        "wires": [
            [
                "a14eb4f4fb7577bc",
                "20d09a77320f6606"
            ]
        ]
    },
    {
        "id": "9b3524ed65d91d13",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2950,
        "y": 160,
        "wires": []
    },
    {
        "id": "faac425f626699b1",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2370,
        "y": 260,
        "wires": []
    },
    {
        "id": "2cfc91857ebdd52a",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "12",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1150,
        "y": 420,
        "wires": [
            [
                "5c7ef92968f55b55",
                "97dc1baa3803610f"
            ]
        ]
    },
    {
        "id": "58f0f1a12d526caa",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "g": "aa7677c30dfd8e9f",
        "name": "EF Nyala",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04020000380C00000002",
        "payloadType": "str",
        "x": 460,
        "y": 1380,
        "wires": [
            [
                "df175df519882fcf"
            ]
        ]
    },
    {
        "id": "508ec849b8835b14",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": "link out 48",
        "mode": "link",
        "links": [
            "8e6578be80dac79f"
        ],
        "x": 3075,
        "y": 180,
        "wires": []
    },
    {
        "id": "5ece071c5ac40b47",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "02be8c2c45ce0e2b",
        "name": "Sensor",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 260,
        "wires": []
    },
    {
        "id": "d08c29f24790bcd1",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "02020000000000",
        "payloadType": "str",
        "x": 190,
        "y": 2100,
        "wires": [
            [
                "8c26e969a4e566c5"
            ]
        ]
    },
    {
        "id": "b2b2992f323260d9",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 1180,
        "wires": []
    },
    {
        "id": "a66b593a133bdde3",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "name": "Turn Off all Relay OutputIndoor",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04050100000000",
        "payloadType": "str",
        "x": 190,
        "y": 1840,
        "wires": [
            [
                "8c26e969a4e566c5"
            ]
        ]
    },
    {
        "id": "96d87c78a2bd231a",
        "type": "delay",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "7",
        "randomLast": "10",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2960,
        "y": 220,
        "wires": [
            [
                "508ec849b8835b14",
                "9b3524ed65d91d13"
            ]
        ]
    },
    {
        "id": "8245b44122c7b4a7",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2130,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "eafea3d941ab7961",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2050,
        "y": 1040,
        "wires": [
            [
                "688c097b4f044086"
            ]
        ]
    },
    {
        "id": "6cf62f8eaa8cba7a",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2050,
        "y": 1120,
        "wires": [
            [
                "6b94221bebededbe"
            ]
        ]
    },
    {
        "id": "aef33e911e2227fa",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "01714d7729f58f6e",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2050,
        "y": 1160,
        "wires": [
            [
                "90b3db32a9cbfd24"
            ]
        ]
    },
    {
        "id": "1c2cb83676e4a96b",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "name": "Turn Off all Relay OutputIndoor",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04050100000001",
        "payloadType": "str",
        "x": 190,
        "y": 1880,
        "wires": [
            [
                "8c26e969a4e566c5"
            ]
        ]
    },
    {
        "id": "144c4423260c5475",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "name": "Turn Off all Relay OutputIndoor",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04050100000002",
        "payloadType": "str",
        "x": 190,
        "y": 1920,
        "wires": [
            [
                "8c26e969a4e566c5"
            ]
        ]
    },
    {
        "id": "82f742cf426fc793",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "name": "Turn Off all Relay OutputIndoor",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04050100000003",
        "payloadType": "str",
        "x": 190,
        "y": 1960,
        "wires": [
            [
                "8c26e969a4e566c5"
            ]
        ]
    },
    {
        "id": "574ae4f7cb78b053",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": "",
        "links": [
            "c990867d865bc131"
        ],
        "x": 2345,
        "y": 180,
        "wires": [
            [
                "04eda42e48466fb8",
                "c5d8d5c8bad6603e"
            ]
        ]
    },
    {
        "id": "04eda42e48466fb8",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " ",
        "func": "flow.set(\"SetValueRH\",msg.payload.value)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 180,
        "wires": [
            [
                "571232bbc5c9c46c"
            ]
        ]
    },
    {
        "id": "8503d31a9112d94e",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload.value",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2250,
        "y": 180,
        "wires": []
    },
    {
        "id": "571232bbc5c9c46c",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload.value",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2550,
        "y": 180,
        "wires": []
    },
    {
        "id": "c5d8d5c8bad6603e",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "name": "debug 66",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2510,
        "y": 100,
        "wires": []
    },
    {
        "id": "e8320b796499d7b9",
        "type": "delay",
        "z": "c2b14f037c10d200",
        "g": "5a44f529fddeb430",
        "name": " ",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 510,
        "y": 60,
        "wires": [
            [
                "724f59461e8bc4e5",
                "901e03b239d822ca",
                "7f160606e45f5afc"
            ]
        ]
    },
    {
        "id": "f0bcdcc51c982764",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": " ",
        "func": "delete msg[\"reset\"];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 680,
        "wires": [
            [
                "4846cf8ccfaa5294"
            ]
        ]
    },
    {
        "id": "30db0c1253a6c5eb",
        "type": "delay",
        "z": "c2b14f037c10d200",
        "g": "bf3d2e8d116c4d15",
        "name": " ",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "17",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 170,
        "y": 1000,
        "wires": [
            [
                "948427bbfb369866"
            ]
        ]
    },
    {
        "id": "97dc1baa3803610f",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1310,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "b459ae86e5e7e07a",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "name": "Turn Off all Relay Output",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04030100000000",
        "payloadType": "str",
        "x": 210,
        "y": 2060,
        "wires": [
            [
                "8c26e969a4e566c5"
            ]
        ]
    },
    {
        "id": "b1917f1bc1e8c636",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "name": "0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04050000000000",
        "payloadType": "str",
        "x": 110,
        "y": 1800,
        "wires": [
            [
                "8c26e969a4e566c5"
            ]
        ]
    },
    {
        "id": "487a04fa89b0325b",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2420,
        "y": 360,
        "wires": [
            [
                "e919cd2efb00e7ea"
            ]
        ]
    },
    {
        "id": "e919cd2efb00e7ea",
        "type": "function",
        "z": "c2b14f037c10d200",
        "name": "function 1",
        "func": "msg.payload = [Math.round((Date.now()-flow.get(\"JedaOutdoor\"))/1000)];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2560,
        "y": 340,
        "wires": [
            [
                "047f9dd785bc1ce2"
            ]
        ]
    },
    {
        "id": "047f9dd785bc1ce2",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "name": "debug 67",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2710,
        "y": 340,
        "wires": []
    },
    {
        "id": "ca0e89d63a8d5222",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": "link in 35",
        "links": [
            "720a2eb23e14d481"
        ],
        "x": 2045,
        "y": 260,
        "wires": [
            [
                "f7749ccf8f92143b"
            ]
        ]
    },
    {
        "id": "f7749ccf8f92143b",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " ",
        "func": "msg.payload = [flow.get(\"SetValueTemp\"),flow.get(\"Temp_Cathlab\")[0],flow.get(\"SetValueRH\")];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 260,
        "wires": [
            [
                "da131b51fde53a2b"
            ]
        ]
    },
    {
        "id": "da131b51fde53a2b",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2250,
        "y": 260,
        "wires": []
    },
    {
        "id": "51c1a93a0368937f",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 2180,
        "wires": [
            [
                "6481e8389e4f5180"
            ]
        ]
    },
    {
        "id": "6481e8389e4f5180",
        "type": "function",
        "z": "c2b14f037c10d200",
        "name": "function 2",
        "func": "msg.payload = flow.get(\"RelayInputIndoor\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2180,
        "wires": [
            [
                "a4e12fa3e5e58bc0"
            ]
        ]
    },
    {
        "id": "a4e12fa3e5e58bc0",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "name": "debug 68",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 2140,
        "wires": []
    },
    {
        "id": "a2143a0679eb502f",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": "Turn Off EH",
        "func": "msg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'RelayOutput';\";\nmsg.topic += \"SELECT * FROM `Output` WHERE `keterangan` = 'EH1' OR `keterangan` = 'EH2';\";\nmsg.topic += \"SELECT * FROM `Operation`;\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3250,
        "y": 240,
        "wires": [
            [
                "eb9e151422deacf8"
            ]
        ]
    },
    {
        "id": "eb9e151422deacf8",
        "type": "mysql",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 3410,
        "y": 240,
        "wires": [
            [
                "6d7be55db5cba85b"
            ]
        ]
    },
    {
        "id": "6d7be55db5cba85b",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " Off1",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\nvar binarycurrent = reverseString(decToBinary(msg.payload[2][0].Output));\nvar spt = binarycurrent.split(\"\");\nif(binarycurrent[msg.payload[1][0].Number-1] == \"1\"){\n    spt[msg.payload[1][0].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if(flow.get(\"RelayOutput\")[msg.payload[1][0].Number].Stat == 1){\n        msg.statusEH1 = true;\n    }else{\n        msg.statusEH1 = false;\n    }\n    msg.payload[2][0][\"Output\"] = parseInt(String(msg.payload[2][0].Output)) -  parseInt(String(msg.payload[1][0].Dec));\n}\nif(binarycurrent[msg.payload[1][1].Number-1] == \"1\"){\n    msg.statusEH2 = true;\n}\nmsg.numberOutput = msg.payload[2][0].Output;\nvar hex = binaryToHex(reverseString(binarycurrent));\nif(flow.get(\"StartLoops\")){\n    cmd += \"0000\"+\"000\"+\"C\";//String(dec2hex(hex));\n}else{\n    cmd += \"0000\"+\"000\"+\"0\";//String(dec2hex(hex));\n}\n\nmsg.payload = cmd;\nif(!msg.StatusOutdoor){\n    msg.statusEH1 = false;\n    // msg.statusEH2 = false;\n\n}\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3530,
        "y": 240,
        "wires": [
            [
                "0ba7e49e5db86ab9",
                "ef08a8f3778e09ea"
            ]
        ]
    },
    {
        "id": "0ba7e49e5db86ab9",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " ",
        "property": "statusEH1",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3650,
        "y": 220,
        "wires": [
            [
                "62d67ecaf24e9d26"
            ]
        ]
    },
    {
        "id": "ef08a8f3778e09ea",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "d": true,
        "g": "632356572be006e1",
        "name": " ",
        "property": "statusEH2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3650,
        "y": 260,
        "wires": [
            [
                "98daf36108d6c020"
            ]
        ]
    },
    {
        "id": "62d67ecaf24e9d26",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": "link out 49",
        "mode": "link",
        "links": [
            "8e6578be80dac79f",
            "fa420463629be9c7"
        ],
        "x": 3755,
        "y": 220,
        "wires": []
    },
    {
        "id": "98daf36108d6c020",
        "type": "delay",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": "",
        "pauseType": "random",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "7",
        "randomLast": "9",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3800,
        "y": 260,
        "wires": [
            [
                "e91b2748f81b1fd7"
            ]
        ]
    },
    {
        "id": "e91b2748f81b1fd7",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " Off2",
        "func": "msg.payload = msg.resultsql;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\nvar binarycurrent = reverseString(decToBinary(msg.numberOutput));\nvar spt = binarycurrent.split(\"\");\nif (binarycurrent[msg.payload[1][1].Number -1] == \"1\"){\n    \n    spt[msg.payload[1][1].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if (flow.get(\"RelayOutput\")[msg.payload[1][1].Number].Stat == 1){\n        msg.statusEH2 = true;\n    }else{\n        msg.statusEH2 = false;\n    }\n   msg[\"numberOutput\"] = parseInt(String(msg.numberOutput)) -  parseInt(String(msg.payload[1][1].Dec));\n}\n\n\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3930,
        "y": 260,
        "wires": [
            [
                "2f5f2d49bf67aaef"
            ]
        ]
    },
    {
        "id": "2f5f2d49bf67aaef",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " ",
        "property": "statusEH2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 4050,
        "y": 260,
        "wires": [
            [
                "678a032ca1e4c6f9"
            ]
        ]
    },
    {
        "id": "678a032ca1e4c6f9",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": "link out 50",
        "mode": "link",
        "links": [
            "8e6578be80dac79f"
        ],
        "x": 4135,
        "y": 260,
        "wires": []
    },
    {
        "id": "863465f1e384f804",
        "type": "delay",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " ",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 3110,
        "y": 260,
        "wires": [
            [
                "a2143a0679eb502f"
            ]
        ]
    },
    {
        "id": "43e72ea3750cc801",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SELECT * FROM `devicelist` WHERE `keterangan` != 'RelayOutput';",
        "payload": "",
        "payloadType": "date",
        "x": 1770,
        "y": 1740,
        "wires": [
            [
                "7a0da9579cf24f8f"
            ]
        ]
    },
    {
        "id": "7a0da9579cf24f8f",
        "type": "mysql",
        "z": "c2b14f037c10d200",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 1930,
        "y": 1740,
        "wires": [
            [
                "e9f7edd9cf5f0aeb"
            ]
        ]
    },
    {
        "id": "e9f7edd9cf5f0aeb",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "name": "debug 69",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 1840,
        "wires": []
    },
    {
        "id": "ed2a9834d1781cb8",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "name": "debug 70",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2420,
        "y": 700,
        "wires": []
    },
    {
        "id": "2576a4c9f28eaada",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "ceef139c469bbbca",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "keterangan",
        "targetType": "msg",
        "statusVal": "payload.keterangan",
        "statusType": "auto",
        "x": 2790,
        "y": 620,
        "wires": []
    },
    {
        "id": "943cd311ce7c3fa3",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "ceef139c469bbbca",
        "name": " ",
        "func": "msg.rate = (flow.get(\"SensorQty\").length*2*8000)+12000;\nmsg.delay = msg.rate-4000;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 580,
        "wires": [
            [
                "a161b28ab05a6b7d"
            ]
        ]
    },
    {
        "id": "438dc33ca7bf179d",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "name": "Rate",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "rate",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 740,
        "wires": []
    },
    {
        "id": "08bd93ecf635af2a",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "ceef139c469bbbca",
        "name": " ",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "2",
        "extend": false,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2130,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "6c946d23bf46f50e",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "ceef139c469bbbca",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "rate",
        "statusType": "auto",
        "x": 2390,
        "y": 620,
        "wires": []
    },
    {
        "id": "0132f7b72010efb2",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "ceef139c469bbbca",
        "name": " ",
        "func": "if(!flow.get(\"AutoRequest\")){\n    msg.payload = null;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 580,
        "wires": [
            [
                "a9ff0388cd989605"
            ]
        ]
    },
    {
        "id": "a9ff0388cd989605",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "ceef139c469bbbca",
        "name": " ",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1750,
        "y": 580,
        "wires": [
            [
                "943cd311ce7c3fa3"
            ]
        ]
    },
    {
        "id": "841d26b33c2809b8",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " ",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2130,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "0bbe473d07d329e0",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "ceef139c469bbbca",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "autorequest",
        "targetType": "msg",
        "statusVal": "payload.keterangan",
        "statusType": "auto",
        "x": 2650,
        "y": 540,
        "wires": []
    },
    {
        "id": "a14eb4f4fb7577bc",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " ",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2830,
        "y": 220,
        "wires": [
            [
                "96d87c78a2bd231a"
            ]
        ]
    },
    {
        "id": "f62e7382d6db941b",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " ",
        "property": "pass",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2990,
        "y": 260,
        "wires": [
            [
                "54edf257e74031cd",
                "863465f1e384f804"
            ]
        ]
    },
    {
        "id": "54edf257e74031cd",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " ",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 3110,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "528974811e716fd0",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " ",
        "func": "var RelayOutput = flow.get(\"RelayOutput\");\nfor (let index = 0; index < RelayOutput.length; index++) {\n    if(RelayOutput[index].keterangan == \"EH1\" && RelayOutput[index].Stat == 0){\n        msg.EH1Stat = true;\n    }else if(RelayOutput[index].keterangan == \"EH1\" && RelayOutput[index].Stat == 1){\n        msg.EH1Stat = false;\n    }\n}\nfor (let index = 0; index < RelayOutput.length; index++) {\n    if(RelayOutput[index].keterangan == \"EH2\" && RelayOutput[index].Stat == 0){\n        msg.EH2Stat = true;\n    }else if(RelayOutput[index].keterangan == \"EH2\" && RelayOutput[index].Stat == 1){\n        msg.EH2Stat = false;\n    }\n}\nvar StatEH1 = parseInt(String(flow.get(\"RelayInput\")[4].Stat));\nvar StatEH2 = parseInt(String(flow.get(\"RelayInput\")[5].Stat));\nif(msg.StatusOutdoor){\n    msg.pass = false;\n}else if(!msg.StatusOutdoor && (StatEH1 || StatEH2)){\n    msg.pass = true;\n}\nmsg.StatEH1 = StatEH1;\nmsg.StatEH2 = StatEH2;\nmsg.source = \"OFFEHCOMP\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 260,
        "wires": [
            [
                "f62e7382d6db941b",
                "0022b0fde01c09f7",
                "9c3ac3f594c1e948",
                "313b47b7b5d44994",
                "71b6c58b8c160cf5"
            ]
        ]
    },
    {
        "id": "aa56fe2030a29972",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SELECT * FROM `recorddevice` WHERE `networkid` = \"04\" AND `devid` = \"03\" AND `val` >= 8 AND `epoch` >= 1721021951403;",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 1980,
        "wires": [
            [
                "539d18d5daa60757"
            ]
        ]
    },
    {
        "id": "539d18d5daa60757",
        "type": "mysql",
        "z": "c2b14f037c10d200",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 740,
        "y": 1960,
        "wires": [
            [
                "64d1d447b138603e",
                "b2bc1efdf247934f"
            ]
        ]
    },
    {
        "id": "64d1d447b138603e",
        "type": "mqtt out",
        "z": "c2b14f037c10d200",
        "name": "",
        "topic": "ExportToLaptop",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "415d098faf23ad7c",
        "x": 930,
        "y": 1940,
        "wires": []
    },
    {
        "id": "b2bc1efdf247934f",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "name": "debug 71",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 2020,
        "wires": []
    },
    {
        "id": "7f160606e45f5afc",
        "type": "mqtt out",
        "z": "c2b14f037c10d200",
        "g": "5a44f529fddeb430",
        "name": "",
        "topic": "esp138/cmd",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "415d098faf23ad7c",
        "x": 690,
        "y": 60,
        "wires": []
    },
    {
        "id": "3958ccb169c85a29",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2580,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "8e25801ef5256376",
        "type": "switch",
        "z": "c2b14f037c10d200",
        "g": "5a44f529fddeb430",
        "name": " ",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "14",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 270,
        "y": 60,
        "wires": [
            [
                "a95fcd0923a92944"
            ]
        ]
    },
    {
        "id": "e9107aa38a439257",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "5a44f529fddeb430",
        "name": "Receive",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 340,
        "y": 120,
        "wires": []
    },
    {
        "id": "6b88696ca77d8b60",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "02be8c2c45ce0e2b",
        "name": "Receive",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "realdata",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 900,
        "y": 260,
        "wires": []
    },
    {
        "id": "ac0fbd136d3ce001",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": "link in 33",
        "links": [
            "2b3bb57567ea52c9"
        ],
        "x": 2045,
        "y": 220,
        "wires": [
            [
                "09864de2936ff6be",
                "841d26b33c2809b8"
            ]
        ]
    },
    {
        "id": "0022b0fde01c09f7",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " pass?",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "pass",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2990,
        "y": 300,
        "wires": []
    },
    {
        "id": "76a42005ec1d44e0",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "3e1bbc5521a97bc3",
        "name": " ",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 490,
        "y": 360,
        "wires": [
            [
                "fde80bf7db0ba825"
            ]
        ]
    },
    {
        "id": "d5cf99d2118d3d1c",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "cmd",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2530,
        "y": 260,
        "wires": []
    },
    {
        "id": "409383be9fc86091",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": " ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 820,
        "wires": [
            [
                "e89ef9fda4e36f2f"
            ]
        ]
    },
    {
        "id": "e89ef9fda4e36f2f",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": "link out 52",
        "mode": "link",
        "links": [
            "4ff5e6219affac79"
        ],
        "x": 225,
        "y": 820,
        "wires": []
    },
    {
        "id": "02c11ce421cf2535",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": " ",
        "func": "msg.loops = flow.get(\"StartLoops\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 680,
        "wires": [
            [
                "3a6dab11f5be3472",
                "7d1e5b1061712fda"
            ]
        ]
    },
    {
        "id": "7d1e5b1061712fda",
        "type": "trigger",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": " ",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 330,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "2a3e5759c334d676",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "ee6a260d3bb6c805",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "SystemStatus",
        "targetType": "msg",
        "statusVal": "SystemStatus",
        "statusType": "auto",
        "x": 1010,
        "y": 460,
        "wires": []
    },
    {
        "id": "0317097ca382ce3a",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": "link in 36",
        "links": [
            "720a2eb23e14d481"
        ],
        "x": 2745,
        "y": 280,
        "wires": [
            [
                "528974811e716fd0"
            ]
        ]
    },
    {
        "id": "7040f4fa3a150183",
        "type": "subflow:e9b71a55.b25c68",
        "z": "c2b14f037c10d200",
        "g": "ceef139c469bbbca",
        "name": "",
        "x": 2250,
        "y": 580,
        "wires": [
            [
                "af4c05426bfd1851",
                "6c946d23bf46f50e"
            ],
            []
        ]
    },
    {
        "id": "20d09a77320f6606",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "name": "debug 72",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2910,
        "y": 400,
        "wires": []
    },
    {
        "id": "ace987c65b980c03",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "962feb2f867d692e",
        "name": "link in 37",
        "links": [
            "720a2eb23e14d481"
        ],
        "x": 1605,
        "y": 220,
        "wires": [
            [
                "651cb6a61134066e"
            ]
        ]
    },
    {
        "id": "651cb6a61134066e",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "962feb2f867d692e",
        "name": " ",
        "func": "msg.topic  = \"SELECT `UnitStatus` FROM `information`;\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 220,
        "wires": [
            [
                "3faaea21449bee68"
            ]
        ]
    },
    {
        "id": "3faaea21449bee68",
        "type": "mysql",
        "z": "c2b14f037c10d200",
        "g": "962feb2f867d692e",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1810,
        "y": 220,
        "wires": [
            [
                "cfb0e616009d92c1"
            ]
        ]
    },
    {
        "id": "cfb0e616009d92c1",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "962feb2f867d692e",
        "name": " ",
        "func": "flow.set(\"SystemStatus\",msg.payload[0].UnitStatus);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "51cd92b353766fab",
        "type": "delay",
        "z": "c2b14f037c10d200",
        "g": "fd32b8c570f4f067",
        "name": " ",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "15",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 890,
        "y": 740,
        "wires": [
            [
                "f87688c1c038714f"
            ]
        ]
    },
    {
        "id": "bf649ddcd46ee371",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "fd32b8c570f4f067",
        "name": "debug 74",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 720,
        "wires": []
    },
    {
        "id": "a7e71b592989720c",
        "type": "link out",
        "z": "c2b14f037c10d200",
        "g": "bf3d2e8d116c4d15",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "8e6578be80dac79f"
        ],
        "x": 715,
        "y": 1000,
        "wires": []
    },
    {
        "id": "ea4f678a68d73ed0",
        "type": "inject",
        "z": "c2b14f037c10d200",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2350,
        "y": 880,
        "wires": [
            [
                "92bd4df20ed336b6"
            ]
        ]
    },
    {
        "id": "d765a0d2c5373152",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "name": "debug 75",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2590,
        "y": 920,
        "wires": []
    },
    {
        "id": "92bd4df20ed336b6",
        "type": "function",
        "z": "c2b14f037c10d200",
        "name": "function 3",
        "func": "msg.payload = flow.get(\"SensorQty\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 940,
        "wires": [
            [
                "d765a0d2c5373152"
            ]
        ]
    },
    {
        "id": "4b674d5f1fb8e65a",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "5a44f529fddeb430",
        "name": "Source",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "source",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 520,
        "y": 120,
        "wires": []
    },
    {
        "id": "5b191cbaad339f8b",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": "link in 38",
        "links": [
            "2b3bb57567ea52c9"
        ],
        "x": 465,
        "y": 860,
        "wires": [
            [
                "81b66e0d7fec8e08"
            ]
        ]
    },
    {
        "id": "81b66e0d7fec8e08",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "c57bc90a12d7ab5f",
        "name": " PriorityEH",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "bypass",
        "targetType": "msg",
        "statusVal": "bypass",
        "statusType": "auto",
        "x": 580,
        "y": 860,
        "wires": []
    },
    {
        "id": "68307a9395d75296",
        "type": "function",
        "z": "c2b14f037c10d200",
        "g": "c0d6ddff15243433",
        "name": " ",
        "func": "msg.topic = msg.topic.split(\";\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 120,
        "wires": [
            [
                "144d6bd39c5027fc"
            ]
        ]
    },
    {
        "id": "ff8c7f9f3f81d553",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "02be8c2c45ce0e2b",
        "name": "Info",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "infoIndoor",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1010,
        "y": 260,
        "wires": []
    },
    {
        "id": "9c3ac3f594c1e948",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": "Comp",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "StatusOutdoor",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3090,
        "y": 300,
        "wires": []
    },
    {
        "id": "313b47b7b5d44994",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": "Heater1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "StatEH1",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3200,
        "y": 300,
        "wires": []
    },
    {
        "id": "71b6c58b8c160cf5",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": "Heater2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "StatEH2",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 3320,
        "y": 300,
        "wires": []
    },
    {
        "id": "ee33129f6fee9b56",
        "type": "debug",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": "Cmd",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "cmd",
        "targetType": "msg",
        "statusVal": "cmd",
        "statusType": "auto",
        "x": 3490,
        "y": 300,
        "wires": []
    },
    {
        "id": "fa420463629be9c7",
        "type": "link in",
        "z": "c2b14f037c10d200",
        "g": "632356572be006e1",
        "name": "link in 39",
        "links": [
            "62d67ecaf24e9d26"
        ],
        "x": 3395,
        "y": 300,
        "wires": [
            [
                "ee33129f6fee9b56"
            ]
        ]
    },
    {
        "id": "400cd6c6736b6e29",
        "type": "debug",
        "z": "ad61026d2e8778d5",
        "g": "4d622e9d5544cf5c",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 100,
        "wires": []
    },
    {
        "id": "a9dd9597e70d1d24",
        "type": "mysql",
        "z": "ad61026d2e8778d5",
        "g": "4d622e9d5544cf5c",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 540,
        "y": 100,
        "wires": [
            [
                "400cd6c6736b6e29"
            ]
        ]
    },
    {
        "id": "bf79ac2f45724e37",
        "type": "function",
        "z": "ad61026d2e8778d5",
        "g": "4d622e9d5544cf5c",
        "name": "Select Value",
        "func": "// msg.topic = \"SELECT * FROM MonitoringData\";\n// msg.topic = \"SELECT Temp_Cathlab FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\nmsg.topic = \"SELECT * FROM information  LIMIT 1\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 100,
        "wires": [
            [
                "a9dd9597e70d1d24"
            ]
        ]
    },
    {
        "id": "ae2996cc837eab99",
        "type": "inject",
        "z": "ad61026d2e8778d5",
        "g": "4d622e9d5544cf5c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "bf79ac2f45724e37"
            ]
        ]
    },
    {
        "id": "8bec210b53d4bf59",
        "type": "http in",
        "z": "ad61026d2e8778d5",
        "g": "de2a6ca788571482",
        "name": "",
        "url": "/getData",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "d63299751fc32c1a"
            ]
        ]
    },
    {
        "id": "da1f779a77f9a71b",
        "type": "mysql",
        "z": "ad61026d2e8778d5",
        "g": "de2a6ca788571482",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 580,
        "y": 220,
        "wires": [
            [
                "1db277d9ef508e05"
            ]
        ]
    },
    {
        "id": "d63299751fc32c1a",
        "type": "function",
        "z": "ad61026d2e8778d5",
        "g": "de2a6ca788571482",
        "name": "Query",
        "func": "// msg.topic = \"SELECT Temp_Machine FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\nmsg.topic = \"SELECT * FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 220,
        "wires": [
            [
                "da1f779a77f9a71b"
            ]
        ]
    },
    {
        "id": "1db277d9ef508e05",
        "type": "http response",
        "z": "ad61026d2e8778d5",
        "g": "de2a6ca788571482",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 220,
        "wires": []
    },
    {
        "id": "eaa97ef57435a1fe",
        "type": "http in",
        "z": "ad61026d2e8778d5",
        "g": "de2a6ca788571482",
        "name": "",
        "url": "/getDataSetting",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "82edee113a518b2f"
            ]
        ]
    },
    {
        "id": "82edee113a518b2f",
        "type": "function",
        "z": "ad61026d2e8778d5",
        "g": "de2a6ca788571482",
        "name": "Query",
        "func": "// msg.topic = \"SELECT Temp_Machine FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\nmsg.topic = \"SELECT * FROM setting  LIMIT 1\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 280,
        "wires": [
            [
                "104ca5f38a530eb4"
            ]
        ]
    },
    {
        "id": "b7337c8b8c56c5d2",
        "type": "http response",
        "z": "ad61026d2e8778d5",
        "g": "de2a6ca788571482",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 280,
        "wires": []
    },
    {
        "id": "104ca5f38a530eb4",
        "type": "mysql",
        "z": "ad61026d2e8778d5",
        "g": "de2a6ca788571482",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 580,
        "y": 280,
        "wires": [
            [
                "b7337c8b8c56c5d2"
            ]
        ]
    },
    {
        "id": "2a5803f61d78400e",
        "type": "mysql",
        "z": "ad61026d2e8778d5",
        "g": "b1e0c2b4907fc5ee",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 940,
        "y": 460,
        "wires": [
            [
                "223c06f2aff582be"
            ]
        ]
    },
    {
        "id": "223c06f2aff582be",
        "type": "http response",
        "z": "ad61026d2e8778d5",
        "g": "b1e0c2b4907fc5ee",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 460,
        "wires": []
    },
    {
        "id": "2c2751f9f26102ef",
        "type": "http in",
        "z": "ad61026d2e8778d5",
        "g": "b1e0c2b4907fc5ee",
        "name": "",
        "url": "/setDataTemp",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 460,
        "wires": [
            [
                "ff5bd8d1909a257e"
            ]
        ]
    },
    {
        "id": "ff5bd8d1909a257e",
        "type": "function",
        "z": "ad61026d2e8778d5",
        "g": "b1e0c2b4907fc5ee",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 460,
        "wires": [
            [
                "1be5dfefc6f4a3ce"
            ]
        ]
    },
    {
        "id": "1be5dfefc6f4a3ce",
        "type": "function",
        "z": "ad61026d2e8778d5",
        "g": "b1e0c2b4907fc5ee",
        "name": "UPDATE setting SET TempCathlab",
        "func": "var value = msg.payload.value;\nvar query = `UPDATE setting SET TempCathlab = ${value}`;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 460,
        "wires": [
            [
                "2a5803f61d78400e",
                "a4daf85738f19162"
            ]
        ]
    },
    {
        "id": "ac10d85ec75032a0",
        "type": "http in",
        "z": "ad61026d2e8778d5",
        "g": "b1e0c2b4907fc5ee",
        "name": "",
        "url": "/setDataRH",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 500,
        "wires": [
            [
                "9087d0e31b1f85f8"
            ]
        ]
    },
    {
        "id": "9087d0e31b1f85f8",
        "type": "function",
        "z": "ad61026d2e8778d5",
        "g": "b1e0c2b4907fc5ee",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 500,
        "wires": [
            [
                "b09ecf786bb76adb"
            ]
        ]
    },
    {
        "id": "b09ecf786bb76adb",
        "type": "function",
        "z": "ad61026d2e8778d5",
        "g": "b1e0c2b4907fc5ee",
        "name": "UPDATE setting SET RHCathlab",
        "func": "var value = msg.payload.value;\nvar query = `UPDATE setting SET RHCathlab = ${value}`;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 500,
        "wires": [
            [
                "2a5803f61d78400e",
                "c990867d865bc131"
            ]
        ]
    },
    {
        "id": "8b70a11537179e14",
        "type": "http in",
        "z": "ad61026d2e8778d5",
        "g": "b1e0c2b4907fc5ee",
        "name": "",
        "url": "/setDataTempM",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 540,
        "wires": [
            [
                "e68c21b9b8cbb24b"
            ]
        ]
    },
    {
        "id": "e68c21b9b8cbb24b",
        "type": "function",
        "z": "ad61026d2e8778d5",
        "g": "b1e0c2b4907fc5ee",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 540,
        "wires": [
            [
                "a3b7062ff6303c73"
            ]
        ]
    },
    {
        "id": "a3b7062ff6303c73",
        "type": "function",
        "z": "ad61026d2e8778d5",
        "g": "b1e0c2b4907fc5ee",
        "name": "UPDATE setting SET TempMachine ",
        "func": "var value = msg.payload.value;\nvar query = `UPDATE setting SET TempMachine = ${value}`;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 540,
        "wires": [
            [
                "2a5803f61d78400e"
            ]
        ]
    },
    {
        "id": "886dcd6fc655a20b",
        "type": "http in",
        "z": "ad61026d2e8778d5",
        "g": "b1e0c2b4907fc5ee",
        "name": "",
        "url": "/setDataRHM",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 580,
        "wires": [
            [
                "2d5df18744acde6e"
            ]
        ]
    },
    {
        "id": "2d5df18744acde6e",
        "type": "function",
        "z": "ad61026d2e8778d5",
        "g": "b1e0c2b4907fc5ee",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 580,
        "wires": [
            [
                "ae3012dba0c769c7"
            ]
        ]
    },
    {
        "id": "ae3012dba0c769c7",
        "type": "function",
        "z": "ad61026d2e8778d5",
        "g": "b1e0c2b4907fc5ee",
        "name": "UPDATE setting SET RHMachine",
        "func": "var value = msg.payload.value;\nvar query = `UPDATE setting SET RHMachine = ${value}`;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 580,
        "wires": [
            [
                "2a5803f61d78400e"
            ]
        ]
    },
    {
        "id": "dbf4b9bda43d2e43",
        "type": "function",
        "z": "ad61026d2e8778d5",
        "g": "c1abeab8de7ec308",
        "name": "Prepare data for inserting into the database",
        "func": "// Generate sample data to insert\nconst data = {\n    Timestamp: new Date(),\n    Temp_Cathlab: 25.5,\n    RH_Cathlab: 60,\n    Temp_Machine: 27.8,\n    RH_Machine: 55.5,\n    Outdoor_Unit: 1,\n    AHU_Status: 1,\n    Pre_Filter: 155,\n    HEPA_Filter: 155,\n    Booster_Fan: 1,\n    Exhaust_Fan: 1,\n    Heater_1: 1,\n    Heater_2: 1\n};\n\n// Construct the SQL query\nconst keys = Object.keys(data);\nconst values = Object.values(data).map(value => typeof value === 'string' ? '${value}' : value);\nconst placeholders = keys.map(() => '?').join(',');\nconst query = `INSERT INTO monitoringdata (${keys.join(',')}) VALUES (${placeholders})`;\n\n// Set the query as payload for the next node\nmsg.topic = query;\nmsg.payload = values;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 720,
        "wires": [
            [
                "5f706062795897aa"
            ]
        ]
    },
    {
        "id": "e4b813ca78c8373a",
        "type": "inject",
        "z": "ad61026d2e8778d5",
        "g": "c1abeab8de7ec308",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 720,
        "wires": [
            [
                "dbf4b9bda43d2e43"
            ]
        ]
    },
    {
        "id": "ad8380fe6d44b2a5",
        "type": "debug",
        "z": "ad61026d2e8778d5",
        "g": "c1abeab8de7ec308",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 720,
        "wires": []
    },
    {
        "id": "5f706062795897aa",
        "type": "mysql",
        "z": "ad61026d2e8778d5",
        "g": "c1abeab8de7ec308",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 880,
        "y": 720,
        "wires": [
            [
                "ad8380fe6d44b2a5"
            ]
        ]
    },
    {
        "id": "44434549ba9bb86c",
        "type": "http in",
        "z": "ad61026d2e8778d5",
        "g": "de2a6ca788571482",
        "name": "",
        "url": "/getInfoData",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 340,
        "wires": [
            [
                "1806051b5ac208e8"
            ]
        ]
    },
    {
        "id": "1806051b5ac208e8",
        "type": "function",
        "z": "ad61026d2e8778d5",
        "g": "de2a6ca788571482",
        "name": "Query",
        "func": "// msg.topic = \"SELECT Temp_Machine FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\nmsg.topic = \"SELECT * FROM information  LIMIT 1\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 340,
        "wires": [
            [
                "d770849d8ecee83a"
            ]
        ]
    },
    {
        "id": "d770849d8ecee83a",
        "type": "mysql",
        "z": "ad61026d2e8778d5",
        "g": "de2a6ca788571482",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 580,
        "y": 340,
        "wires": [
            [
                "22602300d8edbbca"
            ]
        ]
    },
    {
        "id": "22602300d8edbbca",
        "type": "http response",
        "z": "ad61026d2e8778d5",
        "g": "de2a6ca788571482",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 340,
        "wires": []
    },
    {
        "id": "0b09461605af2727",
        "type": "function",
        "z": "ad61026d2e8778d5",
        "name": "Update Unit Status",
        "func": "var status = msg.payload\n\nvar data = {\n    \n    UnitStatus: status,\n    ID: 1\n};\n\n// Construct the SQL UPDATE query\nvar query = `UPDATE information SET\n             UnitStatus = '${data.UnitStatus}'\n             WHERE ID = '${data.ID}'`;\n\n// Send the SQL query to the MySQL node\nmsg.topic = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 840,
        "wires": [
            [
                "5f706062795897aa"
            ]
        ]
    },
    {
        "id": "0e3195d6300906bf",
        "type": "inject",
        "z": "ad61026d2e8778d5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ON",
        "payloadType": "str",
        "x": 170,
        "y": 800,
        "wires": [
            [
                "0b09461605af2727"
            ]
        ]
    },
    {
        "id": "37afda6af5aa294e",
        "type": "http in",
        "z": "ad61026d2e8778d5",
        "name": "",
        "url": "/unitstatus",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 920,
        "wires": [
            [
                "a02aed2f4904142c"
            ]
        ]
    },
    {
        "id": "a02aed2f4904142c",
        "type": "debug",
        "z": "ad61026d2e8778d5",
        "name": "debug 49",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 920,
        "wires": []
    },
    {
        "id": "4fc155190f12a9a5",
        "type": "function",
        "z": "ad61026d2e8778d5",
        "g": "b1e0c2b4907fc5ee",
        "name": "UPDATE information SET UnitStatus",
        "func": "var value = msg.payload.value;\n// var query = `UPDATE unitstatus SET Stat = ${value}`;\n// Check the value and set the query accordingly\nvar query;\nif (value === 1) {\n    query = `UPDATE information SET UnitStatus = 'ON'`;\n} else {\n    query = `UPDATE information SET UnitStatus = 'OFF'`;\n}\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 620,
        "wires": [
            [
                "2a5803f61d78400e",
                "134b2b40b5b3faa3"
            ]
        ]
    },
    {
        "id": "90c5e96776810a01",
        "type": "function",
        "z": "ad61026d2e8778d5",
        "g": "b1e0c2b4907fc5ee",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 620,
        "wires": [
            [
                "4fc155190f12a9a5"
            ]
        ]
    },
    {
        "id": "cd35ed8ad6754f98",
        "type": "http in",
        "z": "ad61026d2e8778d5",
        "g": "b1e0c2b4907fc5ee",
        "name": "",
        "url": "/setUnitStat",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 620,
        "wires": [
            [
                "90c5e96776810a01"
            ]
        ]
    },
    {
        "id": "134b2b40b5b3faa3",
        "type": "link out",
        "z": "ad61026d2e8778d5",
        "g": "b1e0c2b4907fc5ee",
        "name": "Interface",
        "mode": "link",
        "links": [
            "75cf64c6ae651fc6"
        ],
        "x": 885,
        "y": 620,
        "wires": []
    },
    {
        "id": "a4daf85738f19162",
        "type": "link out",
        "z": "ad61026d2e8778d5",
        "name": "GantiTemp",
        "mode": "link",
        "links": [
            "7d17605593d792b2"
        ],
        "x": 805,
        "y": 400,
        "wires": []
    },
    {
        "id": "c990867d865bc131",
        "type": "link out",
        "z": "ad61026d2e8778d5",
        "g": "b1e0c2b4907fc5ee",
        "name": "RHCathLab",
        "mode": "link",
        "links": [
            "574ae4f7cb78b053"
        ],
        "x": 885,
        "y": 500,
        "wires": []
    }
]