[
    {
        "id": "35dfe99d7f6420b6",
        "type": "tab",
        "label": "System",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "378d4de646e6a6a9",
        "type": "tab",
        "label": "Local Interface",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e9b71a55.b25c68",
        "type": "subflow",
        "name": "Loops",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "9f7aa00f.d31ab"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 640,
                "y": 40,
                "wires": [
                    {
                        "id": "f2a7b456.1521f8",
                        "port": 0
                    }
                ]
            },
            {
                "x": 460,
                "y": 220,
                "wires": [
                    {
                        "id": "6b0c2d4d.1d2934",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "a0f627e7845c8a6c",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "initiate Boot",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "845d46c1b21c27c9",
            "c4a9e424a80205e4",
            "920bd660bc249189",
            "6dd45bc2ee0c6c26",
            "cf82e20970093eca",
            "cd512c7412715bc1",
            "093b29713b791545",
            "460d859f91b11b54"
        ],
        "x": 1034,
        "y": 19,
        "w": 952,
        "h": 142
    },
    {
        "id": "8865e1ac50e646ab",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "Execute SQL",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "b8c41192e17feeb4",
            "40579769d5e15768",
            "ab46deab7a6aecf8",
            "3521bc52fbbb1103"
        ],
        "x": 794,
        "y": 19,
        "w": 222,
        "h": 142
    },
    {
        "id": "40c87e07c31a3215",
        "type": "group",
        "z": "378d4de646e6a6a9",
        "name": "Developer Debug",
        "style": {
            "label": true,
            "fill": "#e3f3d3"
        },
        "nodes": [
            "78556a57877ed9b4",
            "3080fa564e77baca",
            "c8964424cc35c354",
            "ea475c272ab45b90"
        ],
        "x": 54,
        "y": 59,
        "w": 792,
        "h": 82
    },
    {
        "id": "efb9b4d03554dd07",
        "type": "group",
        "z": "378d4de646e6a6a9",
        "name": "Get Data From MySQL",
        "style": {
            "label": true,
            "fill": "#bfdbef"
        },
        "nodes": [
            "c645019db71ab212",
            "b18818cae5e53b68",
            "dd5861eedde59655",
            "cba9f2a66adbe5db",
            "d201e0917baad2df",
            "84241278b6a3aaf2",
            "caf9bd2d7961e907",
            "55ba2f141e99ac34",
            "c325b631d611368d",
            "2aa92621f3994d41",
            "c190fd2f4581e028",
            "ff18c8c9b3311b3a"
        ],
        "x": 54,
        "y": 179,
        "w": 792,
        "h": 202
    },
    {
        "id": "d5a9f739bd804cb9",
        "type": "group",
        "z": "378d4de646e6a6a9",
        "name": "Set Thermostats",
        "style": {
            "label": true,
            "fill": "#dbcbe7"
        },
        "nodes": [
            "a1557713a29eb9a8",
            "e205ec86ab77c975",
            "1287e9fea6a10339",
            "a510ddc8438b7387",
            "8f2457651451085d",
            "185bbaf1ad097dbd",
            "62ac201d5ac5b739",
            "6421cad4e6688c25",
            "5ff319dc135fe0c7",
            "20600edefb2762e1",
            "482db8c38c758fe1",
            "bc7ddf4dfba4fee3",
            "6bd822d3fcdc6568",
            "b30ba567782e2402",
            "913ccca02da7e710",
            "0bbe5cd14d7ba9e2",
            "18a56b7ec70e75dc",
            "650b10bde6fcf31c",
            "60cd77ee87332700"
        ],
        "x": 44,
        "y": 419,
        "w": 1122,
        "h": 242
    },
    {
        "id": "61f331ed3c64c239",
        "type": "group",
        "z": "378d4de646e6a6a9",
        "name": "Insert Database",
        "style": {
            "label": true,
            "fill": "#ffbfbf"
        },
        "nodes": [
            "3fb75d04116fed04",
            "d9872cefc209a435",
            "e6c3f59cac1fe465",
            "dbca39cb1bc55641"
        ],
        "x": 54,
        "y": 679,
        "w": 1132,
        "h": 82
    },
    {
        "id": "b4d6d08760d4508b",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "Run Loop",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "8cec97bc9bb44481",
            "650bb1b60b09d884",
            "1c9c4f79bd4b8b7f",
            "6d4d07e485589e43",
            "3a08649af6568a27",
            "71f3a6de4ea88b75",
            "a2ad4a6af57cb887",
            "db96c0e43a3591ec",
            "b4d1305ac807533a",
            "55ad6968a735410f",
            "64929df4bdfa9390",
            "0529f7c8d19c391b",
            "59c7f26baa140b47",
            "50869a5d0780eee9",
            "9b978c2fb92ebf73",
            "56439a0f6a07f97e",
            "094b36590a7c8efc",
            "70cde41499d17755",
            "f86183f3eae2b244",
            "43df406e15d6781c",
            "10c5834dc0dba407",
            "9c3b50249e5ea8a0"
        ],
        "x": 44,
        "y": 639,
        "w": 712,
        "h": 302
    },
    {
        "id": "fe812d9f95dae0df",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "MonitoringTempRH",
        "style": {
            "label": true,
            "color": "#000000",
            "label-position": "n"
        },
        "nodes": [
            "d35cdff0ec35f4f4",
            "92a8ad6404cd0f8d",
            "5a3b1d85aa366fe8",
            "3bcef0b238056601",
            "e90e6ab13b355933",
            "c57e90d3aa259bcc",
            "b66627d94481ecab"
        ],
        "x": 764,
        "y": 539,
        "w": 712,
        "h": 122
    },
    {
        "id": "423ba8e3802cd15a",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "Turn On Heater",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "fa9a9584cad026bf",
            "024b3889c6059068",
            "ab4b02ab15366e5e",
            "36f72d88e2ed027b",
            "65ac32e2038d33fa",
            "3f50b7793c442648",
            "b7198da4620d700c",
            "a33a8c458af8f186",
            "085e2fbfa55ababb",
            "a6151a9840fd1e39",
            "b9e32ae2551a393a",
            "7852a1125493e191",
            "6d0194800bfb5bba"
        ],
        "x": 764,
        "y": 679,
        "w": 1192,
        "h": 142
    },
    {
        "id": "04c6df45a6ea8a79",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "Running Heater",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "22feb2bbe093bbbf",
            "b1cd7cdfcde6e8e2",
            "fc3604843327deaa",
            "aa050a07e2df3450",
            "c5b76c5a304b91a1",
            "96a27d9cb6526431",
            "7b18f167d9a725b7",
            "15a108d6b766d00b",
            "014bc73c910a6847",
            "ea1df75bf451df8c",
            "6df7306103bc7e97"
        ],
        "x": 34,
        "y": 959,
        "w": 722,
        "h": 162
    },
    {
        "id": "76ea4920382dc0ac",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "Turn Off Heater",
        "style": {
            "label": true,
            "color": "#000000",
            "label-position": "n"
        },
        "nodes": [
            "aa627311b972a86d",
            "9dc856012c44486f",
            "751ddc55c29a9154",
            "84fab7bc9e61a7eb",
            "4d1ce3eac36c2c50",
            "d66ed628f2a1fd33",
            "245deedf3b1b3d4f",
            "576db68e46b2c2d3",
            "b340267d5aff4878",
            "aed4f0a798ea78ea",
            "4889f66bfc5cda72",
            "be565ed34cee00cb",
            "5254493852c4ca11"
        ],
        "x": 764,
        "y": 839,
        "w": 1212,
        "h": 142
    },
    {
        "id": "aa0275530cd6c3af",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "Shutdown",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "29cf114431c83bd5",
            "ec697760faca1437",
            "c3808eb1d59bcda6",
            "f369c0986c2e7a4c",
            "4b4a33e5ebe4ba2e",
            "fa2999dfb1a60f5b",
            "e136f21d8dc89bb4",
            "45cd74aa18a79f56",
            "6b31f5f3995fa830",
            "3ce39f4539c94784",
            "dbad33d69191ad54",
            "47f8acde59f00cf9",
            "a19729078d0cc7db",
            "a49750d79a962028",
            "3ab609d9ee2cafd3",
            "bf4bf6ab2486962f",
            "41e8d5ee599e7ee3",
            "b3691f419969b8cd",
            "981a625f4c5d2f5b",
            "2a0df8fec1eb445b",
            "8593efea3d3d32a9",
            "e6576c9e0ec17fe1",
            "a078513decf2f9a7",
            "aab74f58d3077523",
            "302aa666aab9f64c",
            "e71be65a7a112e12",
            "3d6723293e135aaf",
            "9cce21b5587b8496",
            "4f11093a12552f10",
            "88a0acbb3b4eb81f",
            "5411fe15aa6f62b7",
            "19fd90ebe02e5c31",
            "54425ceef7c7c7c0",
            "868df7113309f845",
            "3457b30a06be4b2f",
            "249165d42b821f02"
        ],
        "x": 764,
        "y": 999,
        "w": 1472,
        "h": 242
    },
    {
        "id": "80d7667e1055e0a5",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "Pre Run Loop",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "b42d593eea0edab0",
            "867d73bbd26f3e75",
            "36fd756b281d7717",
            "5a879adfea19c8fe",
            "2d5f0286d06b202d",
            "989dfe4eec46d6d8",
            "66287559ed4b6937",
            "681692344efc4f42",
            "285b9c4f638ebe48",
            "3a55ebfb298d971c",
            "967ec2245216409f",
            "5e16906003754ad9",
            "afb8cb7426121dc3",
            "d760d5924ba86a49",
            "0158c71c0af9de90",
            "73d0e95de46de3e5",
            "a2c04673700b6df1",
            "64de2383f5d093e2",
            "ebc4ae1fa11cd782",
            "d317937293c8a1ea",
            "702c693ac203e690",
            "0671d5bf37e6b729",
            "9f928b0d4bb54f75",
            "389e1833fe797800",
            "ebbe9dbe9482f485",
            "4ddbfb6d2aa10287"
        ],
        "x": 764,
        "y": 319,
        "w": 1492,
        "h": 202
    },
    {
        "id": "65bb3a57f4d66aff",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "Receive On/Off from Interface",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "7143a0d19d341e42",
            "5780cbaf51041dfd",
            "9b50665c013c33a9",
            "fbaf62eb22d02a96",
            "348f1df6afc2229a",
            "d1247cc240b87801",
            "a2b5fdc360817acc",
            "f8d6128a04b789e0",
            "84ced214d2d64e92",
            "b728c9122ad298fa",
            "b804af4de5f29d8b"
        ],
        "x": 1244,
        "y": 179,
        "w": 742,
        "h": 122
    },
    {
        "id": "9b8bf58ec75ff6a5",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "Simulation Incoming Feedback",
        "style": {
            "label": true,
            "color": "#000000",
            "label-position": "n"
        },
        "nodes": [
            "6c68159711216ea1",
            "d58d6d4b91536227",
            "20cc652fbb41f050",
            "b900ba096b009cd2",
            "955ed04f202b824f",
            "d70d676f9c413c03",
            "4710e294066724a0",
            "2e3beea2a6767d7e",
            "44a02f451409f5ef",
            "ccc982966a1a3c29",
            "6aa6b0e29ccb9498",
            "196b383203c7e58b",
            "bde98b31840bac8b",
            "3e59427046a4c848",
            "333598f52204db0c",
            "4cfa8d4d1d52767a",
            "0bc28a6b321848d6",
            "1d77c37f4e6f597e",
            "9d4d25fd4a2bf5c4",
            "920b95153572421f",
            "7a9ecc2f48d9fb94"
        ],
        "x": 354,
        "y": 1139,
        "w": 402,
        "h": 442
    },
    {
        "id": "9f263b41872dc1ad",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "Check Relay Function",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "f9ac6ede65849a0d",
            "abe1975f1d96cfc2",
            "17d48941d16c9bc9",
            "aa90299a70093404",
            "51bceec6bfce4573",
            "f5e15e5f35649746",
            "e101c22dedfd7300",
            "73da267dd5067a33",
            "e68c1745d051024b",
            "b8b325a363cf4e6a"
        ],
        "x": 764,
        "y": 1299,
        "w": 382,
        "h": 202
    },
    {
        "id": "bef7e035a838dff2",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "Sensors",
        "style": {
            "label": true,
            "color": "#000000",
            "label-position": "n"
        },
        "nodes": [
            "809ea5f21a341bde",
            "d1b6b08cc3341b76",
            "c8c755d5e3ae6b5f",
            "f796ebeda3535bfe",
            "583dc12c0f72e954",
            "d294670cd3cf1dbe",
            "4058a65ad1074634",
            "b12e7514d20d8552",
            "8f850c6b3076e30e",
            "ae5f724c21cb1d27",
            "334b14793f8fd5f8"
        ],
        "x": 1164,
        "y": 1299,
        "w": 462,
        "h": 482
    },
    {
        "id": "6c3d1d9d1f7e80a9",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "Status Relay Base On Output Info",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "4732783a5efdb82b",
            "c7e2a20058378694",
            "3fc3c18f9b398b3e",
            "9a3da4cdffb54296",
            "68970612fa093084"
        ],
        "x": 1644,
        "y": 1299,
        "w": 262,
        "h": 202
    },
    {
        "id": "5fab023e8ba78059",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "Status Relay base On Input Info",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "4715082a03b2f716",
            "5c3456f46b6e55d4",
            "36848ed4c8e8edfb",
            "78994b146c4423b3",
            "8f0ccb9a9248044d"
        ],
        "x": 1924,
        "y": 1299,
        "w": 262,
        "h": 202
    },
    {
        "id": "33aef67e6492d641",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "StatusRelay Base On Feedback Node",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "534824189970c438",
            "bd6be871f944cdc6",
            "3f20e68353b2caea",
            "a655229597903998",
            "41a97eafc21af508",
            "4bc19e2de74d7c9a"
        ],
        "x": 34,
        "y": 1139,
        "w": 312,
        "h": 322
    },
    {
        "id": "8423ccb755deee9e",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "Idle Request Sensor",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "52866ce3c980805c",
            "9ce66aee0b743282",
            "9e0bb9887086f33f",
            "6a5380853de89679",
            "075c929877dfd052",
            "64bbec4db6f1f1f7",
            "a02a5fe3ef7da629",
            "dd38159f933bfd1c",
            "50e002d0ae347e2b",
            "722501cf7f050a1b",
            "3aa4b2842afad13e",
            "167941cc673e2fc6",
            "606b019e77cfe191",
            "4a13c93eabda305e",
            "39c934806d96602b",
            "45a8c827e2500f7b",
            "8ac3a756328edaf3",
            "ddb5fcc275d3e9cf"
        ],
        "x": 1484,
        "y": 499,
        "w": 1462,
        "h": 162
    },
    {
        "id": "5b082e6102fba67f",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "Send to Apex",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "a2e255af360a8419",
            "5c108cac282af8b1",
            "fcdd80eeed36bcb6"
        ],
        "x": 2004,
        "y": 19,
        "w": 422,
        "h": 82
    },
    {
        "id": "66a3c62460ec38fc",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "IncomingData",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "eacb2b4b65a6e003",
            "a051a2aff11b5edc",
            "2d83606cbc069a5c",
            "aa0e14a0393217bf",
            "4b5d5303bf93d56a",
            "872e1c06b3d29fd9",
            "42404c0a4ce99770",
            "d9c49b1accbf22f2",
            "19affaec2d8aefb2",
            "584114140bce9775",
            "4e7014421d67368b",
            "f7fb383db8577f6a",
            "69706dc29dd9fe20",
            "cc36da525a57c466"
        ],
        "x": 34,
        "y": 179,
        "w": 1202,
        "h": 122
    },
    {
        "id": "82aba440e21a64b7",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "Compressor Auto",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "9757af732073cc45",
            "c2bddadb616c7772",
            "464a9b69ebc6aab5",
            "2edc4b06a74d5a83",
            "eb0162ba7db23916",
            "cf5513157054b8d3",
            "98c148cf58818e55",
            "72148f13041b090a",
            "136d4353575761d6",
            "453f113766bda1c1",
            "e21d8d63e32a79e0",
            "40739d24f31e7baa",
            "cbe52428f91bd17b",
            "210d55685edfe927",
            "19d9ae3d315d66d0",
            "feaf7c08a4f431ac",
            "cb4a60666f5945d3",
            "ce01c1eed5eacd46",
            "7834467395ca3b66",
            "7b4eaa796c728766",
            "6a34c7554550a908",
            "4e13d440f159f12f",
            "385985bc8b6ba9b7",
            "766fd9b49910a916",
            "fe11b8d634a8581d",
            "2d4ed30ee445cfd5",
            "f821f21f483b57c8",
            "3234af6cd2717f97",
            "dbcab75afc6ebe4f",
            "57c5d2ef4d968f58",
            "3ba35476cff45e7a",
            "46480a606a86627c",
            "a245fac6bcbf491b",
            "fd8b16261dfb244f",
            "3d06d65caacffa71",
            "d3048506e82c8e4d",
            "180235f064e5b7a4",
            "3f4c0af15d2802cd",
            "ee118fffde7af227"
        ],
        "x": 2004,
        "y": 119,
        "w": 2172,
        "h": 222
    },
    {
        "id": "ba1fc06f41c5063d",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "Gateway",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "32ef0e550a4aca93",
            "4a08a97d51c8f303",
            "b31d076d9b9d8385",
            "b5ae4594ff1f5495",
            "4bac294798b07d31",
            "50b9d2bb80c97629",
            "898f9f5cf774870b",
            "74c216187b16afd5",
            "7565939e88f5d33c",
            "2a791e28b6137207",
            "3cbac83664664f02",
            "bffe3c1e6b045ba4"
        ],
        "x": 34,
        "y": 19,
        "w": 752,
        "h": 142
    },
    {
        "id": "7d1dd2a6ee9e18ec",
        "type": "group",
        "z": "35dfe99d7f6420b6",
        "name": "SystemClock",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "3c5024fca4ab3e26",
            "826650d27f83e5b3",
            "f4f0bb734a5396dc",
            "4ad5455f7813966e",
            "cb92f4b10867c13d",
            "550cacf5e68a5a33",
            "dfe504a3836c532b",
            "a43b5e8f1d19af0a",
            "f2a52ec4b04f228c",
            "d5614cd9724e215b",
            "6571aa4c32464225",
            "a02176000f5891ab",
            "b65550984240d843",
            "f84aa71efce8693d"
        ],
        "x": 34,
        "y": 319,
        "w": 712,
        "h": 302
    },
    {
        "id": "ebc4ae1fa11cd782",
        "type": "junction",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "x": 2160,
        "y": 360,
        "wires": [
            [
                "a2c04673700b6df1"
            ]
        ]
    },
    {
        "id": "d317937293c8a1ea",
        "type": "junction",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "x": 2160,
        "y": 400,
        "wires": [
            [
                "a2c04673700b6df1"
            ]
        ]
    },
    {
        "id": "702c693ac203e690",
        "type": "junction",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "x": 2160,
        "y": 440,
        "wires": [
            [
                "a2c04673700b6df1"
            ]
        ]
    },
    {
        "id": "0671d5bf37e6b729",
        "type": "junction",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "x": 2160,
        "y": 480,
        "wires": [
            [
                "a2c04673700b6df1"
            ]
        ]
    },
    {
        "id": "4f11093a12552f10",
        "type": "junction",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "x": 2140,
        "y": 1040,
        "wires": [
            [
                "9cce21b5587b8496"
            ]
        ]
    },
    {
        "id": "88a0acbb3b4eb81f",
        "type": "junction",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "x": 2140,
        "y": 1080,
        "wires": [
            [
                "9cce21b5587b8496"
            ]
        ]
    },
    {
        "id": "5411fe15aa6f62b7",
        "type": "junction",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "x": 2140,
        "y": 1120,
        "wires": [
            [
                "9cce21b5587b8496"
            ]
        ]
    },
    {
        "id": "19fd90ebe02e5c31",
        "type": "junction",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "x": 2140,
        "y": 1160,
        "wires": [
            [
                "9cce21b5587b8496"
            ]
        ]
    },
    {
        "id": "6aa6b0e29ccb9498",
        "type": "junction",
        "z": "35dfe99d7f6420b6",
        "g": "9b8bf58ec75ff6a5",
        "x": 600,
        "y": 1180,
        "wires": [
            [
                "20cc652fbb41f050"
            ]
        ]
    },
    {
        "id": "196b383203c7e58b",
        "type": "junction",
        "z": "35dfe99d7f6420b6",
        "g": "9b8bf58ec75ff6a5",
        "x": 600,
        "y": 1220,
        "wires": [
            [
                "20cc652fbb41f050"
            ]
        ]
    },
    {
        "id": "bde98b31840bac8b",
        "type": "junction",
        "z": "35dfe99d7f6420b6",
        "g": "9b8bf58ec75ff6a5",
        "x": 600,
        "y": 1260,
        "wires": [
            [
                "20cc652fbb41f050"
            ]
        ]
    },
    {
        "id": "3e59427046a4c848",
        "type": "junction",
        "z": "35dfe99d7f6420b6",
        "g": "9b8bf58ec75ff6a5",
        "x": 600,
        "y": 1300,
        "wires": [
            [
                "20cc652fbb41f050"
            ]
        ]
    },
    {
        "id": "333598f52204db0c",
        "type": "junction",
        "z": "35dfe99d7f6420b6",
        "g": "9b8bf58ec75ff6a5",
        "x": 600,
        "y": 1340,
        "wires": [
            [
                "20cc652fbb41f050"
            ]
        ]
    },
    {
        "id": "4cfa8d4d1d52767a",
        "type": "junction",
        "z": "35dfe99d7f6420b6",
        "g": "9b8bf58ec75ff6a5",
        "x": 600,
        "y": 1380,
        "wires": [
            [
                "20cc652fbb41f050"
            ]
        ]
    },
    {
        "id": "0bc28a6b321848d6",
        "type": "junction",
        "z": "35dfe99d7f6420b6",
        "g": "9b8bf58ec75ff6a5",
        "x": 600,
        "y": 1420,
        "wires": [
            [
                "20cc652fbb41f050"
            ]
        ]
    },
    {
        "id": "1d77c37f4e6f597e",
        "type": "junction",
        "z": "35dfe99d7f6420b6",
        "g": "9b8bf58ec75ff6a5",
        "x": 600,
        "y": 1460,
        "wires": [
            [
                "20cc652fbb41f050"
            ]
        ]
    },
    {
        "id": "9d4d25fd4a2bf5c4",
        "type": "junction",
        "z": "35dfe99d7f6420b6",
        "g": "9b8bf58ec75ff6a5",
        "x": 600,
        "y": 1500,
        "wires": [
            [
                "20cc652fbb41f050"
            ]
        ]
    },
    {
        "id": "920b95153572421f",
        "type": "junction",
        "z": "35dfe99d7f6420b6",
        "g": "9b8bf58ec75ff6a5",
        "x": 600,
        "y": 1540,
        "wires": [
            [
                "20cc652fbb41f050"
            ]
        ]
    },
    {
        "id": "bad5c49e0c96d15a",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "3b8e5eb93b7526d7",
        "type": "MySQLdatabase",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "rsjpharapankita",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "415d098faf23ad7c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "9f7aa00f.d31ab",
        "type": "function",
        "z": "e9b71a55.b25c68",
        "name": "InitiateLoop",
        "func": "var data = msg.payload;\nvar limit = data.length;\nflow.set(\"data\",data);\nflow.set(\"limit\",limit);\nmsg.topic = \"0\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 170,
        "y": 40,
        "wires": [
            [
                "f2a7b456.1521f8"
            ]
        ]
    },
    {
        "id": "f2a7b456.1521f8",
        "type": "function",
        "z": "e9b71a55.b25c68",
        "name": "Loop",
        "func": "var data = flow.get(\"data\");\nvar count = parseInt(msg.topic);\nmsg.payload = data[count];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 40,
        "wires": [
            [
                "31bc9e4a.f0c962"
            ]
        ]
    },
    {
        "id": "26ad85dd.1a426a",
        "type": "link in",
        "z": "e9b71a55.b25c68",
        "name": "",
        "links": [
            "6e495066.b7de"
        ],
        "x": 215,
        "y": 80,
        "wires": [
            [
                "f2a7b456.1521f8"
            ]
        ]
    },
    {
        "id": "31bc9e4a.f0c962",
        "type": "link out",
        "z": "e9b71a55.b25c68",
        "name": "",
        "links": [
            "4642e834.27d108"
        ],
        "x": 395,
        "y": 80,
        "wires": []
    },
    {
        "id": "6e495066.b7de",
        "type": "link out",
        "z": "e9b71a55.b25c68",
        "name": "",
        "links": [
            "26ad85dd.1a426a"
        ],
        "x": 615,
        "y": 180,
        "wires": []
    },
    {
        "id": "4642e834.27d108",
        "type": "link in",
        "z": "e9b71a55.b25c68",
        "name": "",
        "links": [
            "31bc9e4a.f0c962"
        ],
        "x": 95,
        "y": 180,
        "wires": [
            [
                "db2b7400.81c1e8"
            ]
        ]
    },
    {
        "id": "db2b7400.81c1e8",
        "type": "function",
        "z": "e9b71a55.b25c68",
        "name": "Increment",
        "func": "var limit = flow.get(\"limit\");\nvar count = parseInt(msg.topic);\ncount++;\nif(count>=limit){\n    msg.payload = null;\n}\nmsg.topic = String(count);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 200,
        "y": 180,
        "wires": [
            [
                "6b0c2d4d.1d2934"
            ]
        ]
    },
    {
        "id": "6b0c2d4d.1d2934",
        "type": "switch",
        "z": "e9b71a55.b25c68",
        "name": "Continue?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 180,
        "wires": [
            [
                "f20c27b7.bee1c8"
            ],
            []
        ]
    },
    {
        "id": "f20c27b7.bee1c8",
        "type": "delay",
        "z": "e9b71a55.b25c68",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 500,
        "y": 180,
        "wires": [
            [
                "6e495066.b7de"
            ]
        ]
    },
    {
        "id": "32ef0e550a4aca93",
        "type": "mqtt in",
        "z": "35dfe99d7f6420b6",
        "g": "ba1fc06f41c5063d",
        "name": "",
        "topic": "iota238/data",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "415d098faf23ad7c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 60,
        "wires": [
            [
                "2a791e28b6137207",
                "3cbac83664664f02"
            ]
        ]
    },
    {
        "id": "4a08a97d51c8f303",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "ba1fc06f41c5063d",
        "name": "IncomingData",
        "mode": "link",
        "links": [
            "a051a2aff11b5edc",
            "50b9d2bb80c97629"
        ],
        "x": 365,
        "y": 60,
        "wires": []
    },
    {
        "id": "a051a2aff11b5edc",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "66a3c62460ec38fc",
        "name": "link in 1",
        "links": [
            "4a08a97d51c8f303",
            "20cc652fbb41f050",
            "6776bbaf798955cd",
            "c6ccaf078e16fab4"
        ],
        "x": 75,
        "y": 240,
        "wires": [
            [
                "eacb2b4b65a6e003"
            ]
        ]
    },
    {
        "id": "b8c41192e17feeb4",
        "type": "mysql",
        "z": "35dfe99d7f6420b6",
        "g": "8865e1ac50e646ab",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 920,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "4b5d5303bf93d56a",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "66a3c62460ec38fc",
        "name": "(networkID)",
        "property": "networkid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "04",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "04",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 240,
        "wires": [
            [
                "872e1c06b3d29fd9"
            ],
            [
                "f7fb383db8577f6a",
                "cc36da525a57c466"
            ]
        ]
    },
    {
        "id": "872e1c06b3d29fd9",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "66a3c62460ec38fc",
        "name": "Parse",
        "func": "msg.deviceinfo = msg.payload[0];\nvar data = msg.realdata;\nvar numBytes = data.length / 2;\nvar byteArray = new Uint8Array(numBytes);\nfor (var i=0; i<numBytes; i++) {\n    byteArray[i] = parseInt(data.substr(i*2, 2), 16);\n}\nvar len = byteArray[3];\nvar byteData = new Uint8Array(len);\nfor (i=0; i<len; i++) {\n    byteData[i] = byteArray[i+4];\n}\nmsg.payload = byteData;\nmsg.data = data.substr(0,6);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 220,
        "wires": [
            [
                "42404c0a4ce99770"
            ]
        ]
    },
    {
        "id": "19affaec2d8aefb2",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "66a3c62460ec38fc",
        "name": " Build",
        "func": "var data = msg.payload;\ndata.networkid = msg.data.substring(0,2);\ndata.devid = msg.data.substring(2,4);\ndata.typeid = msg.data.substring(4,6);\ndata.epoch = (Date.now());\nmsg.payload = data;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 220,
        "wires": [
            [
                "584114140bce9775",
                "69706dc29dd9fe20"
            ]
        ]
    },
    {
        "id": "aa0e14a0393217bf",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "66a3c62460ec38fc",
        "name": " Listed?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 440,
        "y": 240,
        "wires": [
            [
                "4b5d5303bf93d56a"
            ]
        ]
    },
    {
        "id": "eacb2b4b65a6e003",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "66a3c62460ec38fc",
        "name": "Check ID",
        "func": "msg.realdata = msg.payload;\nvar networkid = msg.payload.substring(0,2);\nvar devid = msg.payload.substring(2,4);\nvar typeid = msg.payload.substring(4,6);\nmsg.topic = \"SELECT * from `devicelist` WHERE \";\nmsg.topic += \"`networkid` = '\"+networkid+\"' AND \";\nmsg.topic += \"`devid` = '\" + devid +\"' AND \";\nmsg.topic += \"`typeid` = '\" + typeid +\"';\";\nmsg.networkid = msg.realdata.substring(0,2);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 240,
        "wires": [
            [
                "2d83606cbc069a5c"
            ]
        ]
    },
    {
        "id": "584114140bce9775",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "66a3c62460ec38fc",
        "name": "Query",
        "func": "var d = msg.deviceinfo;\nmsg.topic = \"UPDATE `monitoringdata` SET \";\nif(d.keterangan.split(\",\")[0] == \"Temp/RH\"){\n    if(d.keterangan.split(\",\")[1] == \"CathLab\"){\n        msg.topic += \"`Temp_Cathlab` = \"+String(Math.round(msg.payload.temperature_1))+\",\";\n        msg.topic += \"`RH_Cathlab` = \"+String(Math.round(msg.payload.relative_humidity_1))+\";\";\n        flow.set(\"Temp_Cathlab\",[msg.payload.temperature_1,Date.now()]);\n        flow.set(\"RH_Cathlab\", [msg.payload.relative_humidity_1,Date.now()]);\n    } else if (d.keterangan.split(\",\")[1] == \"Machine\"){\n        msg.topic += \"`Temp_Machine` = \" + String(Math.round(msg.payload.temperature_1)) + \",\";\n        msg.topic += \"`RH_Machine` = \" + String(Math.round(msg.payload.relative_humidity_1)) + \";\";\n        flow.set(\"Temp_Machine\", [msg.payload.temperature_1,Date.now()]);\n        flow.set(\"RH_Machine\", [msg.payload.relative_humidity_1,Date.now()]);\n    }\n} else if (d.keterangan.split(\",\")[0] == \"Pressure\"){\n    if (d.keterangan.split(\",\")[1] == \"MediumFilter\") {\n        msg.topic += \"`Pre_Filter` = \" + String(msg.payload.barometric_pressure_1) + \";\";\n        flow.set(\"Pre_Filter\", [msg.payload.barometric_pressure_1,Date.now()]);\n    } else if (d.keterangan.split(\",\")[1] == \"HepaFilter\") {\n        msg.topic += \"`HEPA_Filter` = \" + String(msg.payload.barometric_pressure_1) + \";\";\n        flow.set(\"HEPA_Filter\", [msg.payload.barometric_pressure_1,Date.now()]);\n    }\n}\n\nmsg.topic += \"INSERT INTO `recorddevice`(`epoch`, `networkid`, `devid`, `typeid`, `temp`, `val`) VALUES (\";\nmsg.topic += String(msg.payload.epoch)+\",\";\nmsg.topic += \"'\" + String(msg.payload.networkid) + \"',\";\nmsg.topic += \"'\" + String(msg.payload.devid) + \"',\";\nmsg.topic += \"'\" + String(msg.payload.typeid) + \"',\";\nmsg.topic += String(msg.payload.temperature_1) + \",\";\nif(msg.payload.networkid == \"02\"){\n    msg.topic += String(msg.payload.barometric_pressure_1);\n}else if(msg.payload.networkid == \"03\"){\n    msg.topic += String(msg.payload.relative_humidity_1);\n}\nmsg.topic += \");\";\n\nmsg.topic += \"DELETE FROM `recorddevice` WHERE `epoch` < \" + String(Date.now()-(604800*1000))+\";\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 220,
        "wires": [
            [
                "4e7014421d67368b"
            ]
        ]
    },
    {
        "id": "4e7014421d67368b",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "66a3c62460ec38fc",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "40579769d5e15768",
            "9b0d96a526b14c55",
            "3521bc52fbbb1103",
            "a2e255af360a8419"
        ],
        "x": 1195,
        "y": 220,
        "wires": []
    },
    {
        "id": "40579769d5e15768",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "8865e1ac50e646ab",
        "name": "link in 2",
        "links": [
            "4e7014421d67368b",
            "d9c49b1accbf22f2",
            "4c17409ddbc782a5",
            "3fae4a69287e8867",
            "983c5238c51828dc",
            "cf82e20970093eca"
        ],
        "x": 835,
        "y": 60,
        "wires": [
            [
                "b8c41192e17feeb4"
            ]
        ]
    },
    {
        "id": "b31d076d9b9d8385",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "ba1fc06f41c5063d",
        "name": "OutData",
        "links": [
            "e90e6ab13b355933",
            "be565ed34cee00cb",
            "31d2b08316816f13",
            "618781567775cb33",
            "a2c04673700b6df1",
            "af5fad60c2799c88",
            "fa9a9584cad026bf",
            "b9e32ae2551a393a",
            "d1bcd9574d203e14",
            "de5cfc72b0d10bf3",
            "576db68e46b2c2d3",
            "014bc73c910a6847",
            "780771ba20b86bbe",
            "f9f4bd8039c3fbc8",
            "b5539273c8b7b27c",
            "d6ec50e49909a835",
            "6c8877aeb5ae2bf4",
            "b8b325a363cf4e6a",
            "9cce21b5587b8496",
            "722501cf7f050a1b",
            "5558613571d96c2e",
            "e21d8d63e32a79e0",
            "fe11b8d634a8581d",
            "dbcab75afc6ebe4f",
            "b25a431851a8cbf4"
        ],
        "x": 405,
        "y": 60,
        "wires": [
            [
                "74c216187b16afd5",
                "bffe3c1e6b045ba4"
            ]
        ]
    },
    {
        "id": "2d83606cbc069a5c",
        "type": "mysql",
        "z": "35dfe99d7f6420b6",
        "g": "66a3c62460ec38fc",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 310,
        "y": 240,
        "wires": [
            [
                "aa0e14a0393217bf"
            ]
        ]
    },
    {
        "id": "c4a9e424a80205e4",
        "type": "mysql",
        "z": "35dfe99d7f6420b6",
        "g": "a0f627e7845c8a6c",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1540,
        "y": 80,
        "wires": [
            [
                "920bd660bc249189",
                "460d859f91b11b54"
            ]
        ]
    },
    {
        "id": "920bd660bc249189",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "a0f627e7845c8a6c",
        "name": "Init Global Variable",
        "func": "var json = {};\nflow.set(\"InitTime\",Date.now());\nflow.set(\"RelayInput\",msg.payload[1]);\nflow.set(\"RelayOutput\",msg.payload[2]);\nflow.set(\"RelayInputIndoor\",msg.payload[3]);\nflow.set(\"RelayOutputIndoor\",msg.payload[4]);\nflow.set(\"SensorQty\",msg.payload[5]);\nflow.set(\"SetValueTemp\",msg.payload[6][0].TempCathlab);\nflow.set(\"SetValueRH\",msg.payload[7][0].RHCathlab);\nflow.set(\"JedaOutdoor\",Date.now());\nflow.set(\"autocmd\",\"None\");\nflow.set(\"StartLoops\",false);\nflow.set(\"AutoRequest\",true);\nfor (let index = 0; index < Object.keys(msg.payload[0][0]).length ; index++) {\n    flow.set(Object.keys(msg.payload[0][0])[index],msg.payload[0][0][Object.keys(msg.payload[0][0])[index]]) \n    json[String(Object.keys(msg.payload[0][0])[index])] = flow.get(Object.keys(msg.payload[0][0])[index]);  \n}\njson[\"Timestamp\"] = toEpochTimeInSeconds(json.Timestamp);\nmsg.payload = [json,msg.payload[1],msg.payload[2]];\nreturn msg;\n\nfunction toEpochTimeInSeconds(dateString) {\n    return Math.floor(new Date(dateString).getTime());\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 60,
        "wires": [
            [
                "845d46c1b21c27c9"
            ]
        ]
    },
    {
        "id": "845d46c1b21c27c9",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "a0f627e7845c8a6c",
        "name": "debug 43",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1880,
        "y": 60,
        "wires": []
    },
    {
        "id": "f7fb383db8577f6a",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "66a3c62460ec38fc",
        "name": " Relay",
        "func": "msg.deviceinfo = msg.payload[0];\nmsg.topic = \"\";\nif(msg.deviceinfo.keterangan == \"RelayIndoor\"){\n    var RelayInputIndoor = flow.get(\"RelayInputIndoor\");    \n    //Ext--------------------------------------------------------------------------------------------\n    msg.deviceinfo[\"InputIndoorValExt\"] = reverseString(hexToBinary(msg.realdata.substring(8,10)));\n    if(msg.deviceinfo.InputIndoorValExt == \"00000000\"){\n        RelayInputIndoor[0][\"Stat\"] = 1;\n        for (let index = 1; index < RelayInputIndoor.length; index++) {\n            RelayInputIndoor[index][\"Stat\"] = 0;\n        }\n        msg.infoIndoor = false;\n        msg.topic += \"UPDATE `InputIndoor` SET `Stat` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 0;\";\n    }else{\n        msg.infoIndoor = true;\n        RelayInputIndoor[0][\"Stat\"] = 0;\n        var spt = msg.deviceinfo.InputIndoorValExt.split(\"\");\n        \n        for (let index = 1; index < spt.length+1; index++) {\n            if(spt[index-1] == \"1\"){\n                if(index==1){\n                    msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 1;\";\n                }else if(index == 2){\n                    msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 1;\";\n                }\n                msg.topic += \"UPDATE `InputIndoor` SET `Stat` = 1 WHERE `Number` = \"+String(index)+\";\";          \n            }else if(spt[index-1] == \"0\"){\n                \n                if(index==1){\n                    msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 0;\";\n                }else if(index == 2){\n                    msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 0;\";\n                }\n                msg.topic += \"UPDATE `InputIndoor` SET `Stat` = 0 WHERE `Number` = \"+String(index)+\";\";             \n            }\n        }\n    }\n    //ORI---------------------------------------------------------------------------------------------\n    msg.deviceinfo[\"InputIndoorVal\"] = reverseString(hexToBinary(msg.realdata.substring(10,12)));\n    if(msg.deviceinfo.InputIndoorVal == \"00000000\"){\n        RelayInputIndoor[0][\"Stat\"] = 1;\n        for (let index = 1; index < RelayInputIndoor.length; index++) {\n            RelayInputIndoor[index][\"Stat\"] = 0;\n        }\n        if(msg.infoIndoor == false){\n            msg.topic += \"UPDATE `InputIndoor` SET `Stat` = 0;\";\n            msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 0;\";\n            msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 0;\";\n        }\n    }else{\n        RelayInputIndoor[0][\"Stat\"] = 0;\n        var spt = msg.deviceinfo.InputIndoorVal.split(\"\");\n        \n        for (let index = 1; index < spt.length+1; index++) {\n            if(spt[index-1] == \"1\"){\n                if(msg.infoIndoor == false){\n                    if(index==1){\n                        msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 1;\";\n                    }else if(index == 2){\n                        msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 1;\";\n                    }\n                    msg.topic += \"UPDATE `InputIndoor` SET `Stat` = 1 WHERE `Number` = \"+String(index)+\";\";          \n                }\n                RelayInputIndoor[index][\"Stat\"] = 1;\n            }else if(spt[index-1] == \"0\"){\n                if(msg.infoIndoor == false){\n                    if(index==1){\n                        msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 0;\";\n                    }else if(index == 2){\n                        msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 0;\";\n                    }\n                    msg.topic += \"UPDATE `InputIndoor` SET `Stat` = 0 WHERE `Number` = \"+String(index)+\";\";             \n                }\n                RelayInputIndoor[index][\"Stat\"] = 0;         \n            }\n        }\n    }\n    flow.set(\"RelayInputIndoor\", RelayInputIndoor);\n    \n\n    var RelayOutputIndoor = flow.get(\"RelayOutputIndoor\");\n    msg.deviceinfo[\"OutputIndoorVal\"] = reverseString(hexToBinary2((msg.realdata.substring(10, 12))));\n    if (msg.deviceinfo.OutputIndoorVal == \"00000000\") {\n        RelayOutputIndoor[0][\"Stat\"] = 1;\n        for (let index = 1; index < RelayOutputIndoor.length; index++) {\n            RelayOutputIndoor[index][\"Stat\"] = 0;\n        }\n        if (msg.infoIndoor == false) {\n            msg.topic += \"UPDATE `OutputIndoor` SET `Stat` = 0;\";\n            msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 0;\";\n            msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 0;\";\n        }\n    } else {\n        RelayOutputIndoor[0][\"Stat\"] = 0;\n        var spt = msg.deviceinfo.OutputIndoorVal.split(\"\");\n        for (let index = 1; index < spt.length + 1; index++) {\n            if (spt[index - 1] == \"0\") {\n                if (msg.infoIndoor == false) {\n                    if(index==1){\n                        msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 0;\";\n                    }else if(index == 2){\n                        msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 0;\";\n                    }\n                }\n                msg.topic += \"UPDATE `OutputIndoor` SET `Stat` = 0 WHERE `Number` = \" + String(index) + \";\";\n                RelayOutputIndoor[index][\"Stat\"] = 0;\n            } else if (spt[index - 1] == \"1\") {\n                if (msg.infoIndoor == false) {\n                    if(index==1){\n                        msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 1;\";\n                    }else if(index == 2){\n                        msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 1;\";\n                    }\n                }\n                msg.topic += \"UPDATE `OutputIndoor` SET `Stat` = 1 WHERE `Number` = \" + String(index) + \";\";\n                RelayOutputIndoor[index][\"Stat\"] = 1;\n            }\n        }\n    }\n    flow.set(\"RelayOutputIndoor\", RelayOutputIndoor);\n    msg.topic += \"UPDATE `Operation` SET `OutputIndoor` = \" + String(parseInt(msg.realdata.substring(10, 12), 16)) + \";\";\n        \n}else{\n    var RelayInput = flow.get(\"RelayInput\");\n    msg.deviceinfo[\"InputVal\"] = reverseString(hexToBinary(msg.realdata.substring(8, 10)));\n    if (msg.deviceinfo.InputVal == \"11111111\") {\n        RelayInput[0][\"Stat\"] = 1;\n        for (let index = 1; index < RelayInput.length; index++) {\n            RelayInput[index][\"Stat\"] = 0;\n        }\n        msg.topic += \"UPDATE `Input` SET `Stat` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `Heater_1` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `Heater_2` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `Booster_Fan` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `Exhaust_Fan` = 0;\";\n        msg.topic += \"UPDATE `information` SET `AutoManual` = '1' WHERE `information`.`ID` = 1;\";\n    } else {\n        RelayInput[0][\"Stat\"] = 0;\n        var spt = msg.deviceinfo.InputVal.split(\"\");\n        \n        for (let index = 1; index < spt.length + 1; index++) {\n            if (spt[index - 1] == \"0\") {\n                if (index == 4) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Heater_1` = 1;\";\n                } else if (index == 5) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Heater_2` = 1;\";\n                } else if (index == 8) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Booster_Fan` = 1;\";\n                } else if (index == 7) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Exhaust_Fan` = 1;\";\n                }\n                msg.topic += \"UPDATE `Input` SET `Stat` = 1 WHERE `Number` = \" + String(index) + \";\";\n                if(index == 1){\n                    msg.topic += \"UPDATE `information` SET `AutoManual` = '0' WHERE `information`.`ID` = 1;\";\n                }\n                RelayInput[index][\"Stat\"] = 1;\n            } else if (spt[index - 1] == \"1\") {\n                \n                if (index == 4) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Heater_1` = 0;\";\n                } else if (index == 5) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Heater_2` = 0;\";\n                } else if (index == 8) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Booster_Fan` = 0;\";\n                } else if (index == 7) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Exhaust_Fan` = 0;\";\n                }\n                msg.topic += \"UPDATE `Input` SET `Stat` = 0 WHERE `Number` = \" + String(index) + \";\";\n                if(index == 1){\n                    msg.topic += \"UPDATE `information` SET `AutoManual` = '1' WHERE `information`.`ID` = 1;\";\n                }\n                RelayInput[index][\"Stat\"] = 0;\n            }\n        }\n    }\n    flow.set(\"RelayInput\", RelayInput);\n    var RelayOutput = flow.get(\"RelayOutput\");\n    msg.deviceinfo[\"OutputVal\"] = reverseString(hexToBinary2((msg.realdata.substring(10, 12))));\n    if (msg.deviceinfo.OutputVal == \"00000000\") {\n        RelayOutput[0][\"Stat\"] = 1;\n        for (let index = 1; index < RelayOutput.length; index++) {\n            RelayOutput[index][\"Stat\"] = 0;\n        }\n        msg.topic += \"UPDATE `Output` SET `Stat` = 0;\";\n        // msg.topic += \"UPDATE `monitoringdata` SET `Heater_1` = 0;\";\n        // msg.topic += \"UPDATE `monitoringdata` SET `Heater_2` = 0;\";\n        // msg.topic += \"UPDATE `monitoringdata` SET `Booster_Fan` = 0;\";\n        // msg.topic += \"UPDATE `monitoringdata` SET `Exhaust_Fan` = 0;\";\n    } else {\n        RelayOutput[0][\"Stat\"] = 0;\n        var spt = msg.deviceinfo.OutputVal.split(\"\");\n        for (let index = 1; index < spt.length + 1; index++) {\n            if (spt[index - 1] == \"0\") {\n                // if (index == 1) {\n                //     msg.topic += \"UPDATE `monitoringdata` SET `Heater_1` = 0;\";\n                // } else if (index == 2) {\n                //     msg.topic += \"UPDATE `monitoringdata` SET `Heater_2` = 0;\";\n                // } else if (index == 3) {\n                //     msg.topic += \"UPDATE `monitoringdata` SET `Booster_Fan` = 0;\";\n                // } else if (index == 4) {\n                //     msg.topic += \"UPDATE `monitoringdata` SET `Exhaust_Fan` = 0;\";\n                // }\n                msg.topic += \"UPDATE `Output` SET `Stat` = 0 WHERE `Number` = \" + String(index) + \";\";\n                RelayOutput[index][\"Stat\"] = 0;\n            } else if (spt[index - 1] == \"1\") {\n                // if (index == 1) {\n                //     msg.topic += \"UPDATE `monitoringdata` SET `Heater_1` = 1;\";\n                // } else if (index == 2) {\n                //     msg.topic += \"UPDATE `monitoringdata` SET `Heater_2` = 1;\";\n                // } else if (index == 3) {\n                //     msg.topic += \"UPDATE `monitoringdata` SET `Booster_Fan` = 1;\";\n                // } else if (index == 4) {\n                //     msg.topic += \"UPDATE `monitoringdata` SET `Exhaust_Fan` = 1;\";\n                // }\n                msg.topic += \"UPDATE `Output` SET `Stat` = 1 WHERE `Number` = \" + String(index) + \";\";\n                RelayOutput[index][\"Stat\"] = 1;\n            }\n        }\n    }\n    flow.set(\"RelayOutput\", RelayOutput);\n    msg.topic += \"UPDATE `Operation` SET `Output` = \" + String(parseInt(msg.realdata.substring(10, 12), 16)) + \";\";\n}\n\nmsg.topic += \"INSERT INTO `recorddevice`(`epoch`, `networkid`, `devid`, `typeid`, `temp`, `val`) VALUES (\";\nmsg.topic += String(Date.now())+\",\";\nmsg.topic += \"'\" + String(msg.payload[0].networkid) + \"',\";\nmsg.topic += \"'\" + String(msg.payload[0].devid) + \"',\";\nmsg.topic += \"'\" + String(msg.payload[0].networkid) + \"',\";\n// console.log(\"Before : \"+String(msg.realdata.substring(8,10)));\n// console.log(\"After : \"+String(parseInt(msg.realdata.substring(8,10), 16)));\nmsg.topic += String(parseInt(msg.realdata.substring(8,10), 16)) + \",\";\nmsg.topic += String(parseInt(msg.realdata.substring(10,12), 16));\nmsg.topic += \");\";\n\nmsg.topic += \"DELETE FROM `recorddevice` WHERE `epoch` < \" + String(Date.now()-(604800*1000))+\";\";\n\n// }\nreturn msg;\n\nfunction hexToBinary(hexString) {\n    // Parse the hexadecimal string to an integer\n    const intValue = parseInt(hexString, 16);\n\n    // Convert the integer to a binary string\n    let binaryString = intValue.toString(2);\n\n    // Pad the binary string with leading zeros if necessary\n    // Assuming each hex digit should be represented by 4 binary digits\n    const hexLength = hexString.length;\n    const expectedBinaryLength = hexLength * 4;\n    while (binaryString.length < expectedBinaryLength) {\n        binaryString = '0'.concat(binaryString);\n    }\n\n    return binaryString;\n}\n\nfunction decimalToReversedBinary(decimal) {\n    // Convert the decimal number to a binary string\n    let binaryString = decimal.toString(2);\n\n    // Pad the binary string with leading zeros to ensure it has a length of 4 bits\n    while (binaryString.length < 4) {\n        binaryString = '0'.concat(binaryString);\n    }\n\n    // Reverse the binary string\n    // const reversedBinaryString = binaryString.split('').reverse().join('');\n\n    // return reversedBinaryString;\n    return binaryString;\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\n\n\nfunction hexToBinary2(hexString) {\n    // Menghapus karakter spasi jika ada\n    hexString = hexString.replace(/\\s+/g, '');\n    \n    // Memastikan string heksadesimal valid dan tidak lebih dari 2 karakter\n    if (!/^[\\da-fA-F]{1,2}$/.test(hexString)) {\n        throw new Error(\"Invalid hexadecimal string. Input should be 1 or 2 hex characters.\");\n    }\n\n    // Mengonversi string heksadesimal menjadi biner dengan panjang 8 bit\n    let binaryString = parseInt(hexString, 16).toString(2).padStart(8, '0');\n\n    return binaryString;\n}\n\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 260,
        "wires": [
            [
                "d9c49b1accbf22f2"
            ]
        ]
    },
    {
        "id": "d9c49b1accbf22f2",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "66a3c62460ec38fc",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "40579769d5e15768",
            "9b0d96a526b14c55",
            "3521bc52fbbb1103",
            "e0b478d3126d5602"
        ],
        "x": 815,
        "y": 260,
        "wires": []
    },
    {
        "id": "3c5024fca4ab3e26",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "g": "7d1dd2a6ee9e18ec",
        "name": " ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 400,
        "wires": [
            [
                "826650d27f83e5b3"
            ]
        ]
    },
    {
        "id": "826650d27f83e5b3",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "7d1dd2a6ee9e18ec",
        "name": " Check",
        "func": "var RelayInput = flow.get(\"RelayInput\");\nvar RelayInputIndoor = flow.get(\"RelayInputIndoor\");\nvar RelayOutput = flow.get(\"RelayOutput\");\nvar RelayOutputIndoor = flow.get(\"RelayOutputIndoor\");\nvar RunningTime = secondsToHumanReadable(Math.round((Date.now()-flow.get(\"InitTime\"))/1000));\nfor (let index = 0; index < RelayInputIndoor.length; index++) {\n    if(RelayInputIndoor[index].keterangan == \"StatusIndoor\" && RelayInputIndoor[index].Stat == 1){\n        msg[\"StatusIndoor\"] = true;\n    }else if(RelayInputIndoor[index].keterangan == \"StatusIndoor\" && RelayInputIndoor[index].Stat == 0){\n        msg[\"StatusIndoor\"] = false;\n    }\n    if(RelayInputIndoor[index].keterangan == \"StatusOutdoor\" && RelayInputIndoor[index].Stat == 1){\n        msg[\"StatusOutdoor\"] = true;\n    }else if(RelayInputIndoor[index].keterangan == \"StatusOutdoor\" && RelayInputIndoor[index].Stat == 0){\n        msg[\"StatusOutdoor\"] = false;\n    }\n}\nfor (let index = 0; index < RelayInput.length; index++) {\n    if (RelayInput[index].keterangan == \"BoosterFan\" && RelayInput[index].Stat == 1){\n        msg[\"BoosterFan\"] = true;\n    } else if (RelayInput[index].keterangan == \"BoosterFan\" && RelayInput[index].Stat == 0){\n        msg[\"BoosterFan\"] = false;\n    }\n    if (RelayInput[index].keterangan == \"EF\" && RelayInput[index].Stat == 1){\n        msg[\"EF\"] = true;\n    } else if (RelayInput[index].keterangan == \"EF\" && RelayInput[index].Stat == 0){\n        msg[\"EF\"] = false;\n    }\n}\nmsg.SystemStatus = flow.get(\"SystemStatus\");\nif((msg.StatusIndoor && msg.BoosterFan && msg.EF) || (flow.get(\"SystemStatus\") == \"OFF\" && flow.get(\"cmdauto\") == \"Shutdown\") || (flow.get(\"SystemStatus\") == \"ON\" && flow.get(\"autocmd\") != \"None\")){\n        msg[\"StartLoops\"] = true;\n        msg.payload = \"O-RUN-O(\"+String(RunningTime)+\")\";\n        \n        return msg;\n    }else{  \n        msg[\"StartLoops\"] = false;\n        flow.set(\"cmdauto\",\"None\");\n    }\nmsg.payload = \"-IDLE- (\"+String(RunningTime)+\")\";\n\nreturn msg;\n\nfunction secondsToHumanReadable(seconds) {\n    const units = [\n        { label: 'year', value: 60 * 60 * 24 * 365 },  // Approximate, not accounting for leap years\n        { label: 'month', value: 60 * 60 * 24 * 30 },  // Approximate\n        { label: 'day', value: 60 * 60 * 24 },\n        { label: 'hour', value: 60 * 60 },\n        { label: 'minute', value: 60 },\n        { label: 'second', value: 1 }\n    ];\n\n    const result = [];\n\n    for (const unit of units) {\n        const unitValue = Math.floor(seconds / unit.value);\n        if (unitValue > 0) {\n            result.push(`${unitValue} ${unit.label}${unitValue > 1 ? 's' : ''}`);\n            seconds -= unitValue * unit.value;\n        }\n    }\n\n    return result.length > 0 ? result.join(' ') : '0 seconds';\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 400,
        "wires": [
            [
                "4ad5455f7813966e",
                "cb92f4b10867c13d",
                "6571aa4c32464225",
                "f4f0bb734a5396dc",
                "b65550984240d843",
                "a02176000f5891ab"
            ]
        ]
    },
    {
        "id": "cb92f4b10867c13d",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "7d1dd2a6ee9e18ec",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 370,
        "y": 580,
        "wires": []
    },
    {
        "id": "4ad5455f7813966e",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "7d1dd2a6ee9e18ec",
        "name": " ",
        "property": "StartLoops",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 400,
        "wires": [
            [
                "f84aa71efce8693d",
                "a43b5e8f1d19af0a"
            ],
            [
                "550cacf5e68a5a33"
            ]
        ]
    },
    {
        "id": "550cacf5e68a5a33",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "7d1dd2a6ee9e18ec",
        "name": " ",
        "func": "msg.reset = true;\nflow.set(\"StartLoops\",false);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 400,
        "wires": [
            [
                "f2a52ec4b04f228c"
            ]
        ]
    },
    {
        "id": "f2a52ec4b04f228c",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "7d1dd2a6ee9e18ec",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "dfe504a3836c532b"
        ],
        "x": 575,
        "y": 400,
        "wires": []
    },
    {
        "id": "dfe504a3836c532b",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "7d1dd2a6ee9e18ec",
        "name": "link in 4",
        "links": [
            "f2a52ec4b04f228c"
        ],
        "x": 405,
        "y": 360,
        "wires": [
            [
                "f84aa71efce8693d"
            ]
        ]
    },
    {
        "id": "8cec97bc9bb44481",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": " ",
        "func": "msg.cmd = flow.get(\"cmdauto\");\nvar BatasAtasRH = 58;\nvar BatasBawahRH = 52;\nvar RelayInput = flow.get(\"RelayInput\");\nvar RelayOutput = flow.get(\"RelayOutput\");\nvar RelayInputIndoor = flow.get(\"RelayInputIndoor\");\nvar RelayOutputIndoor = flow.get(\"RelayOutputIndoor\");\nfor (let index = 0; index < RelayInputIndoor.length; index++) {\n    if(RelayInputIndoor[index].keterangan == \"StatusIndoor\" && RelayInputIndoor[index].Stat == 1){\n        msg[\"StatusIndoor\"] = true;\n    }else if(RelayInputIndoor[index].keterangan == \"StatusIndoor\" && RelayInputIndoor[index].Stat == 0){\n        msg[\"StatusIndoor\"] = false;\n    }\n    if(RelayInputIndoor[index].keterangan == \"StatusOutdoor\" && RelayInputIndoor[index].Stat == 1){\n        msg[\"StatusOutdoor\"] = true;\n    }else if(RelayInputIndoor[index].keterangan == \"StatusOutdoor\" && RelayInputIndoor[index].Stat == 0){\n        msg[\"StatusOutdoor\"] = false;\n    }\n}\n//----------------------------------------------------\n// Definisikan parameter PID\nvar Kp = 0.5; // Gain proporsional\nvar Ki = 0.2; // Gain integral\nvar Kd = 0.1; // Gain derivatif\nvar SetPoint = flow.get(\"SetValueRH\");\n\nvar errorPrev = 0;\nvar integral = 0;\n//----------------------------------------------------\n// console.log(msg.cmd);\nif(msg.cmd == \"Init\" || msg.cmd == \"None\"){\n    msg.cmd = \"MonitorTemp\";\n    flow.set(\"cmdauto\",msg.cmd);\n}else if(msg.cmd == \"MonitorTemp\"){\n    if(flow.get(\"CMPCOMP\")==false){\n        flow.set(\"AutoRequest\",true);\n    }\n    \n    if ((Date.now() - flow.get(\"Temp_Cathlab\")[1]) / 1000 < 60 && (Date.now() - flow.get(\"RH_Cathlab\")[1])/1000< 60){\n        var RH_Cathlab = flow.get(\"RH_Cathlab\")[0];\n        console.log(\"RH_Cathlab : \"+String(RH_Cathlab)+\", Setpoint : \"+String(SetPoint));        \n        if (RH_Cathlab >= (SetPoint+2)) {\n            console.log(\"Trigger\");\n            \n            msg.cmd = \"OnEH\"+\" =[EH1]\";\n            flow.set(\"AutoRequest\",false);\n            \n        }\n    }\n}else if(msg.cmd == \"OnEH\"+\" =[EH1]\"){\n    if(!msg.StatusOutdoor){\n        flow.set(\"AutoRequest\",true);\n    }else{\n        flow.set(\"AutoRequest\",false);\n    }\n    for (let index = 0; index < RelayOutput.length; index++) {\n\n        if(RelayOutput[index].keterangan == \"EH1\" && RelayOutput[index].Stat == 1){\n            msg.cmd = \"Waiting\";\n            \n            var dur = 4*60*60*1000;//kontrolPID(SetPoint,RH_Cathlab)*(-1)*60*1000;\n            // if(dur<0){\n            //     return msg;\n            // }\n            flow.set(\"DurationEH\",[Math.round(4*60*60*1000),Date.now()]);\n            msg.delay = flow.get(\"DurationEH\")[0];\n            console.log(String(dur));\n        }\n    }\n} else if (msg.cmd == \"Waiting Force Done\"){\n    msg.cmd = \"OffEH\";\n    flow.set(\"AutoRequest\",false);\n    offEH();\n} else if(msg.cmd.substring(0,7) == \"Waiting\"){\n    var timeRemaining = Math.round(((flow.get(\"DurationEH\")[0]+flow.get(\"DurationEH\")[1])-Date.now())/1000);\n    msg.cmd = \"Waiting = \"+String(epochtostr(timeRemaining));\n    var RH_Cathlab = flow.get(\"RH_Cathlab\")[0];\n    console.log(\"RH_Cathlab : \"+String(RH_Cathlab)+\", SetPoint : \"+String(SetPoint));\n    if (RH_Cathlab < (SetPoint-5)){\n        msg.cmd = \"Waiting Force Done\";\n        msg.reset = true;\n        flow.set(\"AutoRequest\",false);\n    }\n    console.log(\"Timeremaining : \"+String(timeRemaining));\n    console.log(\"DurationEH : \"+String((Math.round((flow.get(\"DurationEH\")[0])/1000)/2)));\n    if(timeRemaining <= (Math.round((flow.get(\"DurationEH\")[0])/1000)/2)){\n        for (let index = 0; index < RelayOutput.length; index++) {\n            if(RelayOutput[index].keterangan == \"EH2\" && RelayOutput[index].Stat == 0){\n                msg.cmd += \" =[EH2]\";\n                if(!msg.StatusOutdoor){\n                    flow.set(\"AutoRequest\",true);\n                }else{\n                    flow.set(\"AutoRequest\",false);\n                }\n                msg.EH2 = false;\n            }else if(RelayOutput[index].keterangan == \"EH2\" && RelayOutput[index].Stat == 1){\n                msg.EH2 = true;\n                if(flow.get(\"CMDCOMP\") == false){\n                    flow.set(\"AutoRequest\",true);\n                }\n            }else{\n                msg.EH2 = undefined;\n            }\n        }\n    }else{\n        if(flow.get(\"CMDCOMP\")==false){\n            flow.set(\"AutoRequest\",true);\n        }\n    }\n} else if(msg.cmd == \"Timeout\"){\n    msg.cmd = \"OffEH\";\n    flow.set(\"AutoRequest\",false);\n    offEH();\n    \n} else if(msg.cmd == \"OffEH\"){\n    msg.cmd = \"OffEH\";\n    flow.set(\"AutoRequest\",false);\n    offEH();\n    \n}else if(msg.cmd == \"Waiting Force Done\"){\n    msg.cmd = \"OffEH\";\n    flow.set(\"AutoRequest\",false);\n    offEH();\n}else if(msg.cmd == \"Shutdown\"){\n    flow.set(\"AutoRequest\",false);\n}\nvar RH_Cathlab = flow.get(\"RH_Cathlab\")[0];\nif(RH_Cathlab >= (SetPoint+5)){\n    flow.set(\"bypassEH\",true);\n}else{\n    flow.set(\"bypassEH\",false);\n}\nmsg[\"bypass\"] = flow.get(\"bypassEH\");\nflow.set(\"cmdauto\", msg.cmd);\nreturn msg;\n\nfunction offEH(){\n    msg.statusEH1 = false;\n    msg.statusEH2 = false;\n    for (let index = 0; index < RelayOutput.length; index++) {\n        if(RelayOutput[index].keterangan == \"EH1\" && RelayOutput[index].Stat == 0){\n            msg.statusEH1 = true;\n        }else if(RelayOutput[index].keterangan == \"EH2\" && RelayOutput[index].Stat == 0){\n            msg.statusEH2 = true;\n        }\n    }\n    if(msg.statusEH1&&msg.statusEH2){\n        msg.cmd = \"MonitorTemp\";\n    }\n}\nfunction kontrolPID(nilaiTarget, nilaiSekarang) {\n    // Hitung error saat ini\n    const error = nilaiTarget - nilaiSekarang;\n\n    // Hitung komponen PID\n    const proporsional = Kp * error;\n    integral += error;\n    const integralComp = Ki * integral;\n    const derivative = Kd * (error - errorPrev);\n\n    // Hitung output PID\n    const output = proporsional + integralComp + derivative;\n\n    // Simpan error saat ini untuk penggunaan di iterasi selanjutnya\n    errorPrev = error;\n\n    return output;\n}\nfunction epochtostr(seconds) {\n    const units = [\n        { label: 'year', value: 60 * 60 * 24 * 365 },  // Approximate, not accounting for leap years\n        { label: 'month', value: 60 * 60 * 24 * 30 },  // Approximate\n        { label: 'day', value: 60 * 60 * 24 },\n        { label: 'hour', value: 60 * 60 },\n        { label: 'minute', value: 60 },\n        { label: 'second', value: 1 }\n    ];\n\n    const result = [];\n\n    for (const unit of units) {\n        const unitValue = Math.floor(seconds / unit.value);\n        if (unitValue > 0) {\n            result.push(`${unitValue} ${unit.label}${unitValue > 1 ? 's' : ''}`);\n            seconds -= unitValue * unit.value;\n        }\n    }\n\n    return result.length > 0 ? result.join(' ') : '0 seconds';\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 760,
        "wires": [
            [
                "1c9c4f79bd4b8b7f",
                "a2ad4a6af57cb887"
            ]
        ]
    },
    {
        "id": "650bb1b60b09d884",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": "link in 6",
        "links": [
            "3a08649af6568a27"
        ],
        "x": 105,
        "y": 760,
        "wires": [
            [
                "8cec97bc9bb44481"
            ]
        ]
    },
    {
        "id": "1c9c4f79bd4b8b7f",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "9b978c2fb92ebf73",
            "d3048506e82c8e4d",
            "0db22b2c09d13099",
            "ee118fffde7af227",
            "9c3b50249e5ea8a0"
        ],
        "x": 315,
        "y": 820,
        "wires": []
    },
    {
        "id": "6d4d07e485589e43",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": "link in 7",
        "links": [
            "70cde41499d17755"
        ],
        "x": 85,
        "y": 680,
        "wires": [
            [
                "f86183f3eae2b244"
            ]
        ]
    },
    {
        "id": "3a08649af6568a27",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "650bb1b60b09d884"
        ],
        "x": 545,
        "y": 680,
        "wires": []
    },
    {
        "id": "71f3a6de4ea88b75",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 350,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "92a8ad6404cd0f8d",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "fe812d9f95dae0df",
        "name": "Request Temp",
        "func": "msg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'Temp/RH,CathLab';\";\nflow.set(\"AutoRequest\",true);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "a2ad4a6af57cb887",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": " ",
        "property": "cmd",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "MonitorTemp",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "=[EH",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "Waiting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OffEH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Shutdown",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 350,
        "y": 760,
        "wires": [
            [
                "55ad6968a735410f"
            ],
            [
                "64929df4bdfa9390"
            ],
            [
                "0529f7c8d19c391b"
            ],
            [
                "59c7f26baa140b47"
            ],
            [
                "50869a5d0780eee9"
            ]
        ]
    },
    {
        "id": "d35cdff0ec35f4f4",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "fe812d9f95dae0df",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "20",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 890,
        "y": 580,
        "wires": [
            [
                "92a8ad6404cd0f8d"
            ]
        ]
    },
    {
        "id": "5a3b1d85aa366fe8",
        "type": "mysql",
        "z": "35dfe99d7f6420b6",
        "g": "fe812d9f95dae0df",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1190,
        "y": 580,
        "wires": [
            [
                "3bcef0b238056601"
            ]
        ]
    },
    {
        "id": "3bcef0b238056601",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "fe812d9f95dae0df",
        "name": "Requesting",
        "func": "var d = msg.payload[0];\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"00\";\ncmd += \"00000000\";\nmsg.payload = cmd;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 580,
        "wires": [
            [
                "e90e6ab13b355933"
            ]
        ]
    },
    {
        "id": "fa9a9584cad026bf",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "423ba8e3802cd15a",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "b31d076d9b9d8385"
        ],
        "x": 1535,
        "y": 720,
        "wires": []
    },
    {
        "id": "a43b5e8f1d19af0a",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "7d1dd2a6ee9e18ec",
        "name": " ",
        "func": "\nflow.set(\"StartLoops\",true);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "f4f0bb734a5396dc",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "7d1dd2a6ee9e18ec",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "d1b6b08cc3341b76",
            "534824189970c438",
            "cb4a60666f5945d3",
            "f8d6128a04b789e0"
        ],
        "x": 335,
        "y": 360,
        "wires": []
    },
    {
        "id": "d1b6b08cc3341b76",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "bef7e035a838dff2",
        "name": "link in 8",
        "links": [
            "f4f0bb734a5396dc"
        ],
        "x": 1205,
        "y": 1500,
        "wires": [
            [
                "c8c755d5e3ae6b5f",
                "f796ebeda3535bfe"
            ]
        ]
    },
    {
        "id": "c8c755d5e3ae6b5f",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "bef7e035a838dff2",
        "name": " ",
        "func": "var d = [];\nd.push(flow.get(\"Temp_Cathlab\"));\nd.push(flow.get(\"RH_Cathlab\"));\nd.push(flow.get(\"Temp_Machine\"));\nd.push(flow.get(\"RH_Machine\"));\nd.push(flow.get(\"Pre_Filter\"));\nd.push(flow.get(\"HEPA_Filter\"));\nd.push(flow.get(\"DurationEH\"));\nd.push(flow.get(\"RelayInput\"));\nd.push(flow.get(\"RelayOutput\"));\nmsg.payload = d;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1500,
        "wires": [
            [
                "583dc12c0f72e954",
                "d294670cd3cf1dbe",
                "4058a65ad1074634",
                "b12e7514d20d8552",
                "809ea5f21a341bde",
                "8f850c6b3076e30e",
                "ae5f724c21cb1d27",
                "334b14793f8fd5f8"
            ]
        ]
    },
    {
        "id": "d294670cd3cf1dbe",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "bef7e035a838dff2",
        "name": " TempCathLab",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[0]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1500,
        "y": 1380,
        "wires": []
    },
    {
        "id": "4058a65ad1074634",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "bef7e035a838dff2",
        "name": "RHCathLab",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[1]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1490,
        "y": 1440,
        "wires": []
    },
    {
        "id": "b12e7514d20d8552",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "bef7e035a838dff2",
        "name": " TempMachine",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[2]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1500,
        "y": 1500,
        "wires": []
    },
    {
        "id": "809ea5f21a341bde",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "bef7e035a838dff2",
        "name": "RHMachine",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[3]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1490,
        "y": 1560,
        "wires": []
    },
    {
        "id": "8f850c6b3076e30e",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "bef7e035a838dff2",
        "name": " Pre_Filter",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[4]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1480,
        "y": 1620,
        "wires": []
    },
    {
        "id": "ae5f724c21cb1d27",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "bef7e035a838dff2",
        "name": " HEPA_Filter",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[5]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1490,
        "y": 1680,
        "wires": []
    },
    {
        "id": "db96c0e43a3591ec",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": " ",
        "property": "loops",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 330,
        "y": 680,
        "wires": [
            [
                "56439a0f6a07f97e"
            ]
        ]
    },
    {
        "id": "b4d1305ac807533a",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "cmd",
        "targetType": "msg",
        "statusVal": "cmd",
        "statusType": "auto",
        "x": 350,
        "y": 900,
        "wires": []
    },
    {
        "id": "f796ebeda3535bfe",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "bef7e035a838dff2",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1290,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "024b3889c6059068",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "423ba8e3802cd15a",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "15",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 900,
        "y": 740,
        "wires": [
            [
                "ab4b02ab15366e5e"
            ]
        ]
    },
    {
        "id": "ab4b02ab15366e5e",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "423ba8e3802cd15a",
        "name": "Turn On EH",
        "func": "msg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'RelayOutput';\";\nmsg.topic += \"SELECT * FROM `Output` WHERE `keterangan` = 'EH1' OR `keterangan` = 'EH2';\";\nmsg.topic += \"SELECT * FROM `Operation`;\";\nmsg.source = \"ONEH\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 740,
        "wires": [
            [
                "36f72d88e2ed027b"
            ]
        ]
    },
    {
        "id": "36f72d88e2ed027b",
        "type": "mysql",
        "z": "35dfe99d7f6420b6",
        "g": "423ba8e3802cd15a",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1190,
        "y": 740,
        "wires": [
            [
                "65ac32e2038d33fa"
            ]
        ]
    },
    {
        "id": "65ac32e2038d33fa",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "423ba8e3802cd15a",
        "name": " On1",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length - 2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.payload[2][0].Output));\nvar spt = binarycurrent.split(\"\");\nif (binarycurrent[msg.payload[1][0].Number - 1] == \"0\" && msg.cmd.includes(\"=[EH1]\")) {\n    \n    spt[msg.payload[1][0].Number - 1] = \"1\";\n    binarycurrent = spt.join(\"\");\n    if(flow.get(\"RelayOutput\")[msg.payload[1][0].Number].Stat == 0){\n        msg.statusEH1 = true;\n        \n    }else{\n        msg.statusEH1 = false;\n    }\n    \n    msg.payload[2][0][\"Output\"] = parseInt(String(msg.payload[2][0].Output)) + parseInt(String(msg.payload[1][0].Dec));\n    \n}\nif (binarycurrent[msg.payload[1][1].Number - 1] == \"0\" && msg.cmd.includes(\"=[EH2]\")){\n    msg.statusEH2 = true;\n}\n\nmsg.numberOutput = msg.payload[2][0].Output;\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\" + \"000\" + \"D\";//String(dec2hex(hex));\nmsg.payload = cmd;\nif(!msg.StatusOutdoor && !flow.get(\"bypassEH\")){\n    msg.statusEH1 = false;\n    msg.statusEH2 = false;\n}\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 740,
        "wires": [
            [
                "3f50b7793c442648",
                "b7198da4620d700c"
            ]
        ]
    },
    {
        "id": "aa050a07e2df3450",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "04c6df45a6ea8a79",
        "name": "Request Temp",
        "func": "msg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'Temp/RH,CathLab';\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "22feb2bbe093bbbf",
        "type": "mysql",
        "z": "35dfe99d7f6420b6",
        "g": "04c6df45a6ea8a79",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 470,
        "y": 1000,
        "wires": [
            [
                "7b18f167d9a725b7"
            ]
        ]
    },
    {
        "id": "7b18f167d9a725b7",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "04c6df45a6ea8a79",
        "name": "Requesting",
        "func": "var d = msg.payload[0];\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"00\";\ncmd += \"00000000\";\nmsg.payload = cmd;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1000,
        "wires": [
            [
                "014bc73c910a6847"
            ]
        ]
    },
    {
        "id": "15a108d6b766d00b",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "04c6df45a6ea8a79",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "b1cd7cdfcde6e8e2"
        ],
        "x": 415,
        "y": 1040,
        "wires": []
    },
    {
        "id": "96a27d9cb6526431",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "04c6df45a6ea8a79",
        "name": "Reset",
        "func": "msg.reset = true;\nmsg.cmd = \"Timeout\";\nflow.set(\"cmdauto\",msg.cmd);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1040,
        "wires": [
            [
                "15a108d6b766d00b"
            ]
        ]
    },
    {
        "id": "b1cd7cdfcde6e8e2",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "04c6df45a6ea8a79",
        "name": "link in 9",
        "links": [
            "15a108d6b766d00b"
        ],
        "x": 75,
        "y": 1000,
        "wires": [
            [
                "6df7306103bc7e97"
            ]
        ]
    },
    {
        "id": "334b14793f8fd5f8",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "bef7e035a838dff2",
        "name": "DurationEH",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[6]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1490,
        "y": 1740,
        "wires": []
    },
    {
        "id": "4bac294798b07d31",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "ba1fc06f41c5063d",
        "name": "Receive",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 180,
        "y": 120,
        "wires": []
    },
    {
        "id": "751ddc55c29a9154",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "76ea4920382dc0ac",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "15",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 910,
        "y": 900,
        "wires": [
            [
                "aa627311b972a86d"
            ]
        ]
    },
    {
        "id": "aa627311b972a86d",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "76ea4920382dc0ac",
        "name": "Turn Off EH",
        "func": "msg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'RelayOutput';\";\nmsg.topic += \"SELECT * FROM `Output` WHERE `keterangan` = 'EH1' OR `keterangan` = 'EH2';\";\nmsg.topic += \"SELECT * FROM `Operation`;\";\nmsg.source = \"OFFEH\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 900,
        "wires": [
            [
                "84fab7bc9e61a7eb"
            ]
        ]
    },
    {
        "id": "84fab7bc9e61a7eb",
        "type": "mysql",
        "z": "35dfe99d7f6420b6",
        "g": "76ea4920382dc0ac",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1210,
        "y": 900,
        "wires": [
            [
                "4d1ce3eac36c2c50"
            ]
        ]
    },
    {
        "id": "4d1ce3eac36c2c50",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "76ea4920382dc0ac",
        "name": " Off1",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\nvar binarycurrent = reverseString(decToBinary(msg.payload[2][0].Output));\nvar spt = binarycurrent.split(\"\");\nif(binarycurrent[msg.payload[1][0].Number-1] == \"1\"){\n    spt[msg.payload[1][0].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if(flow.get(\"RelayOutput\")[msg.payload[1][0].Number].Stat == 1){\n        msg.statusEH1 = true;\n    }else{\n        msg.statusEH1 = false;\n    }\n    msg.payload[2][0][\"Output\"] = parseInt(String(msg.payload[2][0].Output)) -  parseInt(String(msg.payload[1][0].Dec));\n}\nif(binarycurrent[msg.payload[1][1].Number-1] == \"1\"){\n    msg.statusEH2 = true;\n}\nmsg.numberOutput = msg.payload[2][0].Output;\nvar hex = binaryToHex(reverseString(binarycurrent));\nmsg.statusEH1 = true;\ncmd += \"0000\"+\"000\"+\"C\"//String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 900,
        "wires": [
            [
                "d66ed628f2a1fd33"
            ]
        ]
    },
    {
        "id": "3f50b7793c442648",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "423ba8e3802cd15a",
        "name": " ",
        "property": "statusEH1",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1440,
        "y": 720,
        "wires": [
            [
                "fa9a9584cad026bf"
            ]
        ]
    },
    {
        "id": "d66ed628f2a1fd33",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "76ea4920382dc0ac",
        "name": " ",
        "property": "statusEH1",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1450,
        "y": 880,
        "wires": [
            [
                "576db68e46b2c2d3"
            ]
        ]
    },
    {
        "id": "245deedf3b1b3d4f",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "76ea4920382dc0ac",
        "name": " ",
        "property": "statusEH2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1450,
        "y": 920,
        "wires": [
            [
                "b340267d5aff4878"
            ]
        ]
    },
    {
        "id": "aed4f0a798ea78ea",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "76ea4920382dc0ac",
        "name": " Off2",
        "func": "msg.payload = msg.resultsql;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\nvar binarycurrent = reverseString(decToBinary(msg.numberOutput));\nvar spt = binarycurrent.split(\"\");\nif (binarycurrent[msg.payload[1][1].Number -1] == \"1\"){\n    \n    spt[msg.payload[1][1].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if (flow.get(\"RelayOutput\")[msg.payload[1][1].Number].Stat == 1){\n        msg.statusEH2 = true;\n    }else{\n        msg.statusEH2 = false;\n    }\n   msg[\"numberOutput\"] = parseInt(String(msg.numberOutput)) -  parseInt(String(msg.payload[1][1].Dec));\n}\n\n\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 920,
        "wires": [
            [
                "4889f66bfc5cda72"
            ]
        ]
    },
    {
        "id": "b340267d5aff4878",
        "type": "delay",
        "z": "35dfe99d7f6420b6",
        "g": "76ea4920382dc0ac",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1600,
        "y": 920,
        "wires": [
            [
                "aed4f0a798ea78ea"
            ]
        ]
    },
    {
        "id": "be565ed34cee00cb",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "76ea4920382dc0ac",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "b31d076d9b9d8385"
        ],
        "x": 1935,
        "y": 920,
        "wires": []
    },
    {
        "id": "e90e6ab13b355933",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "fe812d9f95dae0df",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "b31d076d9b9d8385"
        ],
        "x": 1435,
        "y": 580,
        "wires": []
    },
    {
        "id": "014bc73c910a6847",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "04c6df45a6ea8a79",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "b31d076d9b9d8385"
        ],
        "x": 715,
        "y": 1000,
        "wires": []
    },
    {
        "id": "576db68e46b2c2d3",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "76ea4920382dc0ac",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "b31d076d9b9d8385"
        ],
        "x": 1555,
        "y": 880,
        "wires": []
    },
    {
        "id": "ab46deab7a6aecf8",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "8865e1ac50e646ab",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 920,
        "y": 120,
        "wires": []
    },
    {
        "id": "4889f66bfc5cda72",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "76ea4920382dc0ac",
        "name": " ",
        "property": "statusEH2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1850,
        "y": 920,
        "wires": [
            [
                "be565ed34cee00cb"
            ]
        ]
    },
    {
        "id": "b7198da4620d700c",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "423ba8e3802cd15a",
        "name": " ",
        "property": "statusEH2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1440,
        "y": 760,
        "wires": [
            [
                "a33a8c458af8f186"
            ]
        ]
    },
    {
        "id": "a33a8c458af8f186",
        "type": "delay",
        "z": "35dfe99d7f6420b6",
        "g": "423ba8e3802cd15a",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1580,
        "y": 760,
        "wires": [
            [
                "085e2fbfa55ababb"
            ]
        ]
    },
    {
        "id": "085e2fbfa55ababb",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "423ba8e3802cd15a",
        "name": "On2",
        "func": "msg.payload = msg.resultsql;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.numberOutput));\nvar spt = binarycurrent.split(\"\");\nif(binarycurrent[msg.payload[1][1].Number-1] == \"0\"){\n    \n    spt[msg.payload[1][1].Number - 1] = \"1\";\n    binarycurrent = spt.join(\"\");\n    if (flow.get(\"RelayOutput\")[msg.payload[1][1].Number].Stat == 0){\n        msg.statusEH2 = true;\n    }else{\n        msg.statusEH2 = false;\n    }\n   msg[\"numberOutput\"] = parseInt(String(msg.numberOutput)) +  parseInt(String(msg.payload[1][1].Dec));\n}\n\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+\"E\";//String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 760,
        "wires": [
            [
                "a6151a9840fd1e39"
            ]
        ]
    },
    {
        "id": "a6151a9840fd1e39",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "423ba8e3802cd15a",
        "name": " ",
        "property": "statusEH2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1830,
        "y": 760,
        "wires": [
            [
                "b9e32ae2551a393a"
            ]
        ]
    },
    {
        "id": "b9e32ae2551a393a",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "423ba8e3802cd15a",
        "name": "link out 16",
        "mode": "link",
        "links": [
            "b31d076d9b9d8385"
        ],
        "x": 1915,
        "y": 760,
        "wires": []
    },
    {
        "id": "b5ae4594ff1f5495",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "ba1fc06f41c5063d",
        "name": "CMD",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 670,
        "y": 120,
        "wires": []
    },
    {
        "id": "583dc12c0f72e954",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "bef7e035a838dff2",
        "name": "link out 19",
        "mode": "link",
        "links": [
            "4732783a5efdb82b",
            "5c3456f46b6e55d4"
        ],
        "x": 1435,
        "y": 1340,
        "wires": []
    },
    {
        "id": "4732783a5efdb82b",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "6c3d1d9d1f7e80a9",
        "name": "link in 10",
        "links": [
            "583dc12c0f72e954"
        ],
        "x": 1685,
        "y": 1400,
        "wires": [
            [
                "c7e2a20058378694",
                "3fc3c18f9b398b3e",
                "9a3da4cdffb54296",
                "68970612fa093084"
            ]
        ]
    },
    {
        "id": "c7e2a20058378694",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "6c3d1d9d1f7e80a9",
        "name": "EH1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[8][1].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1790,
        "y": 1340,
        "wires": []
    },
    {
        "id": "3fc3c18f9b398b3e",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "6c3d1d9d1f7e80a9",
        "name": "EH2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[8][2].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1790,
        "y": 1380,
        "wires": []
    },
    {
        "id": "c5b76c5a304b91a1",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "04c6df45a6ea8a79",
        "name": "Waiting",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "str",
        "duration": "1",
        "extend": false,
        "overrideDelay": true,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 180,
        "y": 1040,
        "wires": [
            [
                "96a27d9cb6526431"
            ]
        ]
    },
    {
        "id": "f9ac6ede65849a0d",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "g": "9f263b41872dc1ad",
        "name": " ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 870,
        "y": 1340,
        "wires": [
            [
                "73da267dd5067a33"
            ]
        ]
    },
    {
        "id": "abe1975f1d96cfc2",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "9f263b41872dc1ad",
        "name": "2 Bit",
        "func": "var arr = [];\narr.push(\"04030100000000\"); // 0000 0000\narr.push(\"04030100000002\"); // 0100 0000\narr.push(\"0403010000000A\"); // 0101 0000\narr.push(\"0403010000002A\"); // 0101 0100\narr.push(\"040301000000AA\"); // 0101 0101\narr.push(\"040301000000A8\"); // 0001 0101\narr.push(\"040301000000A0\"); // 0000 0101\narr.push(\"04030100000080\"); // 0000 0001\narr.push(\"04030100000000\"); // 0000 0000\nmsg.payload = arr;\nmsg[\"delay\"] = 10000;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1420,
        "wires": [
            [
                "51bceec6bfce4573"
            ]
        ]
    },
    {
        "id": "17d48941d16c9bc9",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "9f263b41872dc1ad",
        "name": "1 Bit",
        "func": "var arr = [];\narr.push(\"04020100000000\"); // 0000 \narr.push(\"04020100000001\"); // 1000 \narr.push(\"04020100000003\"); // 1100 \narr.push(\"04020100000007\"); // 1110 \narr.push(\"0402010000000F\"); // 1111 \narr.push(\"04020100000007\"); // 0111 \narr.push(\"04020100000003\"); // 0011 \narr.push(\"04020100000001\"); // 0001 \narr.push(\"04020100000000\"); // 0000 \nmsg.payload = arr;\nmsg[\"delay\"] = 10000;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1460,
        "wires": [
            [
                "51bceec6bfce4573"
            ]
        ]
    },
    {
        "id": "aa90299a70093404",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "g": "9f263b41872dc1ad",
        "name": " ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 870,
        "y": 1380,
        "wires": [
            [
                "e68c1745d051024b"
            ]
        ]
    },
    {
        "id": "9a3da4cdffb54296",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "6c3d1d9d1f7e80a9",
        "name": "Booster",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[8][3].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1800,
        "y": 1420,
        "wires": []
    },
    {
        "id": "68970612fa093084",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "6c3d1d9d1f7e80a9",
        "name": "EF",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[8][4].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1790,
        "y": 1460,
        "wires": []
    },
    {
        "id": "5c3456f46b6e55d4",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "5fab023e8ba78059",
        "name": "link in 11",
        "links": [
            "583dc12c0f72e954"
        ],
        "x": 1965,
        "y": 1400,
        "wires": [
            [
                "4715082a03b2f716",
                "36848ed4c8e8edfb",
                "78994b146c4423b3",
                "8f0ccb9a9248044d"
            ]
        ]
    },
    {
        "id": "4715082a03b2f716",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "5fab023e8ba78059",
        "name": "EH1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[7][4].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2070,
        "y": 1340,
        "wires": []
    },
    {
        "id": "36848ed4c8e8edfb",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "5fab023e8ba78059",
        "name": "EH2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[7][5].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2070,
        "y": 1380,
        "wires": []
    },
    {
        "id": "78994b146c4423b3",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "5fab023e8ba78059",
        "name": "Booster",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[7][6].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2080,
        "y": 1420,
        "wires": []
    },
    {
        "id": "8f0ccb9a9248044d",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "5fab023e8ba78059",
        "name": "EF",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[7][8].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2070,
        "y": 1460,
        "wires": []
    },
    {
        "id": "51bceec6bfce4573",
        "type": "subflow:e9b71a55.b25c68",
        "z": "35dfe99d7f6420b6",
        "g": "9f263b41872dc1ad",
        "name": "",
        "x": 1010,
        "y": 1440,
        "wires": [
            [
                "b8b325a363cf4e6a"
            ],
            []
        ]
    },
    {
        "id": "d5614cd9724e215b",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "g": "7d1dd2a6ee9e18ec",
        "name": " ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 440,
        "wires": [
            [
                "826650d27f83e5b3"
            ]
        ]
    },
    {
        "id": "7143a0d19d341e42",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "65bb3a57f4d66aff",
        "name": "link in 12",
        "links": [
            "650b10bde6fcf31c"
        ],
        "x": 1285,
        "y": 240,
        "wires": [
            [
                "5780cbaf51041dfd"
            ]
        ]
    },
    {
        "id": "5780cbaf51041dfd",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "65bb3a57f4d66aff",
        "name": " ",
        "property": "payload.value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1370,
        "y": 240,
        "wires": [
            [
                "a2b5fdc360817acc"
            ],
            [
                "9b50665c013c33a9"
            ]
        ]
    },
    {
        "id": "9b50665c013c33a9",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "65bb3a57f4d66aff",
        "name": " ",
        "func": "msg[\"Val\"] = msg.payload;\nmsg.topic = \"SELECT `AutoManual` FROM `information`;\";\n// var RelayInputIndoor = flow.get(\"RelayInputIndoor\");\n// for (let index = 0; index < RelayInputIndoor.length; index++) {\n//     if(RelayInputIndoor[index].keterangan == \"StatusIndoor\"){\n//         RelayInputIndoor[index][\"Stat\"] = msg.payload.value;\n//     }\n// }\n// flow.set(\"RelayInputIndoor\",RelayInputIndoor);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 260,
        "wires": [
            [
                "348f1df6afc2229a"
            ]
        ]
    },
    {
        "id": "fbaf62eb22d02a96",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "65bb3a57f4d66aff",
        "name": "debug 63",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1880,
        "y": 260,
        "wires": []
    },
    {
        "id": "6dd45bc2ee0c6c26",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "g": "a0f627e7845c8a6c",
        "name": "  ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "UPDATE `Input` SET `Stat` = 0;UPDATE `Output` SET `Stat` = 0;UPDATE `InputIndoor` SET `Stat` = 0;UPDATE `OutputIndoor` SET `Stat` = 0;UPDATE `Operation` SET `Output` = 0, `OutputIndoor` = 0;UPDATE `information` SET `AutoManual` = 0;UPDATE `monitoringdata` SET `Outdoor_Unit` = 0;UPDATE `monitoringdata` SET `AHU_Status` = 0;UPDATE `monitoringdata` SET `Pre_Filter` = 0;UPDATE `monitoringdata` SET `HEPA_Filter` = 0;UPDATE `monitoringdata` SET `Booster_Fan` = 0;UPDATE `monitoringdata` SET `Exhaust_Fan` = 0;UPDATE `monitoringdata` SET `Heater_1` = 0;UPDATE `monitoringdata` SET `Heater_2` = 0;",
        "payload": "",
        "payloadType": "date",
        "x": 1130,
        "y": 80,
        "wires": [
            [
                "093b29713b791545"
            ]
        ]
    },
    {
        "id": "cf82e20970093eca",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "a0f627e7845c8a6c",
        "name": "link out 26",
        "mode": "link",
        "links": [
            "40579769d5e15768",
            "3521bc52fbbb1103"
        ],
        "x": 1375,
        "y": 120,
        "wires": []
    },
    {
        "id": "cd512c7412715bc1",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "a0f627e7845c8a6c",
        "name": " ",
        "func": "msg.topic = \"select * from monitoringdata;select * from Input Order by Number ASC;select * from Output Order by Number ASC;select * from InputIndoor Order by Number ASC;select * from OutputIndoor Order by Number ASC;\";\n// msg.topic += \"SELECT * FROM `devicelist` WHERE `keterangan` NOT LIKE 'Relay%';\";\nmsg.topic += \"SELECT * FROM `devicelist` WHERE `keterangan` != 'RelayOutput' ORDER BY `networkid` ASC;\";\nmsg.topic += \"SELECT `TempCathlab` FROM `setting`;\";\nmsg.topic += \"SELECT `RHCathlab` FROM `setting`;\";\nmsg.topic += \"DELETE FROM `recorddevice` WHERE `epoch` < \" + String(Date.now()-(604800*1000))+\";\";\nflow.set(\"SystemStatus\",\"OFF\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 80,
        "wires": [
            [
                "c4a9e424a80205e4"
            ]
        ]
    },
    {
        "id": "348f1df6afc2229a",
        "type": "mysql",
        "z": "35dfe99d7f6420b6",
        "g": "65bb3a57f4d66aff",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1630,
        "y": 260,
        "wires": [
            [
                "d1247cc240b87801"
            ]
        ]
    },
    {
        "id": "d1247cc240b87801",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "65bb3a57f4d66aff",
        "name": " ",
        "func": "var AutoManual = msg.payload[0].AutoManual;\nmsg.payload = msg.Val;\nvar RelayInputIndoor = flow.get(\"RelayInputIndoor\");\nvar stats = false;\nfor (let index = 0; index < RelayInputIndoor.length; index++) {\n    if(RelayInputIndoor[index].keterangan == \"StatusIndoor\" && AutoManual){\n        flow.set(\"SystemStatus\",\"ON\");\n        stats = true;\n    }\n}\nmsg.payload = [stats,AutoManual];\nflow.set(\"RelayInputIndoor\",RelayInputIndoor);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 260,
        "wires": [
            [
                "fbaf62eb22d02a96"
            ]
        ]
    },
    {
        "id": "a2b5fdc360817acc",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "65bb3a57f4d66aff",
        "name": " ",
        "func": "flow.set(\"SystemStatus\",\"OFF\");\nflow.set(\"cmdauto\",\"Shutdown\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "29cf114431c83bd5",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": "Request",
        "func": "flow.set(\"AutoRequest\",false);\nvar RelayInput = flow.get(\"RelayInput\");\nvar RelayInputIndoor = flow.get(\"RelayInputIndoor\");\nvar RelayOutput = flow.get(\"RelayOutput\");\nvar RelayOutputIndoor = flow.get(\"RelayOutputIndoor\");\nfor (let index = 0; index < RelayInputIndoor.length; index++) {\n    if(RelayInputIndoor[index].keterangan == \"StatusIndoor\" && RelayInputIndoor[index].Stat == 1){\n        msg[\"StatusIndoor\"] = true;\n    }else if(RelayInputIndoor[index].keterangan == \"StatusIndoor\" && RelayInputIndoor[index].Stat == 0){\n        msg[\"StatusIndoor\"] = false;\n    }\n    if(RelayInputIndoor[index].keterangan == \"StatusOutdoor\" && RelayInputIndoor[index].Stat == 1){\n        msg[\"StatusOutdoor\"] = true;\n    }else if(RelayInputIndoor[index].keterangan == \"StatusOutdoor\" && RelayInputIndoor[index].Stat == 0){\n        msg[\"StatusOutdoor\"] = false;\n    }\n}\nfor (let index = 0; index < RelayInput.length; index++) {\n    if (RelayInput[index].keterangan == \"BoosterFan\" && RelayInput[index].Stat == 1){\n        msg[\"BoosterFan\"] = true;\n    } else if (RelayInput[index].keterangan == \"BoosterFan\" && RelayInput[index].Stat == 0){\n        msg[\"BoosterFan\"] = false;\n    }\n    if (RelayInput[index].keterangan == \"EF\" && RelayInput[index].Stat == 1){\n        msg[\"EF\"] = true;\n    } else if (RelayInput[index].keterangan == \"EF\" && RelayInput[index].Stat == 0){\n        msg[\"EF\"] = false;\n    }\n}\n\nmsg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'RelayOutput' OR `keterangan` = 'RelayIndoor';\";\nmsg.topic += \"SELECT * FROM `Output` WHERE `keterangan` = 'BoosterFan' OR `keterangan` = 'EF' ORDER by `Number` ASC;\";\nmsg.topic += \"SELECT * FROM `OutputIndoor` WHERE `keterangan` = 'Fan' OR `keterangan` = 'Compressor' ORDER by `Number` ASC;\";\nmsg.topic += \"SELECT * FROM `Operation`;\";\nmsg.source= \"Shutdown\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1120,
        "wires": [
            [
                "4b4a33e5ebe4ba2e",
                "54425ceef7c7c7c0"
            ]
        ]
    },
    {
        "id": "4b4a33e5ebe4ba2e",
        "type": "mysql",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1230,
        "y": 1120,
        "wires": [
            [
                "fa2999dfb1a60f5b",
                "e136f21d8dc89bb4",
                "45cd74aa18a79f56",
                "6b31f5f3995fa830",
                "3ce39f4539c94784"
            ]
        ]
    },
    {
        "id": "8593efea3d3d32a9",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": "Off EF",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][1];\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length - 2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.payload[3][0].Output));\nvar spt = binarycurrent.split(\"\");\nif (binarycurrent[msg.payload[1][1].Number - 1] == \"1\") {\n    \n    spt[msg.payload[1][1].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if(flow.get(\"RelayOutput\")[msg.payload[1][1].Number].Stat == 1){\n        msg.statusEF = true;\n    }else{\n        msg.statusEF = false;\n    }\n    msg.payload[3][0][\"Output\"] = 4;\n    \n}\n\nmsg.numberOutput = msg.payload[3][0].Output;\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\" + \"0004\";\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 1040,
        "wires": [
            [
                "868df7113309f845"
            ]
        ]
    },
    {
        "id": "47f8acde59f00cf9",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " ON",
        "property": "BoosterFan",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 1080,
        "wires": [
            [
                "41e8d5ee599e7ee3"
            ]
        ]
    },
    {
        "id": "41e8d5ee599e7ee3",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " ON",
        "property": "StatusIndoor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1630,
        "y": 1080,
        "wires": [
            [
                "e6576c9e0ec17fe1"
            ]
        ]
    },
    {
        "id": "e6576c9e0ec17fe1",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": "Off Compressor",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length - 2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.payload[3][0].OutputIndoor));\nvar spt = binarycurrent.split(\"\");\nif (binarycurrent[msg.payload[2][1].Number - 1] == \"1\") {\n    \n    spt[msg.payload[2][1].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if(flow.get(\"RelayOutputIndoor\")[msg.payload[2][1].Number].Stat == 1){\n        msg.statusCompressor = true;\n    }else{\n        msg.statusCompressor = false;\n    }\n    msg.payload[3][0][\"OutputIndoor\"] = 1;\n    \n}\n\nmsg.numberOutput = msg.payload[3][0].OutputIndoor;\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\" + \"000\" + String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "dbad33d69191ad54",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " ON",
        "property": "BoosterFan",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 1040,
        "wires": [
            [
                "bf4bf6ab2486962f"
            ]
        ]
    },
    {
        "id": "bf4bf6ab2486962f",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " ON",
        "property": "StatusIndoor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1630,
        "y": 1040,
        "wires": [
            [
                "8593efea3d3d32a9"
            ]
        ]
    },
    {
        "id": "fa2999dfb1a60f5b",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " ON",
        "property": "EF",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1390,
        "y": 1040,
        "wires": [
            [
                "dbad33d69191ad54"
            ]
        ]
    },
    {
        "id": "e136f21d8dc89bb4",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " OFF",
        "property": "EF",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1390,
        "y": 1080,
        "wires": [
            [
                "47f8acde59f00cf9"
            ]
        ]
    },
    {
        "id": "45cd74aa18a79f56",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " OFF",
        "property": "EF",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1390,
        "y": 1120,
        "wires": [
            [
                "a19729078d0cc7db"
            ]
        ]
    },
    {
        "id": "a19729078d0cc7db",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " ON",
        "property": "BoosterFan",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 1120,
        "wires": [
            [
                "b3691f419969b8cd"
            ]
        ]
    },
    {
        "id": "b3691f419969b8cd",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " ON",
        "property": "StatusIndoor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1630,
        "y": 1120,
        "wires": [
            [
                "a078513decf2f9a7"
            ]
        ]
    },
    {
        "id": "a078513decf2f9a7",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": "Off FanIndoor",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length - 2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.payload[3][0].OutputIndoor));\nvar spt = binarycurrent.split(\"\");\nif (binarycurrent[msg.payload[2][0].Number - 1] == \"1\") {\n    \n    spt[msg.payload[2][0].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if(flow.get(\"RelayOutputIndoor\")[msg.payload[2][0].Number].Stat == 1){\n        msg.statusFan = true;\n    }else{\n        msg.statusFan = false;\n    }\n    msg.payload[3][0][\"OutputIndoor\"] = 0;\n    \n}\n\nmsg.numberOutput = msg.payload[3][0].OutputIndoor;\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\" + \"0000\";// + String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 1120,
        "wires": [
            [
                "3457b30a06be4b2f"
            ]
        ]
    },
    {
        "id": "6b31f5f3995fa830",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " OFF",
        "property": "EF",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1390,
        "y": 1160,
        "wires": [
            [
                "a49750d79a962028"
            ]
        ]
    },
    {
        "id": "a49750d79a962028",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " ON",
        "property": "BoosterFan",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 1160,
        "wires": [
            [
                "981a625f4c5d2f5b"
            ]
        ]
    },
    {
        "id": "981a625f4c5d2f5b",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " OFF",
        "property": "StatusIndoor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1630,
        "y": 1160,
        "wires": [
            [
                "aab74f58d3077523"
            ]
        ]
    },
    {
        "id": "aab74f58d3077523",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": "Off BoosterFan",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][1];\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length - 2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.payload[3][0].Output));\nvar spt = binarycurrent.split(\"\");\nif (binarycurrent[msg.payload[1][0].Number - 1] == \"1\") {\n    \n    spt[msg.payload[1][0].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if(flow.get(\"RelayOutput\")[msg.payload[1][0].Number].Stat == 1){\n        msg.statusBoosterFan = true;\n    }else{\n        msg.statusBoosterFan = false;\n    }\n    msg.payload[3][0][\"Output\"] = 0;\n}\n\nmsg.numberOutput = msg.payload[3][0].Output;\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\" + \"000\" + String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 1160,
        "wires": [
            [
                "249165d42b821f02"
            ]
        ]
    },
    {
        "id": "f369c0986c2e7a4c",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1050,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "c3808eb1d59bcda6",
        "type": "delay",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " ",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 910,
        "y": 1120,
        "wires": [
            [
                "29cf114431c83bd5",
                "f369c0986c2e7a4c"
            ]
        ]
    },
    {
        "id": "3ce39f4539c94784",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " OFF",
        "property": "EF",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1390,
        "y": 1200,
        "wires": [
            [
                "3ab609d9ee2cafd3"
            ]
        ]
    },
    {
        "id": "3ab609d9ee2cafd3",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " OFF",
        "property": "BoosterFan",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 1200,
        "wires": [
            [
                "2a0df8fec1eb445b"
            ]
        ]
    },
    {
        "id": "2a0df8fec1eb445b",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " OFF",
        "property": "StatusIndoor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1630,
        "y": 1200,
        "wires": [
            [
                "302aa666aab9f64c"
            ]
        ]
    },
    {
        "id": "302aa666aab9f64c",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": "IDLE",
        "func": "flow.set(\"cmdauto\", \"None\");\nflow.set(\"StartLoops\",false);\nmsg.reset = true;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 1200,
        "wires": [
            [
                "e71be65a7a112e12"
            ]
        ]
    },
    {
        "id": "e71be65a7a112e12",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": "link out 31",
        "mode": "link",
        "links": [
            "acd5dc2f19d30680",
            "ec697760faca1437"
        ],
        "x": 1955,
        "y": 1200,
        "wires": []
    },
    {
        "id": "6571aa4c32464225",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "7d1dd2a6ee9e18ec",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "SystemStatus",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 370,
        "y": 520,
        "wires": []
    },
    {
        "id": "6c68159711216ea1",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "g": "9b8bf58ec75ff6a5",
        "name": "Auto Panel",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04030000FF0000000002",
        "payloadType": "str",
        "x": 460,
        "y": 1180,
        "wires": [
            [
                "6aa6b0e29ccb9498"
            ]
        ]
    },
    {
        "id": "20cc652fbb41f050",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "9b8bf58ec75ff6a5",
        "name": "IncomingData",
        "mode": "link",
        "links": [
            "a051a2aff11b5edc",
            "e0b478d3126d5602"
        ],
        "x": 715,
        "y": 1360,
        "wires": []
    },
    {
        "id": "b900ba096b009cd2",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "g": "9b8bf58ec75ff6a5",
        "name": "BoosterFanAktif",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04020000DB0400000002",
        "payloadType": "str",
        "x": 480,
        "y": 1260,
        "wires": [
            [
                "bde98b31840bac8b"
            ]
        ]
    },
    {
        "id": "955ed04f202b824f",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "g": "9b8bf58ec75ff6a5",
        "name": "FanIndoor Nyala",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "040400000201000003",
        "payloadType": "str",
        "x": 480,
        "y": 1300,
        "wires": [
            [
                "3e59427046a4c848"
            ]
        ]
    },
    {
        "id": "d70d676f9c413c03",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "g": "9b8bf58ec75ff6a5",
        "name": "Compressor Nyala",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "040400000003000003",
        "payloadType": "str",
        "x": 490,
        "y": 1340,
        "wires": [
            [
                "333598f52204db0c"
            ]
        ]
    },
    {
        "id": "4710e294066724a0",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "g": "9b8bf58ec75ff6a5",
        "name": "Manual Panel",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04030000FE0000000002",
        "payloadType": "str",
        "x": 470,
        "y": 1220,
        "wires": [
            [
                "196b383203c7e58b"
            ]
        ]
    },
    {
        "id": "2e3beea2a6767d7e",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "g": "9b8bf58ec75ff6a5",
        "name": "EF Mati",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04020000DB0400000002",
        "payloadType": "str",
        "x": 450,
        "y": 1420,
        "wires": [
            [
                "0bc28a6b321848d6"
            ]
        ]
    },
    {
        "id": "d58d6d4b91536227",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "g": "9b8bf58ec75ff6a5",
        "name": "BoosterFan Mati",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04020000FF0000000002",
        "payloadType": "str",
        "x": 480,
        "y": 1540,
        "wires": [
            [
                "920b95153572421f"
            ]
        ]
    },
    {
        "id": "44a02f451409f5ef",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "g": "9b8bf58ec75ff6a5",
        "name": "FanIndoor Mati",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "040400000300000003",
        "payloadType": "str",
        "x": 480,
        "y": 1500,
        "wires": [
            [
                "9d4d25fd4a2bf5c4"
            ]
        ]
    },
    {
        "id": "ccc982966a1a3c29",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "g": "9b8bf58ec75ff6a5",
        "name": "Compressor Mati",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "040400000201000003",
        "payloadType": "str",
        "x": 480,
        "y": 1460,
        "wires": [
            [
                "1d77c37f4e6f597e"
            ]
        ]
    },
    {
        "id": "c57e90d3aa259bcc",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "fe812d9f95dae0df",
        "name": "link in 14",
        "links": [
            "55ad6968a735410f",
            "db77b0fb0b9de01a"
        ],
        "x": 805,
        "y": 580,
        "wires": [
            [
                "d35cdff0ec35f4f4",
                "b66627d94481ecab"
            ]
        ]
    },
    {
        "id": "55ad6968a735410f",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": "link out 32",
        "mode": "link",
        "links": [
            "c57e90d3aa259bcc"
        ],
        "x": 715,
        "y": 680,
        "wires": []
    },
    {
        "id": "64929df4bdfa9390",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": "link out 35",
        "mode": "link",
        "links": [
            "7852a1125493e191"
        ],
        "x": 715,
        "y": 720,
        "wires": []
    },
    {
        "id": "7852a1125493e191",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "423ba8e3802cd15a",
        "name": "link in 17",
        "links": [
            "64929df4bdfa9390",
            "4de6df107525a91d"
        ],
        "x": 805,
        "y": 740,
        "wires": [
            [
                "024b3889c6059068",
                "6d0194800bfb5bba"
            ]
        ]
    },
    {
        "id": "0529f7c8d19c391b",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": "link out 36",
        "mode": "link",
        "links": [
            "fc3604843327deaa"
        ],
        "x": 715,
        "y": 760,
        "wires": []
    },
    {
        "id": "fc3604843327deaa",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "04c6df45a6ea8a79",
        "name": "link in 18",
        "links": [
            "0529f7c8d19c391b",
            "070b79b318a8afd6"
        ],
        "x": 75,
        "y": 1040,
        "wires": [
            [
                "c5b76c5a304b91a1",
                "ea1df75bf451df8c",
                "6df7306103bc7e97"
            ]
        ]
    },
    {
        "id": "59c7f26baa140b47",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": "link out 37",
        "mode": "link",
        "links": [
            "9dc856012c44486f"
        ],
        "x": 715,
        "y": 800,
        "wires": []
    },
    {
        "id": "9dc856012c44486f",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "76ea4920382dc0ac",
        "name": "link in 19",
        "links": [
            "59c7f26baa140b47",
            "12dca0f4de64a244"
        ],
        "x": 805,
        "y": 900,
        "wires": [
            [
                "751ddc55c29a9154",
                "5254493852c4ca11"
            ]
        ]
    },
    {
        "id": "50869a5d0780eee9",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": "link out 38",
        "mode": "link",
        "links": [
            "ec697760faca1437"
        ],
        "x": 715,
        "y": 840,
        "wires": []
    },
    {
        "id": "ec697760faca1437",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": "link in 20",
        "links": [
            "50869a5d0780eee9",
            "e71be65a7a112e12",
            "df96c2951fc505fc"
        ],
        "x": 805,
        "y": 1120,
        "wires": [
            [
                "c3808eb1d59bcda6",
                "3d6723293e135aaf"
            ]
        ]
    },
    {
        "id": "093b29713b791545",
        "type": "delay",
        "z": "35dfe99d7f6420b6",
        "g": "a0f627e7845c8a6c",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1270,
        "y": 80,
        "wires": [
            [
                "cf82e20970093eca",
                "cd512c7412715bc1"
            ]
        ]
    },
    {
        "id": "50b9d2bb80c97629",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "ba1fc06f41c5063d",
        "name": "link in 21",
        "links": [
            "4a08a97d51c8f303"
        ],
        "x": 75,
        "y": 120,
        "wires": [
            [
                "4bac294798b07d31"
            ]
        ]
    },
    {
        "id": "b66627d94481ecab",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "fe812d9f95dae0df",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 890,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "6d0194800bfb5bba",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "423ba8e3802cd15a",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 890,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "ea1df75bf451df8c",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "04c6df45a6ea8a79",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 170,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "5254493852c4ca11",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "76ea4920382dc0ac",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 910,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "3d6723293e135aaf",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 910,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "b42d593eea0edab0",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "name": " ",
        "func": "\nmsg.SystemStatus = flow.get(\"SystemStatus\");\nmsg.delay = msg.rate-2000;\nif(flow.get(\"SystemStatus\") != \"ON\" || flow.get(\"StartLoops\")){\n    msg.payload = null;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 420,
        "wires": [
            [
                "867d73bbd26f3e75",
                "4ddbfb6d2aa10287"
            ]
        ]
    },
    {
        "id": "867d73bbd26f3e75",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "name": " ",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1010,
        "y": 420,
        "wires": [
            [
                "36fd756b281d7717",
                "389e1833fe797800"
            ],
            [
                "9f928b0d4bb54f75"
            ]
        ]
    },
    {
        "id": "36fd756b281d7717",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1150,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "5a879adfea19c8fe",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "name": "Turn On Booster",
        "func": "msg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'RelayOutput' OR `keterangan` = 'RelayIndoor';\";\nmsg.topic += \"SELECT * FROM `Output` WHERE `keterangan` = 'BoosterFan' OR `keterangan` = 'EF';\";\nmsg.topic += \"SELECT * FROM `OutputIndoor` WHERE `keterangan` = 'Fan' OR `keterangan` = 'Compressor';\";\nmsg.topic += \"SELECT * FROM `Operation`;\";\nflow.set(\"AutoRequest\",false);\nmsg.source = \"RunPreLoop\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 420,
        "wires": [
            [
                "2d5f0286d06b202d"
            ]
        ]
    },
    {
        "id": "2d5f0286d06b202d",
        "type": "mysql",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1470,
        "y": 420,
        "wires": [
            [
                "989dfe4eec46d6d8"
            ]
        ]
    },
    {
        "id": "989dfe4eec46d6d8",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "name": " On1",
        "func": "msg.resultsql = msg.payload;\nvar binarycurrent = \"\";\nif(!msg.BoosterFan){\n    var d = msg.payload[0][1];\n    var cmd = \"\";\n    msg.statusEH1 = false;\n    msg.statusEH2 = false;\n    for (let index = 0; index < Object.keys(d).length - 2; index++) {\n        cmd += d[Object.keys(d)[index]];\n    }\n    cmd += \"01\";\n    binarycurrent = reverseString(decToBinary(msg.payload[3][0].Output));\n    var spt = binarycurrent.split(\"\");\n    if (spt[msg.payload[1][0].Number - 1] == \"0\" && !msg.BoosterFan && flow.get(\"SystemStatus\") == \"ON\") {\n        \n        spt[msg.payload[1][0].Number - 1] = \"1\";\n        binarycurrent = spt.join(\"\");\n        if(flow.get(\"RelayOutput\")[msg.payload[1][0].Number].Stat == 0){\n            msg.statusBooster = true;\n        }else{\n            msg.statusBooster = false;\n        }\n        msg.payload[3][0][\"Output\"] = parseInt(String(msg.payload[3][0].Output)) + parseInt(String(msg.payload[1][0].Dec));\n    }\n    spt = binarycurrent.split(\"\");\n    \n    if (spt[msg.payload[1][1].Number - 1] == \"0\" && !msg.EF && msg.StatusIndoor && msg.BoosterFan && msg.StatusOutdoor){\n        msg.statusEF = true;\n    }\n    msg.numberOutput = msg.payload[3][0].Output;\n    var hex = binaryToHex(reverseString(binarycurrent));\n    cmd += \"0000\" + \"000\" + String(dec2hex(hex));\n    msg.payload = cmd;\n    return msg;\n} else {\n    var d = msg.payload[0][0];\n    var cmd = \"\";\n    \n    for (let index = 0; index < Object.keys(d).length - 2; index++) {\n        cmd += d[Object.keys(d)[index]];\n    }\n    cmd += \"01\";\n    \n    binarycurrent = reverseString(decToBinary(msg.payload[3][0].OutputIndoor));\n    var spt = binarycurrent.split(\"\");\n    if (spt[msg.payload[2][0].Number - 1] == \"0\" && msg.BoosterFan) {\n        console.log(binarycurrent);\n        spt[msg.payload[2][0].Number - 1] = \"1\";\n        binarycurrent = spt.join(\"\");\n        console.log(binarycurrent);\n        if(flow.get(\"RelayOutputIndoor\")[msg.payload[1][0].Number].Stat == 0){\n            msg.statusFan = true;\n        }else{\n            msg.statusFan = false;\n        }\n        \n        msg.payload[3][0][\"OutputIndoor\"] = parseInt(String(msg.payload[3][0].OutputIndoor)) + parseInt(String(msg.payload[2][0].Dec));\n    }\n    if (binarycurrent[msg.payload[2][1].Number - 1] == \"0\" && !msg.statusFan && !msg.StatusOutdoor){\n        msg.statusCompressor = true;\n    }else{\n        msg.statusCompressor = false;\n    }\n    msg.numberOutputIndoor = msg.payload[3][0].OutputIndoor;\n    var hex = binaryToHex(reverseString(binarycurrent));\n    cmd += \"0000\" + \"000\" + String(dec2hex(hex));\n    msg.payload = cmd;\n}\nif (!msg.EF && msg.StatusIndoor && msg.BoosterFan && msg.StatusOutdoor){\n    msg.payload = msg.resultsql;\n    var d = msg.payload[0][1];\n    var cmd = \"\";\n    for (let index = 0; index < Object.keys(d).length - 2; index++) {\n        cmd += d[Object.keys(d)[index]];\n    }\n    cmd += \"01\";\n    console.log(msg.payload[3][0].Output);\n    binarycurrent = reverseString(decToBinary(parseInt(String(msg.payload[3][0].Output))));\n    console.log(binarycurrent);\n    var spt = binarycurrent.split(\"\");\n    console.log(spt);\n    console.log(msg.payload[1][0].Number - 1);\n    console.log(spt[msg.payload[1][0].Number - 1]);\n    if (spt[msg.payload[1][0].Number - 1] == \"0\" && msg.BoosterFan && msg.StatusIndoor) {\n\n        spt[msg.payload[1][0].Number - 1] = \"1\";\n        binarycurrent = spt.join(\"\");\n        if (flow.get(\"RelayOutput\")[msg.payload[1][0].Number].Stat == 0) {\n            msg.statusBooster = true;\n        } else {\n            msg.statusBooster = false;\n        }\n        msg.payload[3][0][\"Output\"] = parseInt(String(msg.payload[3][0].Output)) + parseInt(String(msg.payload[1][0].Dec));\n    }\n    spt = binarycurrent.split(\"\");\n\n    if (spt[msg.payload[1][1].Number - 1] == \"0\") {\n        msg.statusEF = true;\n    }\n    msg.numberOutput = msg.payload[3][0].Output;\n    var hex = binaryToHex(reverseString(binarycurrent));\n    cmd += \"0000\" + \"000\" + String(dec2hex(hex));\n    msg.payload = cmd;\n    return msg;\n}\n\n\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 420,
        "wires": [
            [
                "66287559ed4b6937",
                "681692344efc4f42",
                "285b9c4f638ebe48",
                "3a55ebfb298d971c"
            ]
        ]
    },
    {
        "id": "66287559ed4b6937",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "name": " On Booster",
        "property": "statusBooster",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1750,
        "y": 400,
        "wires": [
            [
                "967ec2245216409f"
            ]
        ]
    },
    {
        "id": "681692344efc4f42",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "name": " On EF",
        "property": "statusEF",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1730,
        "y": 440,
        "wires": [
            [
                "5e16906003754ad9"
            ]
        ]
    },
    {
        "id": "285b9c4f638ebe48",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "name": " On Fan",
        "property": "statusFan",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1740,
        "y": 360,
        "wires": [
            [
                "afb8cb7426121dc3"
            ]
        ]
    },
    {
        "id": "3a55ebfb298d971c",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "name": " On Compressor",
        "property": "statusCompressor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1760,
        "y": 480,
        "wires": [
            [
                "d760d5924ba86a49"
            ]
        ]
    },
    {
        "id": "967ec2245216409f",
        "type": "delay",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "name": " ",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1910,
        "y": 400,
        "wires": [
            [
                "d317937293c8a1ea"
            ]
        ]
    },
    {
        "id": "5e16906003754ad9",
        "type": "delay",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "name": " ",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1910,
        "y": 440,
        "wires": [
            [
                "0158c71c0af9de90"
            ]
        ]
    },
    {
        "id": "afb8cb7426121dc3",
        "type": "delay",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "name": " ",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1910,
        "y": 360,
        "wires": [
            [
                "ebc4ae1fa11cd782"
            ]
        ]
    },
    {
        "id": "d760d5924ba86a49",
        "type": "delay",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "name": " ",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1910,
        "y": 480,
        "wires": [
            [
                "73d0e95de46de3e5"
            ]
        ]
    },
    {
        "id": "0158c71c0af9de90",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "name": "On EF",
        "func": "msg.payload = msg.resultsql;\nvar d = msg.payload[0][1];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.numberOutput));\nvar spt = binarycurrent.split(\"\");\nif(binarycurrent[msg.payload[1][1].Number-1] == \"0\"){\n    \n    spt[msg.payload[1][1].Number - 1] = \"1\";\n    binarycurrent = spt.join(\"\");\n    if (flow.get(\"RelayOutput\")[msg.payload[1][1].Number].Stat == 0){\n        msg.statusEH2 = true;\n    }else{\n        msg.statusEH2 = false;\n    }\n   msg[\"numberOutput\"] = parseInt(String(msg.numberOutput)) +  parseInt(String(msg.payload[1][1].Dec));\n}\n\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 440,
        "wires": [
            [
                "702c693ac203e690"
            ]
        ]
    },
    {
        "id": "73d0e95de46de3e5",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "name": "On Compressor",
        "func": "msg.payload = msg.resultsql;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.numberOutputIndoor));\nvar spt = binarycurrent.split(\"\");\nif(binarycurrent[msg.payload[1][1].Number-1] == \"0\"){\n    \n    spt[msg.payload[2][1].Number - 1] = \"1\";\n    binarycurrent = spt.join(\"\");\n    \n   msg[\"numberOutputIndoor\"] = parseInt(String(msg.numberOutputIndoor)) +  parseInt(String(msg.payload[2][1].Dec));\n}\n\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 480,
        "wires": [
            [
                "0671d5bf37e6b729"
            ]
        ]
    },
    {
        "id": "a2c04673700b6df1",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "name": "link out 23",
        "mode": "link",
        "links": [
            "b31d076d9b9d8385"
        ],
        "x": 2215,
        "y": 420,
        "wires": []
    },
    {
        "id": "a02176000f5891ab",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "7d1dd2a6ee9e18ec",
        "name": "link out 39",
        "mode": "link",
        "links": [
            "64de2383f5d093e2",
            "52866ce3c980805c"
        ],
        "x": 335,
        "y": 440,
        "wires": []
    },
    {
        "id": "64de2383f5d093e2",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "name": "link in 22",
        "links": [
            "a02176000f5891ab"
        ],
        "x": 805,
        "y": 420,
        "wires": [
            [
                "b42d593eea0edab0"
            ]
        ]
    },
    {
        "id": "b65550984240d843",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "7d1dd2a6ee9e18ec",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 490,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "3521bc52fbbb1103",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "8865e1ac50e646ab",
        "name": "link in 23",
        "links": [
            "4e7014421d67368b",
            "d9c49b1accbf22f2",
            "4c17409ddbc782a5",
            "3fae4a69287e8867",
            "983c5238c51828dc",
            "cf82e20970093eca"
        ],
        "x": 835,
        "y": 120,
        "wires": [
            [
                "ab46deab7a6aecf8"
            ]
        ]
    },
    {
        "id": "9b978c2fb92ebf73",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": "link in 24",
        "links": [
            "1c9c4f79bd4b8b7f"
        ],
        "x": 265,
        "y": 880,
        "wires": [
            [
                "b4d1305ac807533a",
                "71f3a6de4ea88b75"
            ]
        ]
    },
    {
        "id": "f5e15e5f35649746",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "9f263b41872dc1ad",
        "name": "link in 25",
        "links": [
            "e68c1745d051024b"
        ],
        "x": 805,
        "y": 1460,
        "wires": [
            [
                "17d48941d16c9bc9"
            ]
        ]
    },
    {
        "id": "e101c22dedfd7300",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "9f263b41872dc1ad",
        "name": "link in 26",
        "links": [
            "73da267dd5067a33"
        ],
        "x": 805,
        "y": 1420,
        "wires": [
            [
                "abe1975f1d96cfc2"
            ]
        ]
    },
    {
        "id": "73da267dd5067a33",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "9f263b41872dc1ad",
        "name": "link out 40",
        "mode": "link",
        "links": [
            "e101c22dedfd7300"
        ],
        "x": 1005,
        "y": 1340,
        "wires": []
    },
    {
        "id": "e68c1745d051024b",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "9f263b41872dc1ad",
        "name": "link out 41",
        "mode": "link",
        "links": [
            "f5e15e5f35649746"
        ],
        "x": 1005,
        "y": 1380,
        "wires": []
    },
    {
        "id": "b8b325a363cf4e6a",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "9f263b41872dc1ad",
        "name": "link out 42",
        "mode": "link",
        "links": [
            "b31d076d9b9d8385"
        ],
        "x": 1105,
        "y": 1440,
        "wires": []
    },
    {
        "id": "9cce21b5587b8496",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": "link out 43",
        "mode": "link",
        "links": [
            "b31d076d9b9d8385"
        ],
        "x": 2195,
        "y": 1100,
        "wires": []
    },
    {
        "id": "534824189970c438",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "33aef67e6492d641",
        "name": "link in 28",
        "links": [
            "f4f0bb734a5396dc"
        ],
        "x": 75,
        "y": 1300,
        "wires": [
            [
                "bd6be871f944cdc6",
                "41a97eafc21af508",
                "a655229597903998",
                "3f20e68353b2caea",
                "4bc19e2de74d7c9a"
            ]
        ]
    },
    {
        "id": "bd6be871f944cdc6",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "33aef67e6492d641",
        "name": "Status AC/Fan",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "StatusIndoor",
        "targetType": "msg",
        "statusVal": "StatusIndoor",
        "statusType": "auto",
        "x": 200,
        "y": 1180,
        "wires": []
    },
    {
        "id": "3f20e68353b2caea",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "33aef67e6492d641",
        "name": "Status Compressor",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "StatusOutdoor",
        "targetType": "msg",
        "statusVal": "StatusIndoor",
        "statusType": "auto",
        "x": 210,
        "y": 1240,
        "wires": []
    },
    {
        "id": "a655229597903998",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "33aef67e6492d641",
        "name": "Status BoosterFan",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "BoosterFan",
        "targetType": "msg",
        "statusVal": "StatusIndoor",
        "statusType": "auto",
        "x": 210,
        "y": 1300,
        "wires": []
    },
    {
        "id": "41a97eafc21af508",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "33aef67e6492d641",
        "name": "Status EF",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "EF",
        "targetType": "msg",
        "statusVal": "StatusIndoor",
        "statusType": "auto",
        "x": 180,
        "y": 1360,
        "wires": []
    },
    {
        "id": "4bc19e2de74d7c9a",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "33aef67e6492d641",
        "name": "Status StartLoops",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "StartLoops",
        "targetType": "msg",
        "statusVal": "StatusIndoor",
        "statusType": "auto",
        "x": 210,
        "y": 1420,
        "wires": []
    },
    {
        "id": "52866ce3c980805c",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "8423ccb755deee9e",
        "name": "link in 29",
        "links": [
            "a02176000f5891ab"
        ],
        "x": 1525,
        "y": 580,
        "wires": [
            [
                "39c934806d96602b"
            ]
        ]
    },
    {
        "id": "075c929877dfd052",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "8423ccb755deee9e",
        "name": "Request",
        "func": "msg.resultsql = msg.payload;\nmsg.keterangan = msg.payload.keterangan;\nvar d = msg.payload;\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length - 2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"00\";\ncmd += \"0000\" + \"0000\" ;\nmsg.payload = cmd;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2400,
        "y": 600,
        "wires": [
            [
                "dd38159f933bfd1c",
                "64bbec4db6f1f1f7"
            ]
        ]
    },
    {
        "id": "6a5380853de89679",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "8423ccb755deee9e",
        "name": " ",
        "func": "msg[\"delay\"] = 8000;\nmsg.payload = flow.get(\"SensorQty\");\nvar d = msg.payload;\nvar arr = [];\nvar Hprio = [\"Temp/RH,CathLab\", \"RelayIndoor\",\"RelayInput\"];\nvar IHprio = [];\nvar Lprio = [\"Temp/RH,Machine\",\"Pressure,MediumFilter\",\"Pressure,HepaFilter\"];\nvar ILprio = [];\nfor (let i = 0; i < 3; i++) {\n    for (let j = 0; j < d.length; j++) {\n        if(d[j].keterangan == Hprio[0]){\n            arr.push(d[j]);\n        }\n    }\n    for (let j = 0; j < d.length; j++) {\n        if(d[j].keterangan == Hprio[1]){\n            arr.push(d[j]);\n        }\n    }\n    for (let j = 0; j < d.length; j++) {\n        if(d[j].keterangan == Hprio[2]){\n            arr.push(d[j]);\n        }\n    }\n    for (let j = 0; j < d.length; j++) {\n        if(d[j].keterangan == Lprio[i]){\n            arr.push(d[j]);\n        }\n    }\n}\nmsg.payload = arr;\nreturn msg;\n\n//CathRH\n//RelayPanel\n//RelayIndoor",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 580,
        "wires": [
            [
                "6ad6839e074c1a58",
                "a9b8bb6f99363af7",
                "9e0bb9887086f33f",
                "ddb5fcc275d3e9cf"
            ]
        ]
    },
    {
        "id": "9ce66aee0b743282",
        "type": "delay",
        "z": "35dfe99d7f6420b6",
        "g": "8423ccb755deee9e",
        "name": " ",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "day",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": true,
        "outputs": 1,
        "x": 1990,
        "y": 580,
        "wires": [
            [
                "6a5380853de89679",
                "606b019e77cfe191"
            ]
        ]
    },
    {
        "id": "9f928b0d4bb54f75",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "name": "link out 44",
        "mode": "link",
        "links": [],
        "x": 1115,
        "y": 460,
        "wires": []
    },
    {
        "id": "460d859f91b11b54",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "a0f627e7845c8a6c",
        "name": " ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 100,
        "wires": []
    },
    {
        "id": "9e0bb9887086f33f",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "8423ccb755deee9e",
        "name": " ",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "2",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2250,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "dd38159f933bfd1c",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "8423ccb755deee9e",
        "name": " ",
        "func": "if(!flow.get(\"AutoRequest\")){\n    msg.payload = null;\n}\nmsg.autorequest = flow.get(\"AutoRequest\");\nmsg.source = \"Request\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2530,
        "y": 600,
        "wires": [
            [
                "50e002d0ae347e2b",
                "a02a5fe3ef7da629",
                "8ac3a756328edaf3"
            ]
        ]
    },
    {
        "id": "50e002d0ae347e2b",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "8423ccb755deee9e",
        "name": " ",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2650,
        "y": 580,
        "wires": [
            [
                "3aa4b2842afad13e",
                "722501cf7f050a1b"
            ]
        ]
    },
    {
        "id": "722501cf7f050a1b",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "8423ccb755deee9e",
        "name": "link out 45",
        "mode": "link",
        "links": [
            "b31d076d9b9d8385"
        ],
        "x": 2905,
        "y": 580,
        "wires": []
    },
    {
        "id": "64bbec4db6f1f1f7",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "8423ccb755deee9e",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2530,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "a02a5fe3ef7da629",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "8423ccb755deee9e",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "keterangan",
        "targetType": "msg",
        "statusVal": "payload.keterangan",
        "statusType": "auto",
        "x": 2650,
        "y": 620,
        "wires": []
    },
    {
        "id": "898f9f5cf774870b",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "ba1fc06f41c5063d",
        "name": "link out 46",
        "mode": "link",
        "links": [
            "0dec846e5eb7ced4"
        ],
        "x": 625,
        "y": 120,
        "wires": []
    },
    {
        "id": "0dec846e5eb7ced4",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "name": "link in 30",
        "links": [
            "898f9f5cf774870b"
        ],
        "x": 65,
        "y": 1640,
        "wires": [
            [
                "a90a734838735497",
                "f8c3c5c33abf9b65"
            ]
        ]
    },
    {
        "id": "a90a734838735497",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 150,
        "y": 1640,
        "wires": []
    },
    {
        "id": "f8c3c5c33abf9b65",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "keterangan",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 270,
        "y": 1640,
        "wires": []
    },
    {
        "id": "b9d48a932de1c502",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "name": " ",
        "func": "msg.deviceinfo = msg.payload[0];\nmsg.topic = \"\";\nif(msg.deviceinfo.keterangan == \"RelayIndoor\"){\n    var RelayInputIndoor = flow.get(\"RelayInputIndoor\");\n    msg.deviceinfo[\"InputIndoorVal\"] = (hexToBinary(msg.realdata.substring(8,10)));\n    var RelayOutputIndoor = flow.get(\"RelayOutputIndoor\");\n    msg.deviceinfo[\"OutputIndoorVal\"] = (hexToBinary2((msg.realdata.substring(10, 12))));\n}else{\n    var RelayInput = flow.get(\"RelayInput\");\n    msg.deviceinfo[\"InputVal\"] = (hexToBinary(msg.realdata.substring(8, 10)));\n    var RelayOutput = flow.get(\"RelayOutput\");\n    msg.deviceinfo[\"OutputVal\"] = (hexToBinary2((msg.realdata.substring(10, 12))));\n}\n\nreturn msg;\n\nfunction hexToBinary(hexString) {\n    // Parse the hexadecimal string to an integer\n    const intValue = parseInt(hexString, 16);\n\n    // Convert the integer to a binary string\n    let binaryString = intValue.toString(2);\n\n    // Pad the binary string with leading zeros if necessary\n    // Assuming each hex digit should be represented by 4 binary digits\n    const hexLength = hexString.length;\n    const expectedBinaryLength = hexLength * 4;\n    while (binaryString.length < expectedBinaryLength) {\n        binaryString = '0'.concat(binaryString);\n    }\n\n    return binaryString;\n}\n\nfunction decimalToReversedBinary(decimal) {\n    // Convert the decimal number to a binary string\n    let binaryString = decimal.toString(2);\n\n    // Pad the binary string with leading zeros to ensure it has a length of 4 bits\n    while (binaryString.length < 4) {\n        binaryString = '0'.concat(binaryString);\n    }\n\n    // Reverse the binary string\n    // const reversedBinaryString = binaryString.split('').reverse().join('');\n\n    // return reversedBinaryString;\n    return binaryString;\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\n\n\nfunction hexToBinary2(hexString) {\n    // Menghapus karakter spasi jika ada\n    hexString = hexString.replace(/\\s+/g, '');\n    \n    // Memastikan string heksadesimal valid dan tidak lebih dari 2 karakter\n    if (!/^[\\da-fA-F]{1,2}$/.test(hexString)) {\n        throw new Error(\"Invalid hexadecimal string. Input should be 1 or 2 hex characters.\");\n    }\n\n    // Mengonversi string heksadesimal menjadi biner dengan panjang 8 bit\n    let binaryString = parseInt(hexString, 16).toString(2).padStart(8, '0');\n\n    return binaryString;\n}\n\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1700,
        "wires": [
            [
                "8abbc9b3d529f347",
                "b2792e1b18d34e3a"
            ]
        ]
    },
    {
        "id": "8d226df3c2dc83c1",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "name": " ",
        "func": "msg.payload = msg.realdata;\nvar networkid = msg.payload.substring(0,2);\nvar devid = msg.payload.substring(2,4);\nvar typeid = msg.payload.substring(4,6);\nmsg.topic = \"SELECT * from `devicelist` WHERE \";\nmsg.topic += \"`networkid` = '\"+networkid+\"' AND \";\nmsg.topic += \"`devid` = '\" + devid +\"' AND \";\nmsg.topic += \"`typeid` = '\" + typeid +\"';\";\nmsg.networkid = msg.realdata.substring(0,2);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1700,
        "wires": [
            [
                "213d5b52759b90b5"
            ]
        ]
    },
    {
        "id": "213d5b52759b90b5",
        "type": "mysql",
        "z": "35dfe99d7f6420b6",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 270,
        "y": 1700,
        "wires": [
            [
                "b9d48a932de1c502"
            ]
        ]
    },
    {
        "id": "e0b478d3126d5602",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "name": "link in 31",
        "links": [
            "d9c49b1accbf22f2",
            "20cc652fbb41f050"
        ],
        "x": 65,
        "y": 1700,
        "wires": [
            [
                "8d226df3c2dc83c1"
            ]
        ]
    },
    {
        "id": "b2792e1b18d34e3a",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "name": " ",
        "property": "deviceinfo.InputVal",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 1660,
        "wires": [
            [
                "4be22921cf432b09",
                "3ae36619cad005b3",
                "96f479b5d833b13a"
            ]
        ]
    },
    {
        "id": "8abbc9b3d529f347",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "name": " ",
        "property": "deviceinfo.InputIndoorVal",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 510,
        "y": 1740,
        "wires": [
            [
                "e035cc1828b51ee7",
                "45441e5689f2d3c4",
                "61dad059c9e55104"
            ]
        ]
    },
    {
        "id": "e035cc1828b51ee7",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "name": "InputIndoorVal",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "deviceinfo.InputIndoorVal",
        "targetType": "msg",
        "statusVal": "deviceinfo.InputIndoorVal",
        "statusType": "auto",
        "x": 660,
        "y": 1740,
        "wires": []
    },
    {
        "id": "61dad059c9e55104",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "name": "OutputIndoorVal",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "deviceinfo.OutputIndoorVal",
        "targetType": "msg",
        "statusVal": "deviceinfo.InputIndoorVal",
        "statusType": "auto",
        "x": 860,
        "y": 1740,
        "wires": []
    },
    {
        "id": "3ae36619cad005b3",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "name": "OutputVal",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "deviceinfo.OutputVal",
        "targetType": "msg",
        "statusVal": "deviceinfo.InputIndoorVal",
        "statusType": "auto",
        "x": 840,
        "y": 1660,
        "wires": []
    },
    {
        "id": "4be22921cf432b09",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "name": "InputVal",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "deviceinfo.InputVal",
        "targetType": "msg",
        "statusVal": "deviceinfo.InputIndoorVal",
        "statusType": "auto",
        "x": 640,
        "y": 1660,
        "wires": []
    },
    {
        "id": "45441e5689f2d3c4",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 630,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "96f479b5d833b13a",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 630,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "a2e255af360a8419",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "d": true,
        "g": "5b082e6102fba67f",
        "name": "link in 32",
        "links": [
            "4e7014421d67368b"
        ],
        "x": 2045,
        "y": 60,
        "wires": [
            [
                "5c108cac282af8b1"
            ]
        ]
    },
    {
        "id": "5c108cac282af8b1",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "5b082e6102fba67f",
        "name": " Post To Apex",
        "func": "function getCurrentEpochTime() {\n    return Math.floor(Date.now() / 1000);\n}\n\nmsg = {\n    method: \"POST\",\n    url: \"https://gffc6be1c389bcf-db8gk8v.adb.ap-singapore-1.oraclecloudapps.com/ords/deviotahvac/iothvac/monitoringdata\",\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    payload: {\n        \"ID\": getCurrentEpochTime(),  \n        \"Timestamp\": new Date().toISOString(),  \n        \"Temp_Cathlab\": flow.get(\"Temp_Cathlab\") || 0,\n        \"RH_Cathlab\": flow.get(\"RH_Cathlab\") || 0,\n        \"Temp_Machine\": flow.get(\"Temp_Machine\") || 0,\n        \"RH_Machine\": flow.get(\"RH_Machine\") || 0,\n        \"Outdoor_Unit\": flow.get(\"Outdoor_Unit\") || 0,\n        \"AHU_Status\": flow.get(\"AHU_Status\") || 0,\n        \"Pre_Filter\": flow.get(\"Pre_Filter\") || 0,\n        \"HEPA_Filter\": flow.get(\"HEPA_Filter\") || 0,\n        \"Booster_Fan\": flow.get(\"Booster_Fan\") || 0,\n        \"Exhaust_Fan\": flow.get(\"Exhaust_Fan\") || 0,\n        \"Heater_1\": flow.get(\"Heater_1\") || 0,\n        \"Heater_2\": flow.get(\"Heater_2\") || 0\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 60,
        "wires": [
            [
                "fcdd80eeed36bcb6"
            ]
        ]
    },
    {
        "id": "fcdd80eeed36bcb6",
        "type": "http request",
        "z": "35dfe99d7f6420b6",
        "g": "5b082e6102fba67f",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2330,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "81b3d6d5f35f45cf",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "name": "Turn Off all Relay Output",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04020000000000",
        "payloadType": "str",
        "x": 210,
        "y": 2020,
        "wires": [
            [
                "5558613571d96c2e"
            ]
        ]
    },
    {
        "id": "5558613571d96c2e",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "name": "link out 47",
        "mode": "link",
        "links": [
            "b31d076d9b9d8385"
        ],
        "x": 405,
        "y": 1880,
        "wires": []
    },
    {
        "id": "464a9b69ebc6aab5",
        "type": "delay",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "15",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 2130,
        "y": 220,
        "wires": [
            [
                "2edc4b06a74d5a83"
            ]
        ]
    },
    {
        "id": "2edc4b06a74d5a83",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "func": "if((flow.get(\"SetValueTemp\")-1<=flow.get(\"Temp_Cathlab\")[0] && flow.get(\"cmdauto\")!=\"Shutdown\")||flow.get(\"bypassEH\")){\n    msg.cmd = \"ON\";\n    if(msg.StatusOutdoor){\n        msg.cmd = \"Done Execute On\";\n        flow.set(\"CMDCOMP\",false);\n    }else{\n        flow.set(\"CMDCOMP\",true);\n        flow.set(\"AutoRequest\", false);\n    }\n    \n}else if(flow.get(\"SetValueTemp\")-3>=flow.get(\"Temp_Cathlab\")[0]){\n    msg.cmd = \"OFF\";\n    if(!msg.StatusOutdoor){\n        msg.cmd = \"Done Execute Off\";\n        flow.set(\"CMDCOMP\",false);\n    }else{\n        flow.set(\"CMDCOMP\",true);\n        flow.set(\"AutoRequest\",false);\n    }   \n}else{\n    msg.cmd = \"In Range\";\n    flow.set(\"CMDCOMP\",false);\n}\n\n\nif(flow.get(\"SystemStatus\")==\"OFF\"){\n    msg.cmd = \"Shutdown\";\n}\nmsg.payload = [flow.get(\"SetValueTemp\"),flow.get(\"Temp_Cathlab\")];\nmsg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'RelayIndoor';\";\nmsg.topic += \"SELECT `OutputIndoor` FROM `Operation`;\";\nmsg.topic += \"SELECT * FROM `OutputIndoor` WHERE `keterangan` = 'Compressor';\";\nmsg.payload = Math.round((Date.now()-flow.get(\"JedaOutdoor\"))/1000);\nmsg.source = \"Compressor\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 220,
        "wires": [
            [
                "eb0162ba7db23916",
                "cf5513157054b8d3"
            ]
        ]
    },
    {
        "id": "9757af732073cc45",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": "link in 34",
        "links": [
            "b6c45c56d26c0e36",
            "33fd7a030a6a94fb"
        ],
        "x": 2045,
        "y": 180,
        "wires": [
            [
                "c2bddadb616c7772"
            ]
        ]
    },
    {
        "id": "c2bddadb616c7772",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "func": "flow.set(\"SetValueTemp\",msg.payload.value);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 180,
        "wires": [
            [
                "19d9ae3d315d66d0"
            ]
        ]
    },
    {
        "id": "72148f13041b090a",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": "On Compressor",
        "func": "\nvar d = msg.payload[0][0];\n\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\n\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.payload[1][0].OutputIndoor));\n\nvar spt = binarycurrent.split(\"\");\n\nif(binarycurrent[msg.payload[2][0].Number-1] == \"0\"){\n    spt[msg.payload[2][0].Number - 1] = \"1\";\n    binarycurrent = spt.join(\"\");\n   msg.payload[1][0][\"OutputIndoor\"] = parseInt(String(msg.payload[1][0].OutputIndoor)) +  parseInt(String(msg.payload[2][0].Dec));\n}\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+String(dec2hex(hex));\nif(Math.round((Date.now()-flow.get(\"JedaOutdoor\"))/1000)>= (60*3)){\n    msg.payload = cmd;    \n}else{\n    msg.payload = null;\n}\nmsg.payload = cmd;\nflow.set(\"TurnOffEH\",false);\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2680,
        "y": 200,
        "wires": [
            [
                "46480a606a86627c"
            ]
        ]
    },
    {
        "id": "eb0162ba7db23916",
        "type": "mysql",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 2370,
        "y": 220,
        "wires": [
            [
                "98c148cf58818e55",
                "3f4c0af15d2802cd"
            ]
        ]
    },
    {
        "id": "98c148cf58818e55",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "property": "cmd",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ON",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OFF",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2510,
        "y": 220,
        "wires": [
            [
                "72148f13041b090a"
            ],
            [
                "136d4353575761d6"
            ]
        ]
    },
    {
        "id": "136d4353575761d6",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": "Off Compressor",
        "func": "\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.payload[1][0].OutputIndoor));\nvar spt = binarycurrent.split(\"\");\nif(binarycurrent[msg.payload[2][0].Number-1] == \"1\"){\n    \n    spt[msg.payload[2][0].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    \n   msg.payload[1][0][\"OutputIndoor\"] = parseInt(String(msg.payload[1][0].OutputIndoor)) +  parseInt(String(msg.payload[2][0].Dec));\n}\n\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+String(dec2hex(hex));\n\nflow.set(\"TurnOffEH\",true);\nflow.set(\"JedaOutdoor\",Date.now());\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2680,
        "y": 240,
        "wires": [
            [
                "46480a606a86627c"
            ]
        ]
    },
    {
        "id": "453f113766bda1c1",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2950,
        "y": 160,
        "wires": []
    },
    {
        "id": "cf5513157054b8d3",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2370,
        "y": 260,
        "wires": []
    },
    {
        "id": "389e1833fe797800",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "12",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1150,
        "y": 420,
        "wires": [
            [
                "5a879adfea19c8fe",
                "ebbe9dbe9482f485"
            ]
        ]
    },
    {
        "id": "7a9ecc2f48d9fb94",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "g": "9b8bf58ec75ff6a5",
        "name": "EF Nyala",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04020000380C00000002",
        "payloadType": "str",
        "x": 460,
        "y": 1380,
        "wires": [
            [
                "4cfa8d4d1d52767a"
            ]
        ]
    },
    {
        "id": "e21d8d63e32a79e0",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": "link out 48",
        "mode": "link",
        "links": [
            "b31d076d9b9d8385"
        ],
        "x": 3075,
        "y": 180,
        "wires": []
    },
    {
        "id": "69706dc29dd9fe20",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "66a3c62460ec38fc",
        "name": "Sensor",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 260,
        "wires": []
    },
    {
        "id": "f8597b0a7a1852a5",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "03020000000000",
        "payloadType": "str",
        "x": 190,
        "y": 2100,
        "wires": [
            [
                "5558613571d96c2e"
            ]
        ]
    },
    {
        "id": "54425ceef7c7c7c0",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 1180,
        "wires": []
    },
    {
        "id": "3ead531332f15a5a",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "name": "Turn Off all Relay OutputIndoor",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04040100000000",
        "payloadType": "str",
        "x": 190,
        "y": 1840,
        "wires": [
            [
                "5558613571d96c2e"
            ]
        ]
    },
    {
        "id": "40739d24f31e7baa",
        "type": "delay",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "7",
        "randomLast": "10",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2960,
        "y": 220,
        "wires": [
            [
                "e21d8d63e32a79e0",
                "453f113766bda1c1"
            ]
        ]
    },
    {
        "id": "da89b2a898b7eb6f",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2130,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "868df7113309f845",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2050,
        "y": 1040,
        "wires": [
            [
                "4f11093a12552f10"
            ]
        ]
    },
    {
        "id": "3457b30a06be4b2f",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2050,
        "y": 1120,
        "wires": [
            [
                "5411fe15aa6f62b7"
            ]
        ]
    },
    {
        "id": "249165d42b821f02",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "aa0275530cd6c3af",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2050,
        "y": 1160,
        "wires": [
            [
                "19fd90ebe02e5c31"
            ]
        ]
    },
    {
        "id": "7998220805b6f325",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "name": "Turn Off all Relay OutputIndoor",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04040100000001",
        "payloadType": "str",
        "x": 190,
        "y": 1880,
        "wires": [
            [
                "5558613571d96c2e"
            ]
        ]
    },
    {
        "id": "7e03e3624f7dcc5f",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "name": "Turn Off all Relay OutputIndoor",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04040100000002",
        "payloadType": "str",
        "x": 190,
        "y": 1920,
        "wires": [
            [
                "5558613571d96c2e"
            ]
        ]
    },
    {
        "id": "f206d8212e4e913f",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "name": "Turn On all Relay OutputIndoor",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04040100000003",
        "payloadType": "str",
        "x": 190,
        "y": 1960,
        "wires": [
            [
                "5558613571d96c2e"
            ]
        ]
    },
    {
        "id": "cbe52428f91bd17b",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": "",
        "links": [
            "60cd77ee87332700"
        ],
        "x": 2345,
        "y": 180,
        "wires": [
            [
                "210d55685edfe927",
                "4256c7015d780505"
            ]
        ]
    },
    {
        "id": "210d55685edfe927",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "func": "flow.set(\"SetValueRH\",msg.payload.value)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 180,
        "wires": [
            [
                "feaf7c08a4f431ac"
            ]
        ]
    },
    {
        "id": "19d9ae3d315d66d0",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload.value",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2250,
        "y": 180,
        "wires": []
    },
    {
        "id": "feaf7c08a4f431ac",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload.value",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2550,
        "y": 180,
        "wires": []
    },
    {
        "id": "4256c7015d780505",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "name": "debug 66",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2510,
        "y": 100,
        "wires": []
    },
    {
        "id": "74c216187b16afd5",
        "type": "delay",
        "z": "35dfe99d7f6420b6",
        "g": "ba1fc06f41c5063d",
        "name": " ",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 510,
        "y": 60,
        "wires": [
            [
                "898f9f5cf774870b",
                "b5ae4594ff1f5495",
                "7565939e88f5d33c"
            ]
        ]
    },
    {
        "id": "56439a0f6a07f97e",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": " ",
        "func": "delete msg[\"reset\"];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 680,
        "wires": [
            [
                "3a08649af6568a27"
            ]
        ]
    },
    {
        "id": "6df7306103bc7e97",
        "type": "delay",
        "z": "35dfe99d7f6420b6",
        "g": "04c6df45a6ea8a79",
        "name": " ",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "17",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 170,
        "y": 1000,
        "wires": [
            [
                "aa050a07e2df3450"
            ]
        ]
    },
    {
        "id": "ebbe9dbe9482f485",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1310,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "93987b0f309f8341",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "name": "Turn Off all Relay Output",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04030100000000",
        "payloadType": "str",
        "x": 210,
        "y": 2060,
        "wires": [
            [
                "5558613571d96c2e"
            ]
        ]
    },
    {
        "id": "c65f681de29387cd",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "name": "0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04040000000000",
        "payloadType": "str",
        "x": 110,
        "y": 1800,
        "wires": [
            [
                "5558613571d96c2e"
            ]
        ]
    },
    {
        "id": "b58a226b1aab2a11",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2420,
        "y": 360,
        "wires": [
            [
                "d1929d5e407f0084"
            ]
        ]
    },
    {
        "id": "d1929d5e407f0084",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "name": "function 1",
        "func": "msg.payload = [Math.round((Date.now()-flow.get(\"JedaOutdoor\"))/1000)];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2560,
        "y": 340,
        "wires": [
            [
                "a45eb33d14487fda"
            ]
        ]
    },
    {
        "id": "a45eb33d14487fda",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "name": "debug 67",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2710,
        "y": 340,
        "wires": []
    },
    {
        "id": "cb4a60666f5945d3",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": "link in 35",
        "links": [
            "f4f0bb734a5396dc"
        ],
        "x": 2045,
        "y": 260,
        "wires": [
            [
                "ce01c1eed5eacd46"
            ]
        ]
    },
    {
        "id": "ce01c1eed5eacd46",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "func": "msg.payload = [flow.get(\"SetValueTemp\"),flow.get(\"Temp_Cathlab\")[0],flow.get(\"SetValueRH\")];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 260,
        "wires": [
            [
                "7834467395ca3b66"
            ]
        ]
    },
    {
        "id": "7834467395ca3b66",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2250,
        "y": 260,
        "wires": []
    },
    {
        "id": "80696ba7f5b39856",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 2180,
        "wires": [
            [
                "8d44e1a039fbae53"
            ]
        ]
    },
    {
        "id": "8d44e1a039fbae53",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "name": "function 2",
        "func": "msg.payload = flow.get(\"RelayInputIndoor\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2180,
        "wires": [
            [
                "573b47cffd9c51c8"
            ]
        ]
    },
    {
        "id": "573b47cffd9c51c8",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "name": "debug 68",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 2140,
        "wires": []
    },
    {
        "id": "7b4eaa796c728766",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": "Turn Off EH",
        "func": "msg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'RelayOutput';\";\nmsg.topic += \"SELECT * FROM `Output` WHERE `keterangan` = 'EH1' OR `keterangan` = 'EH2';\";\nmsg.topic += \"SELECT * FROM `Operation`;\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3250,
        "y": 240,
        "wires": [
            [
                "6a34c7554550a908"
            ]
        ]
    },
    {
        "id": "6a34c7554550a908",
        "type": "mysql",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 3410,
        "y": 240,
        "wires": [
            [
                "4e13d440f159f12f"
            ]
        ]
    },
    {
        "id": "4e13d440f159f12f",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " Off1",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\nvar binarycurrent = reverseString(decToBinary(msg.payload[2][0].Output));\nvar spt = binarycurrent.split(\"\");\nif(binarycurrent[msg.payload[1][0].Number-1] == \"1\"){\n    spt[msg.payload[1][0].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if(flow.get(\"RelayOutput\")[msg.payload[1][0].Number].Stat == 1){\n        msg.statusEH1 = true;\n    }else{\n        msg.statusEH1 = false;\n    }\n    msg.payload[2][0][\"Output\"] = parseInt(String(msg.payload[2][0].Output)) -  parseInt(String(msg.payload[1][0].Dec));\n}\nif(binarycurrent[msg.payload[1][1].Number-1] == \"1\"){\n    msg.statusEH2 = true;\n}\nmsg.numberOutput = msg.payload[2][0].Output;\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+\"C\";//String(dec2hex(hex));\nmsg.payload = cmd;\nif(!msg.StatusOutdoor){\n    msg.statusEH1 = false;\n    // msg.statusEH2 = false;\n\n}\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3530,
        "y": 240,
        "wires": [
            [
                "385985bc8b6ba9b7"
            ]
        ]
    },
    {
        "id": "385985bc8b6ba9b7",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "property": "statusEH1",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3650,
        "y": 220,
        "wires": [
            [
                "fe11b8d634a8581d"
            ]
        ]
    },
    {
        "id": "766fd9b49910a916",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "property": "statusEH2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3650,
        "y": 260,
        "wires": [
            [
                "2d4ed30ee445cfd5"
            ]
        ]
    },
    {
        "id": "fe11b8d634a8581d",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": "link out 49",
        "mode": "link",
        "links": [
            "b31d076d9b9d8385"
        ],
        "x": 3755,
        "y": 220,
        "wires": []
    },
    {
        "id": "2d4ed30ee445cfd5",
        "type": "delay",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": "",
        "pauseType": "random",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "7",
        "randomLast": "9",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3800,
        "y": 260,
        "wires": [
            [
                "f821f21f483b57c8"
            ]
        ]
    },
    {
        "id": "f821f21f483b57c8",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " Off2",
        "func": "msg.payload = msg.resultsql;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\nvar binarycurrent = reverseString(decToBinary(msg.numberOutput));\nvar spt = binarycurrent.split(\"\");\nif (binarycurrent[msg.payload[1][1].Number -1] == \"1\"){\n    \n    spt[msg.payload[1][1].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if (flow.get(\"RelayOutput\")[msg.payload[1][1].Number].Stat == 1){\n        msg.statusEH2 = true;\n    }else{\n        msg.statusEH2 = false;\n    }\n   msg[\"numberOutput\"] = parseInt(String(msg.numberOutput)) -  parseInt(String(msg.payload[1][1].Dec));\n}\n\n\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3930,
        "y": 260,
        "wires": [
            [
                "3234af6cd2717f97"
            ]
        ]
    },
    {
        "id": "3234af6cd2717f97",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "property": "statusEH2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 4050,
        "y": 260,
        "wires": [
            [
                "dbcab75afc6ebe4f"
            ]
        ]
    },
    {
        "id": "dbcab75afc6ebe4f",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": "link out 50",
        "mode": "link",
        "links": [
            "b31d076d9b9d8385"
        ],
        "x": 4135,
        "y": 260,
        "wires": []
    },
    {
        "id": "57c5d2ef4d968f58",
        "type": "delay",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 3110,
        "y": 260,
        "wires": [
            [
                "7b4eaa796c728766"
            ]
        ]
    },
    {
        "id": "61db46200aa6260e",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SELECT * FROM `devicelist` WHERE `keterangan` != 'RelayOutput';",
        "payload": "",
        "payloadType": "date",
        "x": 1770,
        "y": 1740,
        "wires": [
            [
                "d4fcf8aab1c97aa4"
            ]
        ]
    },
    {
        "id": "d4fcf8aab1c97aa4",
        "type": "mysql",
        "z": "35dfe99d7f6420b6",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 1930,
        "y": 1740,
        "wires": [
            [
                "4829b6760ee4bfd0"
            ]
        ]
    },
    {
        "id": "4829b6760ee4bfd0",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "name": "debug 69",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 1840,
        "wires": []
    },
    {
        "id": "6ad6839e074c1a58",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "name": "debug 70",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2420,
        "y": 700,
        "wires": []
    },
    {
        "id": "3aa4b2842afad13e",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "8423ccb755deee9e",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "keterangan",
        "targetType": "msg",
        "statusVal": "payload.keterangan",
        "statusType": "auto",
        "x": 2790,
        "y": 620,
        "wires": []
    },
    {
        "id": "167941cc673e2fc6",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "8423ccb755deee9e",
        "name": " ",
        "func": "msg.rate = (flow.get(\"SensorQty\").length*2*8000)+12000;\nmsg.delay = msg.rate-4000;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 580,
        "wires": [
            [
                "9ce66aee0b743282"
            ]
        ]
    },
    {
        "id": "a9b8bb6f99363af7",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "name": "Rate",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "rate",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 740,
        "wires": []
    },
    {
        "id": "606b019e77cfe191",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "8423ccb755deee9e",
        "name": " ",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "2",
        "extend": false,
        "overrideDelay": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2130,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "4a13c93eabda305e",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "8423ccb755deee9e",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "rate",
        "statusType": "auto",
        "x": 2390,
        "y": 620,
        "wires": []
    },
    {
        "id": "39c934806d96602b",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "8423ccb755deee9e",
        "name": " ",
        "func": "if(!flow.get(\"AutoRequest\")){\n    msg.payload = null;\n}\nmsg.source = \"Request\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 580,
        "wires": [
            [
                "45a8c827e2500f7b"
            ]
        ]
    },
    {
        "id": "45a8c827e2500f7b",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "8423ccb755deee9e",
        "name": " ",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1750,
        "y": 580,
        "wires": [
            [
                "167941cc673e2fc6"
            ]
        ]
    },
    {
        "id": "3ba35476cff45e7a",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 2130,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "8ac3a756328edaf3",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "8423ccb755deee9e",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "autorequest",
        "targetType": "msg",
        "statusVal": "payload.keterangan",
        "statusType": "auto",
        "x": 2650,
        "y": 540,
        "wires": []
    },
    {
        "id": "46480a606a86627c",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2830,
        "y": 220,
        "wires": [
            [
                "40739d24f31e7baa"
            ]
        ]
    },
    {
        "id": "a245fac6bcbf491b",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "property": "pass",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2990,
        "y": 260,
        "wires": [
            [
                "fd8b16261dfb244f",
                "57c5d2ef4d968f58"
            ]
        ]
    },
    {
        "id": "fd8b16261dfb244f",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 3110,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "3d06d65caacffa71",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "func": "var RelayOutput = flow.get(\"RelayOutput\");\nfor (let index = 0; index < RelayOutput.length; index++) {\n    if(RelayOutput[index].keterangan == \"EH1\" && RelayOutput[index].Stat == 0){\n        msg.EH1Stat = true;\n    }else if(RelayOutput[index].keterangan == \"EH1\" && RelayOutput[index].Stat == 1){\n        msg.EH1Stat = false;\n    }\n}\nfor (let index = 0; index < RelayOutput.length; index++) {\n    if(RelayOutput[index].keterangan == \"EH2\" && RelayOutput[index].Stat == 0){\n        msg.EH2Stat = true;\n    }else if(RelayOutput[index].keterangan == \"EH2\" && RelayOutput[index].Stat == 1){\n        msg.EH2Stat = false;\n    }\n}\nif(msg.EH1Stat && msg.EH2Stat){\n    msg.pass = false;\n}else{\n    msg.pass = true;\n}\nvar StatEH1 = flow.get(\"RelayInput\")[4].Stat;\nvar StatEH2 = flow.get(\"RelayInput\")[5].Stat;\nif(msg.StatusOutdoor){\n    msg.pass = false;\n}else if(!msg.StatusOutdoor && (StatEH1 || StatEH2) && !flow.get(\"bypassEH\")){\n    msg.pass = true;\n}\nmsg.source = \"OFFEHCOMP\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2870,
        "y": 260,
        "wires": [
            [
                "a245fac6bcbf491b",
                "180235f064e5b7a4"
            ]
        ]
    },
    {
        "id": "da2e9b0a77deb057",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SELECT * FROM `recorddevice` where `networkid` = 3 AND `devid` = 2 order by `epoch` desc;",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 1980,
        "wires": [
            [
                "5ad77a94814d62c3"
            ]
        ]
    },
    {
        "id": "5ad77a94814d62c3",
        "type": "mysql",
        "z": "35dfe99d7f6420b6",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 740,
        "y": 1960,
        "wires": [
            [
                "0d0fb9c0c775dd6d",
                "2154ea7b72ba18a2"
            ]
        ]
    },
    {
        "id": "2154ea7b72ba18a2",
        "type": "mqtt out",
        "z": "35dfe99d7f6420b6",
        "name": "",
        "topic": "ExportToLaptop",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "415d098faf23ad7c",
        "x": 930,
        "y": 1940,
        "wires": []
    },
    {
        "id": "0d0fb9c0c775dd6d",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "name": "debug 71",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 2020,
        "wires": []
    },
    {
        "id": "7565939e88f5d33c",
        "type": "mqtt out",
        "z": "35dfe99d7f6420b6",
        "g": "ba1fc06f41c5063d",
        "name": "",
        "topic": "iota238/cmd",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "415d098faf23ad7c",
        "x": 690,
        "y": 60,
        "wires": []
    },
    {
        "id": "b07dca4916e19150",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2580,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "2a791e28b6137207",
        "type": "switch",
        "z": "35dfe99d7f6420b6",
        "g": "ba1fc06f41c5063d",
        "name": " ",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "14",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 270,
        "y": 60,
        "wires": [
            [
                "4a08a97d51c8f303"
            ]
        ]
    },
    {
        "id": "3cbac83664664f02",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "ba1fc06f41c5063d",
        "name": "Receive",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 340,
        "y": 120,
        "wires": []
    },
    {
        "id": "cc36da525a57c466",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "66a3c62460ec38fc",
        "name": "Receive",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "realdata",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 920,
        "y": 260,
        "wires": []
    },
    {
        "id": "d3048506e82c8e4d",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": "link in 33",
        "links": [
            "1c9c4f79bd4b8b7f"
        ],
        "x": 2045,
        "y": 220,
        "wires": [
            [
                "464a9b69ebc6aab5",
                "3ba35476cff45e7a"
            ]
        ]
    },
    {
        "id": "180235f064e5b7a4",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "pass",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2990,
        "y": 300,
        "wires": []
    },
    {
        "id": "f84aa71efce8693d",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "7d1dd2a6ee9e18ec",
        "name": " ",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 490,
        "y": 360,
        "wires": [
            [
                "a43b5e8f1d19af0a"
            ]
        ]
    },
    {
        "id": "3f4c0af15d2802cd",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "cmd",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2530,
        "y": 260,
        "wires": []
    },
    {
        "id": "094b36590a7c8efc",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": " ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 820,
        "wires": [
            [
                "70cde41499d17755"
            ]
        ]
    },
    {
        "id": "70cde41499d17755",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": "link out 52",
        "mode": "link",
        "links": [
            "6d4d07e485589e43"
        ],
        "x": 225,
        "y": 820,
        "wires": []
    },
    {
        "id": "f86183f3eae2b244",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": " ",
        "func": "msg.loops = flow.get(\"StartLoops\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 680,
        "wires": [
            [
                "db96c0e43a3591ec",
                "43df406e15d6781c"
            ]
        ]
    },
    {
        "id": "43df406e15d6781c",
        "type": "trigger",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": " ",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 330,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "4ddbfb6d2aa10287",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "80d7667e1055e0a5",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "SystemStatus",
        "targetType": "msg",
        "statusVal": "SystemStatus",
        "statusType": "auto",
        "x": 1010,
        "y": 460,
        "wires": []
    },
    {
        "id": "ee118fffde7af227",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "82aba440e21a64b7",
        "name": "link in 36",
        "links": [
            "1c9c4f79bd4b8b7f"
        ],
        "x": 2745,
        "y": 280,
        "wires": [
            [
                "3d06d65caacffa71"
            ]
        ]
    },
    {
        "id": "ddb5fcc275d3e9cf",
        "type": "subflow:e9b71a55.b25c68",
        "z": "35dfe99d7f6420b6",
        "g": "8423ccb755deee9e",
        "name": "",
        "x": 2250,
        "y": 580,
        "wires": [
            [
                "075c929877dfd052",
                "4a13c93eabda305e"
            ],
            []
        ]
    },
    {
        "id": "daa4e502c3382dd9",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "03020000000000",
        "payloadType": "str",
        "x": 440,
        "y": 2100,
        "wires": [
            [
                "b25a431851a8cbf4"
            ]
        ]
    },
    {
        "id": "b25a431851a8cbf4",
        "type": "link out",
        "z": "35dfe99d7f6420b6",
        "name": "link out 53",
        "mode": "link",
        "links": [
            "b31d076d9b9d8385"
        ],
        "x": 585,
        "y": 2060,
        "wires": []
    },
    {
        "id": "bbd431a683b4aa35",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04020000000000",
        "payloadType": "str",
        "x": 430,
        "y": 2040,
        "wires": [
            [
                "b25a431851a8cbf4"
            ]
        ]
    },
    {
        "id": "8b823c68d2a0c6d0",
        "type": "inject",
        "z": "35dfe99d7f6420b6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1719794051117",
        "payloadType": "num",
        "x": 1080,
        "y": 2320,
        "wires": [
            [
                "3da07b2defba0292"
            ]
        ]
    },
    {
        "id": "3da07b2defba0292",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "name": "debug 72",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 2320,
        "wires": []
    },
    {
        "id": "f8d6128a04b789e0",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "65bb3a57f4d66aff",
        "name": "link in 37",
        "links": [
            "f4f0bb734a5396dc"
        ],
        "x": 1595,
        "y": 220,
        "wires": [
            [
                "84ced214d2d64e92"
            ]
        ]
    },
    {
        "id": "84ced214d2d64e92",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "65bb3a57f4d66aff",
        "name": " ",
        "func": "msg.topic = \"SELECT `UnitStatus` FROM `information`;\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 220,
        "wires": [
            [
                "b728c9122ad298fa"
            ]
        ]
    },
    {
        "id": "b728c9122ad298fa",
        "type": "mysql",
        "z": "35dfe99d7f6420b6",
        "g": "65bb3a57f4d66aff",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1790,
        "y": 220,
        "wires": [
            [
                "b804af4de5f29d8b"
            ]
        ]
    },
    {
        "id": "b804af4de5f29d8b",
        "type": "function",
        "z": "35dfe99d7f6420b6",
        "g": "65bb3a57f4d66aff",
        "name": " ",
        "func": "flow.set(\"SystemStatus\",msg.payload[0].UnitStatus);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "42404c0a4ce99770",
        "type": "cayennelpp-decoder",
        "z": "35dfe99d7f6420b6",
        "g": "66a3c62460ec38fc",
        "name": "decoder",
        "x": 860,
        "y": 220,
        "wires": [
            [
                "19affaec2d8aefb2"
            ]
        ]
    },
    {
        "id": "40907b37dd4125bf",
        "type": "mqtt in",
        "z": "35dfe99d7f6420b6",
        "name": "",
        "topic": "iota238/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "415d098faf23ad7c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 361,
        "y": 2339,
        "wires": [
            [
                "544a34d72f735257"
            ]
        ]
    },
    {
        "id": "544a34d72f735257",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "name": "debug 73",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 2360,
        "wires": []
    },
    {
        "id": "bffe3c1e6b045ba4",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "ba1fc06f41c5063d",
        "name": "Source",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "source",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 520,
        "y": 120,
        "wires": []
    },
    {
        "id": "10c5834dc0dba407",
        "type": "debug",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": "PriorityEH",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "bypass",
        "targetType": "msg",
        "statusVal": " ",
        "statusType": "auto",
        "x": 560,
        "y": 880,
        "wires": []
    },
    {
        "id": "9c3b50249e5ea8a0",
        "type": "link in",
        "z": "35dfe99d7f6420b6",
        "g": "b4d6d08760d4508b",
        "name": "link in 38",
        "links": [
            "1c9c4f79bd4b8b7f"
        ],
        "x": 465,
        "y": 880,
        "wires": [
            [
                "10c5834dc0dba407"
            ]
        ]
    },
    {
        "id": "78556a57877ed9b4",
        "type": "debug",
        "z": "378d4de646e6a6a9",
        "g": "40c87e07c31a3215",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 100,
        "wires": []
    },
    {
        "id": "3080fa564e77baca",
        "type": "mysql",
        "z": "378d4de646e6a6a9",
        "g": "40c87e07c31a3215",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 540,
        "y": 100,
        "wires": [
            [
                "78556a57877ed9b4"
            ]
        ]
    },
    {
        "id": "c8964424cc35c354",
        "type": "function",
        "z": "378d4de646e6a6a9",
        "g": "40c87e07c31a3215",
        "name": "Select Value",
        "func": "// msg.topic = \"SELECT * FROM MonitoringData\";\n// msg.topic = \"SELECT Temp_Cathlab FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\nmsg.topic = \"SELECT * FROM information  LIMIT 1\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 100,
        "wires": [
            [
                "3080fa564e77baca"
            ]
        ]
    },
    {
        "id": "ea475c272ab45b90",
        "type": "inject",
        "z": "378d4de646e6a6a9",
        "g": "40c87e07c31a3215",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "c8964424cc35c354"
            ]
        ]
    },
    {
        "id": "c645019db71ab212",
        "type": "http in",
        "z": "378d4de646e6a6a9",
        "g": "efb9b4d03554dd07",
        "name": "",
        "url": "/getData",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "dd5861eedde59655"
            ]
        ]
    },
    {
        "id": "b18818cae5e53b68",
        "type": "mysql",
        "z": "378d4de646e6a6a9",
        "g": "efb9b4d03554dd07",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 580,
        "y": 220,
        "wires": [
            [
                "cba9f2a66adbe5db"
            ]
        ]
    },
    {
        "id": "dd5861eedde59655",
        "type": "function",
        "z": "378d4de646e6a6a9",
        "g": "efb9b4d03554dd07",
        "name": "Query",
        "func": "// msg.topic = \"SELECT Temp_Machine FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\nmsg.topic = \"SELECT * FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 220,
        "wires": [
            [
                "b18818cae5e53b68"
            ]
        ]
    },
    {
        "id": "cba9f2a66adbe5db",
        "type": "http response",
        "z": "378d4de646e6a6a9",
        "g": "efb9b4d03554dd07",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 220,
        "wires": []
    },
    {
        "id": "d201e0917baad2df",
        "type": "http in",
        "z": "378d4de646e6a6a9",
        "g": "efb9b4d03554dd07",
        "name": "",
        "url": "/getDataSetting",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "84241278b6a3aaf2"
            ]
        ]
    },
    {
        "id": "84241278b6a3aaf2",
        "type": "function",
        "z": "378d4de646e6a6a9",
        "g": "efb9b4d03554dd07",
        "name": "Query",
        "func": "// msg.topic = \"SELECT Temp_Machine FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\nmsg.topic = \"SELECT * FROM setting  LIMIT 1\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 280,
        "wires": [
            [
                "55ba2f141e99ac34"
            ]
        ]
    },
    {
        "id": "caf9bd2d7961e907",
        "type": "http response",
        "z": "378d4de646e6a6a9",
        "g": "efb9b4d03554dd07",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 280,
        "wires": []
    },
    {
        "id": "55ba2f141e99ac34",
        "type": "mysql",
        "z": "378d4de646e6a6a9",
        "g": "efb9b4d03554dd07",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 580,
        "y": 280,
        "wires": [
            [
                "caf9bd2d7961e907"
            ]
        ]
    },
    {
        "id": "a1557713a29eb9a8",
        "type": "mysql",
        "z": "378d4de646e6a6a9",
        "g": "d5a9f739bd804cb9",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 940,
        "y": 460,
        "wires": [
            [
                "e205ec86ab77c975"
            ]
        ]
    },
    {
        "id": "e205ec86ab77c975",
        "type": "http response",
        "z": "378d4de646e6a6a9",
        "g": "d5a9f739bd804cb9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 460,
        "wires": []
    },
    {
        "id": "1287e9fea6a10339",
        "type": "http in",
        "z": "378d4de646e6a6a9",
        "g": "d5a9f739bd804cb9",
        "name": "",
        "url": "/setDataTemp",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 460,
        "wires": [
            [
                "a510ddc8438b7387"
            ]
        ]
    },
    {
        "id": "a510ddc8438b7387",
        "type": "function",
        "z": "378d4de646e6a6a9",
        "g": "d5a9f739bd804cb9",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 460,
        "wires": [
            [
                "8f2457651451085d"
            ]
        ]
    },
    {
        "id": "8f2457651451085d",
        "type": "function",
        "z": "378d4de646e6a6a9",
        "g": "d5a9f739bd804cb9",
        "name": "UPDATE setting SET TempCathlab",
        "func": "var value = msg.payload.value;\nvar query = `UPDATE setting SET TempCathlab = ${value}`;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 460,
        "wires": [
            [
                "a1557713a29eb9a8",
                "b6c45c56d26c0e36"
            ]
        ]
    },
    {
        "id": "185bbaf1ad097dbd",
        "type": "http in",
        "z": "378d4de646e6a6a9",
        "g": "d5a9f739bd804cb9",
        "name": "",
        "url": "/setDataRH",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 500,
        "wires": [
            [
                "62ac201d5ac5b739"
            ]
        ]
    },
    {
        "id": "62ac201d5ac5b739",
        "type": "function",
        "z": "378d4de646e6a6a9",
        "g": "d5a9f739bd804cb9",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 500,
        "wires": [
            [
                "6421cad4e6688c25"
            ]
        ]
    },
    {
        "id": "6421cad4e6688c25",
        "type": "function",
        "z": "378d4de646e6a6a9",
        "g": "d5a9f739bd804cb9",
        "name": "UPDATE setting SET RHCathlab",
        "func": "var value = msg.payload.value;\nvar query = `UPDATE setting SET RHCathlab = ${value}`;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 500,
        "wires": [
            [
                "a1557713a29eb9a8",
                "60cd77ee87332700"
            ]
        ]
    },
    {
        "id": "5ff319dc135fe0c7",
        "type": "http in",
        "z": "378d4de646e6a6a9",
        "g": "d5a9f739bd804cb9",
        "name": "",
        "url": "/setDataTempM",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 540,
        "wires": [
            [
                "20600edefb2762e1"
            ]
        ]
    },
    {
        "id": "20600edefb2762e1",
        "type": "function",
        "z": "378d4de646e6a6a9",
        "g": "d5a9f739bd804cb9",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 540,
        "wires": [
            [
                "482db8c38c758fe1"
            ]
        ]
    },
    {
        "id": "482db8c38c758fe1",
        "type": "function",
        "z": "378d4de646e6a6a9",
        "g": "d5a9f739bd804cb9",
        "name": "UPDATE setting SET TempMachine ",
        "func": "var value = msg.payload.value;\nvar query = `UPDATE setting SET TempMachine = ${value}`;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 540,
        "wires": [
            [
                "a1557713a29eb9a8"
            ]
        ]
    },
    {
        "id": "bc7ddf4dfba4fee3",
        "type": "http in",
        "z": "378d4de646e6a6a9",
        "g": "d5a9f739bd804cb9",
        "name": "",
        "url": "/setDataRHM",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 580,
        "wires": [
            [
                "6bd822d3fcdc6568"
            ]
        ]
    },
    {
        "id": "6bd822d3fcdc6568",
        "type": "function",
        "z": "378d4de646e6a6a9",
        "g": "d5a9f739bd804cb9",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 580,
        "wires": [
            [
                "b30ba567782e2402"
            ]
        ]
    },
    {
        "id": "b30ba567782e2402",
        "type": "function",
        "z": "378d4de646e6a6a9",
        "g": "d5a9f739bd804cb9",
        "name": "UPDATE setting SET RHMachine",
        "func": "var value = msg.payload.value;\nvar query = `UPDATE setting SET RHMachine = ${value}`;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 580,
        "wires": [
            [
                "a1557713a29eb9a8"
            ]
        ]
    },
    {
        "id": "3fb75d04116fed04",
        "type": "function",
        "z": "378d4de646e6a6a9",
        "g": "61f331ed3c64c239",
        "name": "Prepare data for inserting into the database",
        "func": "// Generate sample data to insert\nconst data = {\n    Timestamp: new Date(),\n    Temp_Cathlab: 25.5,\n    RH_Cathlab: 60,\n    Temp_Machine: 27.8,\n    RH_Machine: 55.5,\n    Outdoor_Unit: 1,\n    AHU_Status: 1,\n    Pre_Filter: 155,\n    HEPA_Filter: 155,\n    Booster_Fan: 1,\n    Exhaust_Fan: 1,\n    Heater_1: 1,\n    Heater_2: 1\n};\n\n// Construct the SQL query\nconst keys = Object.keys(data);\nconst values = Object.values(data).map(value => typeof value === 'string' ? '${value}' : value);\nconst placeholders = keys.map(() => '?').join(',');\nconst query = `INSERT INTO monitoringdata (${keys.join(',')}) VALUES (${placeholders})`;\n\n// Set the query as payload for the next node\nmsg.topic = query;\nmsg.payload = values;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 720,
        "wires": [
            [
                "dbca39cb1bc55641"
            ]
        ]
    },
    {
        "id": "d9872cefc209a435",
        "type": "inject",
        "z": "378d4de646e6a6a9",
        "g": "61f331ed3c64c239",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 720,
        "wires": [
            [
                "3fb75d04116fed04"
            ]
        ]
    },
    {
        "id": "e6c3f59cac1fe465",
        "type": "debug",
        "z": "378d4de646e6a6a9",
        "g": "61f331ed3c64c239",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 720,
        "wires": []
    },
    {
        "id": "dbca39cb1bc55641",
        "type": "mysql",
        "z": "378d4de646e6a6a9",
        "g": "61f331ed3c64c239",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 880,
        "y": 720,
        "wires": [
            [
                "e6c3f59cac1fe465"
            ]
        ]
    },
    {
        "id": "c325b631d611368d",
        "type": "http in",
        "z": "378d4de646e6a6a9",
        "g": "efb9b4d03554dd07",
        "name": "",
        "url": "/getInfoData",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 340,
        "wires": [
            [
                "2aa92621f3994d41"
            ]
        ]
    },
    {
        "id": "2aa92621f3994d41",
        "type": "function",
        "z": "378d4de646e6a6a9",
        "g": "efb9b4d03554dd07",
        "name": "Query",
        "func": "// msg.topic = \"SELECT Temp_Machine FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\nmsg.topic = \"SELECT * FROM information  LIMIT 1\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 340,
        "wires": [
            [
                "c190fd2f4581e028"
            ]
        ]
    },
    {
        "id": "c190fd2f4581e028",
        "type": "mysql",
        "z": "378d4de646e6a6a9",
        "g": "efb9b4d03554dd07",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 580,
        "y": 340,
        "wires": [
            [
                "ff18c8c9b3311b3a"
            ]
        ]
    },
    {
        "id": "ff18c8c9b3311b3a",
        "type": "http response",
        "z": "378d4de646e6a6a9",
        "g": "efb9b4d03554dd07",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 340,
        "wires": []
    },
    {
        "id": "3ae2dd7eff25aca1",
        "type": "function",
        "z": "378d4de646e6a6a9",
        "name": "Update Unit Status",
        "func": "var status = msg.payload\n\nvar data = {\n    \n    UnitStatus: status,\n    ID: 1\n};\n\n// Construct the SQL UPDATE query\nvar query = `UPDATE information SET\n             UnitStatus = '${data.UnitStatus}'\n             WHERE ID = '${data.ID}'`;\n\n// Send the SQL query to the MySQL node\nmsg.topic = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 840,
        "wires": [
            [
                "dbca39cb1bc55641"
            ]
        ]
    },
    {
        "id": "09f2d94860c21857",
        "type": "inject",
        "z": "378d4de646e6a6a9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ON",
        "payloadType": "str",
        "x": 170,
        "y": 800,
        "wires": [
            [
                "3ae2dd7eff25aca1"
            ]
        ]
    },
    {
        "id": "63a51b4ab2ec9035",
        "type": "http in",
        "z": "378d4de646e6a6a9",
        "name": "",
        "url": "/unitstatus",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 920,
        "wires": [
            [
                "1bba9eb9c7760962"
            ]
        ]
    },
    {
        "id": "1bba9eb9c7760962",
        "type": "debug",
        "z": "378d4de646e6a6a9",
        "name": "debug 49",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 920,
        "wires": []
    },
    {
        "id": "913ccca02da7e710",
        "type": "function",
        "z": "378d4de646e6a6a9",
        "g": "d5a9f739bd804cb9",
        "name": "UPDATE information SET UnitStatus",
        "func": "var value = msg.payload.value;\n// var query = `UPDATE unitstatus SET Stat = ${value}`;\n// Check the value and set the query accordingly\nvar query;\nif (value === 1) {\n    query = `UPDATE information SET UnitStatus = 'ON'`;\n} else {\n    query = `UPDATE information SET UnitStatus = 'OFF'`;\n}\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 620,
        "wires": [
            [
                "a1557713a29eb9a8",
                "650b10bde6fcf31c"
            ]
        ]
    },
    {
        "id": "0bbe5cd14d7ba9e2",
        "type": "function",
        "z": "378d4de646e6a6a9",
        "g": "d5a9f739bd804cb9",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 620,
        "wires": [
            [
                "913ccca02da7e710"
            ]
        ]
    },
    {
        "id": "18a56b7ec70e75dc",
        "type": "http in",
        "z": "378d4de646e6a6a9",
        "g": "d5a9f739bd804cb9",
        "name": "",
        "url": "/setUnitStat",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 620,
        "wires": [
            [
                "0bbe5cd14d7ba9e2"
            ]
        ]
    },
    {
        "id": "650b10bde6fcf31c",
        "type": "link out",
        "z": "378d4de646e6a6a9",
        "g": "d5a9f739bd804cb9",
        "name": "Interface",
        "mode": "link",
        "links": [
            "7143a0d19d341e42"
        ],
        "x": 885,
        "y": 620,
        "wires": []
    },
    {
        "id": "b6c45c56d26c0e36",
        "type": "link out",
        "z": "378d4de646e6a6a9",
        "name": "GantiTemp",
        "mode": "link",
        "links": [
            "9757af732073cc45"
        ],
        "x": 805,
        "y": 400,
        "wires": []
    },
    {
        "id": "60cd77ee87332700",
        "type": "link out",
        "z": "378d4de646e6a6a9",
        "g": "d5a9f739bd804cb9",
        "name": "RHCathLab",
        "mode": "link",
        "links": [
            "cbe52428f91bd17b"
        ],
        "x": 885,
        "y": 500,
        "wires": []
    }
]