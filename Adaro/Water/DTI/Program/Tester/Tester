#include <RadioLib.h>
#include "STM32LowPower.h"
#include "backup.h"

#define HAL_PWR_MODULE_ENABLED

#define LED       PC13
#define NSS       PA4
#define DIO0      PB1
#define DIO1      PA15
//#define DIO2      PB3
#define LORA_RST  PB14
//#define WAKE_UP   PA0
//#define SDA       PB9
//#define SCL       PB8
//#define RXD       PA10
//#define TXD       PA9
#define LORA_ON   PA11
#define SENSOR    PA0
#define SENSOR_ON PA1
#define CONTROL_WORD   0
#define SAMPLING_REG   1
#define METER_REG      2
#define STA_REG        3
#define SAMPLING_RATE  200
#define UPDATE_RATE    600
#define THRESHOLD      500

SX1276 lora = new Module(NSS, DIO0, LORA_RST, DIO1);

String DEVID = "M030";
uint32_t meterCounter;
uint32_t samplingCounter;
uint32_t st1;

void blinkLed(int n) {
  for (int i = 0; i < n; i++) {
    digitalWrite(LED, LOW);
    delay(200);
    digitalWrite(LED, HIGH);
    delay(200);
  }
}

String xorChecksum(String s) {
  byte b = s.charAt(0);
  for (int i = 1; i < s.length(); i++) {
    b = b ^ s.charAt(i);
  }
  String checksum = String(b, HEX);
  if (checksum.length() == 1) checksum = "0" + checksum;
  return checksum;
}

void sendDataSensor() {

  int state = lora.begin(920.0, 125.0, 9, 7, SX127X_SYNC_WORD, 17, 8, 0);
  if (state == ERR_NONE) {
    //Serial.println(F("success!"));
  } else {
    //Serial.print(F("failed, code "));
    //Serial.println(state);
    blinkLed(20);
    while (true);
  }

  uint32_t count = getBackupRegister(METER_REG);
  String str = String(DEVID) + "," + String(count);
  String str1 = xorChecksum(str);
  str += ":" + str1 + "$";
  state = lora.scanChannel();
  int cacah = 0;
  // tunggu sampai channel nya free
  while ((state == PREAMBLE_DETECTED) && (cacah < 5)) {
    delay(random(300, 1000));
    state = lora.scanChannel();
    cacah++;
  }

  state = lora.transmit(str.c_str());
  if (state == ERR_NONE) {
    // the packet was successfully transmitted
    blinkLed(2);

  }

  //Serial.println();
}

void setup() {
  // put your setup code here, to run once:
  //Serial.begin(115200);

  enableBackupDomain();
  LowPower.begin();
}

void loop() {
  // put your main code here, to run repeatedly:
  pinMode(SENSOR, INPUT_ANALOG);
  pinMode(SENSOR_ON, OUTPUT_OPEN_DRAIN);
  digitalWrite(SENSOR_ON, LOW);
  delay(2);
  uint32_t controlWord = getBackupRegister(CONTROL_WORD);
  if (controlWord == 0x40) {
    samplingCounter = getBackupRegister(SAMPLING_REG);
    meterCounter = getBackupRegister(METER_REG);
    st1 = getBackupRegister(STA_REG);
  } else {
    setBackupRegister(CONTROL_WORD, 0x40);
    setBackupRegister(SAMPLING_REG, 0);
    setBackupRegister(METER_REG, 0);
    setBackupRegister(STA_REG, 0);
  }

  int analogIn = analogRead(SENSOR);
  if ((analogIn > THRESHOLD) && (st1 == 0)) {
//  if ((analogIn > 0) && (st1 == 0)) {
    st1 = 1;
    setBackupRegister(STA_REG, st1);
  }

  if ((analogIn < THRESHOLD) && (st1 == 1)) {
//  if ((analogIn == 0) && (st1 == 0)) {
    st1 = 0;
    meterCounter++;
    setBackupRegister(METER_REG, meterCounter);
    setBackupRegister(STA_REG, st1);
  }
  digitalWrite(SENSOR_ON, HIGH);
  //adc_disable(SENSOR);
  // ADCSRA &= ~(1 << 7);   // disable ADC
  //  pinMode(SENSOR, OUTPUT_OPEN_DRAIN);
  //  pinMode(SENSOR_ON, OUTPUT_OPEN_DRAIN);
  samplingCounter = getBackupRegister(SAMPLING_REG);
  samplingCounter++;
  if (samplingCounter > UPDATE_RATE) {  // send data
    samplingCounter = 0;
    pinMode(LED, OUTPUT);
    pinMode(LORA_ON, OUTPUT);
    digitalWrite(LED, HIGH);
    digitalWrite(LORA_ON, LOW);
    sendDataSensor();
    digitalWrite(LORA_ON, HIGH);
  }
  setBackupRegister(SAMPLING_REG, samplingCounter);
  LowPower.shutdown(SAMPLING_RATE);
}
